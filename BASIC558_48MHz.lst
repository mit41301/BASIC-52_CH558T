
C51ASM V1.2             Copyright (c) 2009 Atmel Corp.            PAGE 1





        8051 Macro Assembler   C 5 1 A S M   V 1.2
        ==========================================



        Source File:     BASIC558_48MHz.asm
        Object File(s):  BASIC558_48MHz.hex
        List File:       BASIC558_48MHz.lst



 Line    I  Addr Code           Source

    1:                          $mod51
    2:           N      0001    CH559T		SET	1		; Chip select, 1=CH559T, 
    3:                          ;                                       
    4:                          ;                                       
    5:                          ;
    6:                          ; WCH CH559T/L ëŒâûÉoÅ[ÉWÉáÉì(SFRÉAÉNÉZÉ
    7:                          ;   Internal Clock 12MHz, CPU Clock(Fsys
    8:                          ;   Timer2 Ç UART0 ÇÃÉVÉäÉAÉãÉ|Å[ÉgópÉN
    9:                          ;   ÉVÉäÉAÉãÉ|Å[ÉgÇÃé©ìÆë¨ìxîFéØã@î\Ç™ê≥
   10:                          ;   SPIÇÕ MSB first, Mode-3 Ç…ëŒâûÅB
   11:                          ;   CH559TÇÕUART0É|Å[ÉgÇégópÇ≈Ç´Ç»Ç¢ÇÃÇ
   12:                          ;   É\Å[ÉXÇÃÉIÉvÉVÉáÉìÇ≈CH559LÇ∆CH559TÇ
   13:                          ;
   14:                          ;   SFRóÃàÊÇÃÉAÉNÉZÉXã@î\Çí«â¡ÅiI2Cì¸èo
   15:                          ;   I2CSFR  (C) H.-J. Boehling & D. Wulf
   16:                          
   17:                          ;     WRSFR ([address]) [byte]      Writ
   18:                          ;     RDSFR ([address]) [variable]  Read
   19:                          ;
   20:                          ;   2023.05.13 CH552î≈ÇCH559ópÇ…èëÇ´ä∑Ç
   21:                          ;
   22:                          ;   2023.06.12 SPIì¸èoóÕã@î\Çí«â¡ÅB
   23:                          ;   2023.11.19 SPIÇÃìØéûì¸èoóÕ(rotate)ã@
   24:                          ;
   25:                          ;     SPISTART [speed]     setup SPI int
   26:                          ;     SPIPUT   [byte]      put "byte" to
   27:                          ;                          ** byte recei
   28:                          ;     SPIGET   [variable]  get "valiable
   29:                          ;     SPIROT   ([byte]) [variable]  data
   30:                          ;     SPICS    [0/1]       CS(SS) port L
   31:                          ;
   32:                          ;   2023.06.18 I2CSFR ÇÃI2Cì¸èoóÕã@î\Çë
   33:                          ;
   34:                          ;     I2CSTART             Sends a start
   35:                          ;     I2CSTOP              Sends a stop 
   36:                          ;     I2CPUT   [byte]      Sends a byte 
   37:                          ;                          After calling
   38:                          ;                          entered in st
   39:                          ;     I2CGET   ([acknowledge]) [variable
   40:                          ;                          Reads a byte 
   41:                          ;                          acknowledge (
   42:                          ;
   43:                          ;   2023.06.25 ADCì¸óÕã@î\Çí«â¡

C51ASM V1.2             Copyright (c) 2009 Atmel Corp.            PAGE 2



 Line    I  Addr Code           Source

   44:                          ;
   45:                          ;     ADCSTART [channel]   setup ADC fun
   46:                          ;     ADCGET   [variable]  get "valiable
   47:                          ;     ADCSTOP              close ADC fun
   48:                          ;
   49:                          ;   2023.07.01 CH559TÇ…ëŒâûÅAÉpÉãÉXê∂ê¨É
   50:                          ;
   51:                          ;     PULSE [loop-number]  generate puls
   52:                          ;                          pulse generat
   53:                          ;                          "loop-number"
   54:                          ;
   55:                          ;***************************************
   56:                          ;*                                      
   57:                          ;*                    MCS-BASIC-52 V1.31
   58:                          ;*                           12/1986 til
   59:                          ;*       The original source code of V1.
   60:                          ;*            Intel Corporation, Embedde
   61:                          ;*                             is public
   62:                          ;*                                      
   63:                          ;***************************************
   64:                          ;
   65:                          ;***************************************
   66:                          ;* General alterations made by D. Wulf, 
   67:                          ;* e-mail: Detlef.Wulf@onlinehome.de    
   68:                          ;***************************************
   69:                          ;
   70:                          ;  The following general alterations are
   71:                          ;
   72:                          ;  - The original source code had 2 file
   73:                          ;    been incorporated into this file fo
   74:                          ;
   75:                          ;  - All absolute and relativ jumps and 
   76:                          ;    with labels.
   77:                          ;
   78:                          ;  - All machine code in the original so
   79:                          ;    by the menomics.
   80:                          ;
   81:                          ;  - One routine in the source was diffe
   82:                          ;    by the ROM code.
   83:                          ;
   84:                          ;  - Some "ORG" statements between BASIC
   85:                          ;    out.
   86:                          ;
   87:                          ;  - To get room for new code the "ego m
   88:                          ;    (Remarked with "Sorry")
   89:                          ;
   90:                          ;  - To get more room for new code the "
   91:                          ;    (Remarked with "get room")
   92:                          ;
   93:                          ;***************************************
   94:                          ;* Bugfixes for MCS-52-BASIC from D. Kar
   95:                          ;* e-mail: dankarmann@lucent.com        
   96:                          ;***************************************
   97:                          ;
   98:                          ;  - Corrected Intel bug to allow BASIC 
   99:                          ;    command extensions to work.

C51ASM V1.2             Copyright (c) 2009 Atmel Corp.            PAGE 3



 Line    I  Addr Code           Source

  100:                          ;    (Remarked as Karmann 1)
  101:                          ;
  102:                          ;  - Corrected Intel bug to that discard
  103:                          ;    F, FP, FPR and FPRO and followed by
  104:                          ;    (Remarked as Karmann 2)
  105:                          ;
  106:                          ;***************************************
  107:                          ;* Bugfix and performance for MCS-52-BAS
  108:                          ;* D. Mudric and Z. Stojsavljevic descip
  109:                          ;* Elektor Electronics magazine german i
  110:                          ;***************************************
  111:                          ;
  112:                          ;  - Modifications to the unprocess a BA
  113:                          ;    (Remarked as Elektor 1)
  114:                          ;
  115:                          ;  - Modifications to the floating point
  116:                          ;    (Remarked as Elektor 2)
  117:                          ;
  118:                          ;  - HEX to BIN performance improvements
  119:                          ;    (Remarked as Elektor 3)
  120:                          ;
  121:                          ; The same article describes a fix for t
  122:                          ; the fixes did not work.
  123:                          ;
  124:                          ; The multiplicaton underflow bug is now
  125:                          ;    (Remarked as Wulf 1)
  126:                          ;
  127:                          ;***************************************
  128:                          ;* Change UV-EPROM to EEPROM programming
  129:                          ;* e-mail: r.skowronek@kfa-juelich.de   
  130:                          ;***************************************
  131:                          ;
  132:                          ; This altered section of code writes th
  133:                          ; EEPROM just like the ROM resident Basi
  134:                          ; The EEPROM is connected just like a RA
  135:                          ; and gets it's adresses from the real a
  136:                          ; difference from the normal setup is th
  137:                          ; P1.4, which supplies the program pulse
  138:                          ; can be located in externally ROM and i
  139:                          ; EEPROMs!
  140:                          ; (Remarked as Skowronek)
  141:                          ;
  142:                          ; The original code from R. Skowronek di
  143:                          ; this feature is added by D. Wulf.
  144:                          ; Memory is now limited to 32K bytes RAM
  145:                          ; would change the EEPROM.
  146:                          ;
  147:                          ;***************************************
  148:                          ;* Change timer 0 from 13 bit to 16 bit 
  149:                          ;* from D. Wulf 1/2000                  
  150:                          ;***************************************
  151:                          ;
  152:                          ; The max. value for XTAL is now 7862747
  153:                          ; Dallas 80C320 high speed / low power m
  154:                          ; The defaut crystal value is still 1105
  155:                          ; XTAL or patch the souce code at

C51ASM V1.2             Copyright (c) 2009 Atmel Corp.            PAGE 4



 Line    I  Addr Code           Source

  156:                          ;
  157:                          ;	17F1H = 11
  158:                          ;	17F0H = 05
  159:                          ;	17EFH = 92
  160:                          ;	17EEH = 00
  161:                          ;
  162:                          ; with a new crystal value.
  163:                          ; (Remarket as Wulf 2)
  164:                          ;
  165:                          ;***************************************
  166:                          ;* New baudrate detection from D. Wulf 1
  167:                          ;***************************************
  168:                          ;
  169:                          ; The new baudrate detection uses timer 
  170:                          ; the code loop timing. So the Dallas 80
  171:                          ; used. Also at higher clock speeds the 
  172:                          ; (Remarked as Wulf 3)
  173:                          ;
  174:                          ;***************************************
  175:                          ;* New processor type detection from D. 
  176:                          ;***************************************
  177:                          ;
  178:                          ; A new reset routine detects the proces
  179:                          ; used with the following controllers:
  180:                          ;
  181:                          ; 8032, 87C52#, Dallas 80C320, 80515*#, 
  182:                          ; 80537*, 80575 or similars.
  183:                          ;
  184:                          ; - On processor types marked with the "
  185:                          ;   baudrates, depending on the crystal 
  186:                          ; - The processor types marked with the 
  187:                          ;   V1.3 can be located there, because i
  188:                          ;
  189:                          ; (Remarked as Wulf 4)
  190:                          ;
  191:                          ;***************************************
  192:                          ;* OPBYTE 43H for POP from H.-J. Boehlin
  193:                          ;* e-mail: H-Boehling@gmx.de            
  194:                          ;***************************************
  195:                          ;
  196:                          ; A feature of BASIC-52 is the ability t
  197:                          ; representing commands or instructions 
  198:                          ; routines. For using system routines in
  199:                          ; operation bytes (for more information 
  200:                          ; In the original souce code is no OPCOD
  201:                          ; stack and store in a variable.
  202:                          ; With BASIC-52 V1.3 you can use OPBYTE 
  203:                          ; "POP" statement.
  204:                          ; (Remarked as Boehling 1)
  205:                          ;
  206:                          ;***************************************
  207:                          ;* Reset millisecond counter on "TIME=" 
  208:                          ;***************************************
  209:                          ;
  210:                          ; The command "TIME=0" now zeros the mil
  211:                          ; returns with zero.

C51ASM V1.2             Copyright (c) 2009 Atmel Corp.            PAGE 5



 Line    I  Addr Code           Source

  212:                          ; (Remarked as Boehling 2)
  213:                          ;
  214:                          ;***************************************
  215:                          ;* New command "ERASE" by H.-J. Boehling
  216:                          ;***************************************
  217:                          ;
  218:                          ; To erase an EEPROM (fill 16K byte up t
  219:                          ; "ERASE" is implemented. It takes 2 min
  220:                          ; (Remarked as Boehling 3)
  221:                          ;
  222:                          ;***************************************
  223:                          ;* Correct "ASC(x)" bug by D. Wulf 2/200
  224:                          ;***************************************
  225:                          ;
  226:                          ; BASIC-51 V1.1 gives erroneous results 
  227:                          ; one of the following signs : *, +, -, 
  228:                          ; BASIC-51 V1.3 returns the correct valu
  229:                          ; (Remarked as Wulf 5)
  230:                          ;
  231:                          ;***************************************
  232:                          ;***************************************
  233:                          ; To indicate the new version the start 
  234:                          ; *MCS-51(tm) BASIC V1.1* to
  235:                          ; *MCS-BASIC-52 V1.31*
  236:                          ;
  237:                          ; H.-J. Boehling, D. Wulf 11/26/2001
  238:                          ;***************************************
  239:                          ;
  240:           N      00C8    T2CON	EQU	0C8H ; This three lines are ne
  241:           N      00CC    TL2	EQU	0CCH ; MCS-51 Family Cross Assem
  242:           N      00CD    TH2	EQU	0CDH ; from W.W. Heinz (e-mail: 
  243:                          ;
  244:                          ;=== CH559 sfrs Added =====
  245:           N      00C9    T2MOD		EQU	0C9H	; T2MOD define
  246:           N      00B2    PLL_CFG		EQU	0B2H	; PLL clock configurat
  247:           N      00B3    CLOCK_CFG	EQU	0B3H	; System clock config
  248:           N      00A1    SAFE_MOD	EQU	0A1H	; Safe mode control re
  249:                          ;=== CH559T sfrs Added =====
  250:           N      00CE    PIN_FUNC	EQU	0CEH	; Pin function select 
  251:           N      00C4    P0_DIR		EQU	0C4H	; P0 direction control 
  252:           N      00C5    P0_PU		EQU	0C5H	; P0 pull-up enable regi
  253:                          ;=====================
  254:                          ;
  255:                          	;**************************************
  256:                          	;
  257:                          	; TRAP VECTORS TO MONITOR
  258:                          	;
  259:                          	; RESET TAG (0AAH) ---------2001H
  260:                          	;
  261:                          	; TAG LOCATION (5AH) ------ 2002H
  262:                          	;
  263:                          	; EXTERNAL INTERRUPT 0 ---- 2040H
  264:                          	;
  265:                          	; COMMAND MODE ENTRY ------ 2048H
  266:                          	;
  267:                          	; SERIAL PORT ------------- 2050H

C51ASM V1.2             Copyright (c) 2009 Atmel Corp.            PAGE 6



 Line    I  Addr Code           Source

  268:                          	;
  269:                          	; MONITOR (BUBBLE) OUTPUT - 2058H
  270:                          	;
  271:                          	; MONITOR (BUBBLE) INPUT -- 2060H
  272:                          	;
  273:                          	; MONITOR (BUBBLE) CSTS --- 2068H
  274:                          	;
  275:                          	; GET USER JUMP VECTOR ---- 2070H
  276:                          	;
  277:                          	; GET USER LOOKUP VECTOR -- 2078H
  278:                          	;
  279:                          	; PRINT AT VECTOR --------- 2080H
  280:                          	;
  281:                          	; INTERRUPT PWM ----------- 2088H
  282:                          	;
  283:                          	; EXTERNAL RESET ---------- 2090H
  284:                          	;
  285:                          	; USER OUTPUT-------------- 4030H
  286:                          	;
  287:                          	; USER INPUT -------------- 4033H
  288:                          	;
  289:                          	; USER CSTS --------------- 4036H
  290:                          	;
  291:                          	; USER RESET -------------- 4039H
  292:                          	;
  293:                          	; USER DEFINED PRINT @ ---  403CH
  294:                          	;
  295:                          	;**************************************
  296:                          	;
  297:                          	;**************************************
  298:                          	;
  299:                          	; MCS - 52  -  8K BASIC VERSION 1.3
  300:                          	;
  301:                          	;**************************************
  302:                          	;
  303:      0000 61 8B          	AJMP	CRST		;START THE PROGRAM
  304:      0002 37             	ADDC	A,@R1
  305:                          	;
  306:           N      0003    	ORG	3H
  307:                          	;
  308:                          	;**************************************
  309:                          	;
  310:                          	;EXTERNAL INTERRUPT 0
  311:                          	;
  312:                          	;**************************************
  313:                          	;
  314:      0003 20 31 2D       	JB	DRQ,STQ 	;SEE IF DMA IS SET
  315:      0006 C0 D0          	PUSH	PSW		;SAVE THE STATUS
  316:      0008 02 40 03       	LJMP	4003H		;JUMP TO USER IF NOT SET
  317:                          	;
  318:           N      000B    	ORG	0BH
  319:                          	;
  320:                          	;**************************************
  321:                          	;
  322:                          	;TIMER 0 OVERFLOW INTERRUPT
  323:                          	;

C51ASM V1.2             Copyright (c) 2009 Atmel Corp.            PAGE 7



 Line    I  Addr Code           Source

  324:                          	;**************************************
  325:                          	;
  326:      000B C0 D0          	PUSH	PSW		;SAVE THE STATUS
  327:      000D 20 2E 10       	JB	C_BIT,STJ	;SEE IF USER WANTS INTERRU
  328:      0010 02 40 0B       	LJMP	400BH		;EXIT IF USER WANTS INTERRU
  329:                          	;
  330:           N      0013    	ORG	13H
  331:                          	;
  332:                          	;**************************************
  333:                          	;
  334:                          	;EXTERNAL INTERRUPT 1
  335:                          	;
  336:                          	;**************************************
  337:                          	;
  338:      0013 20 12 2B       	JB	INTBIT,STK
  339:      0016 C0 D0          	PUSH	PSW
  340:      0018 02 40 13       	LJMP	4013H
  341:                          	;
  342:                          	;
  343:           N      001B    	ORG	1BH
  344:                          	;
  345:                          	;**************************************
  346:                          	;
  347:                          	;TIMER 1 OVERFLOW INTERRUPT
  348:                          	;
  349:                          	;**************************************
  350:                          	;
  351:      001B C0 D0          	PUSH	PSW
  352:      001D 02 1F 78       	LJMP	CKS_I
  353:                          	;
  354:      0020 02 19 02       STJ:	LJMP	I_DR		;DO THE INTERRUPT
  355:                          	;
  356:                          	;**************************************
  357:                          	;
  358:                          	;SERIAL PORT INTERRUPT
  359:                          	;
  360:                          	;**************************************
  361:                          	;
  362:           N      0023    	ORG	23H
  363:                          	;
  364:      0023 C0 D0          	PUSH	PSW
  365:      0025 20 1F 1C       	JB	SPINT,STU	;SEE IF MONITOR EANTS INTE
  366:      0028 02 40 23       	LJMP	4023H
  367:                          	;
  368:           N      002B    	ORG	2BH
  369:                          	;
  370:                          	;**************************************
  371:                          	;
  372:                          	;TIMER 2 OVERFLOW INTERRUPT
  373:                          	;
  374:                          	;**************************************
  375:                          	;
  376:      002B C0 D0          	PUSH	PSW
  377:      002D 02 40 2B       	LJMP	402BH
  378:                          	;
  379:                          	;**************************************

C51ASM V1.2             Copyright (c) 2009 Atmel Corp.            PAGE 8



 Line    I  Addr Code           Source

  380:                          	;
  381:                          	;USER ENTRY
  382:                          	;
  383:                          	;**************************************
  384:                          	;
  385:           N      0030    	ORG	30H
  386:                          	;
  387:      0030 02 19 3F       	LJMP	IBLK		;LINK TO USER BLOCK
  388:                          	;
  389:      0033 20 26 08       STQ:	JB	I_T0,STS	;SEE IF MONITOR WANTS I
  390:      0036 C2 96          	CLR	DACK
  391:      0038 30 B2 FD       	JNB	P3.2,$		;WAIT FOR DMA TO END
  392:      003B D2 96          	SETB	DACK
  393:      003D 32             	RETI
  394:                          	;
  395:      003E 02 20 40       STS:	LJMP	2040H		;GO TO THE MONITOR
  396:                          	;
  397:      0041 D2 16          STK:	SETB	INTPEN		;TELL BASIC AN INTERRU
  398:      0043 32             	RETI
  399:                          	;
  400:      0044 02 20 50       STU:	LJMP	2050H		;SERIAL PORT INTERRUPT
  401:                          	;
  402:                          	;
  403:                          	;**************************************
  404:                          	;
  405:                          	; This is the equate table for 8052 bas
  406:                          	;
  407:                          	;**************************************
  408:                          	;
  409:                          	; The register to direct equates for CJ
  410:                          	;
  411:           N      0000    R0B0	EQU	0
  412:           N      0001    R1B0	EQU	1
  413:           N      0002    R2B0	EQU	2
  414:           N      0003    R3B0	EQU	3
  415:           N      0004    R4B0	EQU	4
  416:           N      0005    R5B0	EQU	5
  417:           N      0006    R6B0	EQU	6
  418:           N      0007    R7B0	EQU	7
  419:                          	;
  420:                          	; Register bank 1 contains the text poi
  421:                          	; and the arg stack pointer.
  422:                          	;
  423:           N      0008    TXAL	EQU	8		;R0 BANK 1 = TEXT POINTER LO
  424:           N      0009    ASTKA	EQU	9		;R1 BANK 1 = ARG STACK
  425:           N      000A    TXAH	EQU	10		;R2 BANK 1 = TEXT POINTER H
  426:                          	;
  427:                          	; Now five temporary locations that are
  428:                          	;
  429:           N      000B    TEMP1	EQU	11
  430:           N      000C    TEMP2	EQU	12
  431:           N      000D    TEMP3	EQU	13
  432:           N      000E    TEMP4	EQU	14
  433:           N      000F    TEMP5	EQU	15
  434:                          	;
  435:                          	; Register bank 2 contains the read tex

C51ASM V1.2             Copyright (c) 2009 Atmel Corp.            PAGE 9



 Line    I  Addr Code           Source

  436:                          	; and the control stack pointer.
  437:                          	;
  438:           N      0010    RTXAL	EQU	16		;R0 BANK 2 = READ TEXT POI
  439:           N      0011    CSTKA	EQU	17		;R1 BANK 2 = CONTROL STACK
  440:           N      0012    RTXAH	EQU	18		;R2 BANK 2 = READ TEXT POI
  441:                          	;
  442:                          	; Now some internal system equates.
  443:                          	;
  444:           N      0013    BOFAH	EQU	19		;START OF THE BASIC PROGRA
  445:           N      0014    BOFAL	EQU	20		;START OF THE BASIC PROGRA
  446:           N      0015    NULLCT	EQU	21		;NULL COUNT
  447:           N      0016    PHEAD	EQU	22		;PRINT HEAD POSITION
  448:           N      0017    FORMAT	EQU	23
  449:                          	;
  450:                          	; Register bank 3 is for the user and c
  451:                          	; by basic
  452:                          	;
  453:                          	;
  454:                          	;
  455:                          	; Now everything else is used by basic.
  456:                          	; First the bit locations, these use by
  457:                          	;
  458:           B        10    OTS		BIT	16	;34.0-ON TIME INSTRUCTION EX
  459:           B        11    INPROG		BIT	17	;34.1-INTERRUPT IN PROCES
  460:           B        12    INTBIT		BIT	18	;34.2-INTERRUPT SET BIT
  461:           B        13    ON_ERR		BIT	19	;34.3-ON ERROR EXECUTED
  462:           B        14    OTI		BIT	20	;34.4-ON TIME INTERRUPT IN P
  463:           B        15    LINEB		BIT	21	;34.5-LINE CHANGE OCCURED
  464:           B        16    INTPEN		BIT	22	;34.6-INTERRUPT PENDING B
  465:           B        17    CONB		BIT	23	;34.7-CAN CONTINUE IF SET
  466:           B        18    GTRD		BIT	24	;35.0-READ GET LOCATION
  467:           B        19    LPB		BIT	25	;35.1-PRINT TO LINE PRINTER 
  468:           B        1A    CKS_B		BIT	26	;35.2-FOR PWM INTERRUPT
  469:           B        1B    COB		BIT	27	;35.3-CONSOLE OUT BIT
  470:                          				;     0 = SERIAL PORT
  471:                          				;     1 = LINE PRINTER
  472:           B        1C    COUB		BIT	28	;35.4-USER CONSOLE OUT BIT
  473:                          				;     0 = SERIAL PORT
  474:                          				;     1 = USER DRIVER
  475:           B        1D    INBIT		BIT	29	;35.5-INITIALIZATION BIT
  476:           B        1E    CIUB		BIT	30	;35.6-USER CONSOLE IN BIT
  477:                          				;     0 = SERIAL PORT
  478:                          				;     1 = USER ROUTINE
  479:           B        1F    SPINT		BIT	31	;35.7-SERIAL PORT INTERRUP
  480:           B        20    STOPBIT 	BIT	32	;36.0-PROGRAM STOP ENCOU
  481:           B        21    U_IDL		BIT	33	;36.1-USER IDLE BREAK
  482:           B        22    INP_B		BIT	34	;36.2-SET DURING INPUT INS
  483:                          ;DCMPXZ 	BIT	35	;36.3-DCMPX ZERO FLAG
  484:           B        24    ARGF		BIT	36	;36.4-ARG STACK HAS A VALUE
  485:           B        25    RETBIT		BIT	37	;36.5-RET FROM INTERRUPT 
  486:           B        26    I_T0		BIT	38	;36.6-TRAP INTERRUPT ZERO T
  487:           B        27    UPB		BIT	39	;36.7-SET WHEN @ IS VALID
  488:                          
  489:                          ;
  490:                          ;***************************************
  491:                          ;****** Sorry - but the ego message had 

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 10



 Line    I  Addr Code           Source

  492:                          ;
  493:                          ;JKBIT		BIT	40	;37.0-WB TRIGGER We use t
  494:                          ;
  495:           B        28    mul_underflow	BIT	40	;37.0-mul_limit_cas
  496:                          ;
  497:                          ;***************************************
  498:                          ;
  499:           B        29    ENDBIT		BIT	41	;37.1-GET END OF PROGRAM
  500:           B        2A    UBIT		BIT	42	;37.2-FOR DIM STATEMENT
  501:           B        2B    ISAV		BIT	43	;37.3-SAVE INTERRUPT STATUS
  502:           B        2C    BO		BIT	44	;37.4-BUBBLE OUTPUT
  503:           B        2D    XBIT		BIT	45	;37.5-EXTERNAL PROGRAM PRES
  504:           B        2E    C_BIT		BIT	46	;37.6-SET WHEN CLOCK RUNNI
  505:           B        2F    DIRF		BIT	47	;37.7-DIRECT INPUT MODE
  506:           B        30    NO_C		BIT	48	;38.0-NO CONTROL C
  507:           B        31    DRQ		BIT	49	;38.1-DMA ENABLED
  508:           B        32    BI		BIT	50	;38.2-BUBBLE INPUT
  509:                          ;
  510:                          ;***************************************
  511:                          ;****** Disable Intel programming for to
  512:                          ;
  513:                          ;INTELB 	BIT	51	;38.3-INTELLIGENT PROM P
  514:                          ;
  515:                          ;***************************************
  516:                          ;
  517:           B        34    C0ORX1		BIT	52	;38.4-PRINT FROM ROM OR R
  518:           B        35    CNT_S		BIT	53	;38.5-CONTROL S ENCOUNTERE
  519:           B        36    ZSURP		BIT	54	;38.6-ZERO SUPRESS
  520:           B        37    HMODE		BIT	55	;38.7-HEX MODE PRINT
  521:           B        97    LP		BIT	P1.7	;SOFTWARE LINE PRINTER
  522:           B        96    DACK		BIT	P1.6	;DMA ACK
  523:                          ;***************************************
  524:                          ;
  525:                          ;PROMV		BIT	P1.5	;TURN ON PROM VOLTAGE
  526:                          ;PROMP		BIT	P1.4	;PROM PULSE
  527:                          ;ALED		BIT	P1.3	;ALE DISABLE
  528:                          ;
  529:                          ;***************************************
  530:           B        92    T_BIT		BIT	P1.2	;I/O TOGGLE BIT
  531:           B        DF    BD		BIT	0DFH	;Baudrategenerator 805x7,x5
  532:                          	;
  533:                          	;
  534:                          	; The next location is a bit addressabl
  535:                          	;
  536:           N      0027    BABC	EQU	39
  537:                          	;
  538:                          	; Now floating point and the other temp
  539:                          	;
  540:                          	; FP Uses to locations 03CH
  541:                          	;
  542:                          	; Now the stack designators.
  543:                          	;
  544:           N      003E    SPSAV	EQU	3EH
  545:           N      003F    S_LEN	EQU	3FH
  546:           N      0040    T_HH	EQU	40H
  547:           N      0041    T_LL	EQU	41H

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 11



 Line    I  Addr Code           Source

  548:           N      0042    INTXAH	EQU	42H
  549:           N      0043    INTXAL	EQU	43H
  550:           N      0045    MT1	EQU	45H
  551:           N      0046    MT2	EQU	46H
  552:           N      0047    MILLIV	EQU	47H		;Real Time Clock 5 milli
  553:           N      0048    TVH	EQU	48H		;Real Time Clock high byte
  554:           N      0049    TVL	EQU	49H		;Real Time Clock low byte
  555:           N      004A    SAVE_T	EQU	4AH
  556:           N      004B    SP_H	EQU	4BH		;SERIAL PORT TIME OUT
  557:           N      004C    SP_L	EQU	4CH
  558:           N      004D    CMNDSP	EQU	4DH		;SYSTEM STACK POINTER
  559:           N      0087    PCON0	EQU	87H		;PCON SFR
  560:           N      00AA    S0RELL	EQU	0AAH		;S0RELL 805x7A SFR
  561:           N      00BA    S0RELH	EQU	0BAH		;S0RELH 805x7A SFR
  562:           N      00CB    RCAPH2	EQU	0CBH		;RCAPH2 8052 SFR
  563:           N      00CA    RCAPL2	EQU	0CAH		;RCAPL2 8052 SFR
  564:           N      00D8    ADCON	EQU	0D8H		;ADCON 805xx SFR
  565:           N      00DA    DAPR	EQU	0DAH		;DAPR 805xx SFR
  566:           N      00FF    IRAMTOP EQU	0FFH		;TOP OF RAM
  567:           N      00FE    STACKTP EQU	0FEH		;ARG AND CONTROL STACK
  568:                          	;
  569:                          	; The character equates
  570:                          	;
  571:           N      000D    CR	EQU	0DH		;CARRIAGE RETURN
  572:           N      000A    LF	EQU	0AH		;LINE FEED
  573:           N      0007    BELL	EQU	07H		;BELL CHARACTER
  574:           N      0008    BS	EQU	08H		;BACK SPACE
  575:           N      0003    CNTRLC	EQU	03H		;CONTROL C
  576:           N      0004    CNTRLD	EQU	04H		;CONTROL D
  577:           N      0000    NULL	EQU	00H		;NULL
  578:                          	;
  579:                          	; The new baud rate constants
  580:                          	;
  581:           N      00B2    B4800	EQU	0B2H		;Timervalue for 4800 bau
  582:           N      00D9    B9600	EQU	0D9H		;Timervalue for 9600 bau
  583:                          	;
  584:                          	;
  585:                          	; The internal system equates
  586:                          	;
  587:           N      0049    LINLEN	EQU	73		;THE LENGTH OF AN INPUT L
  588:           N      0001    EOF	EQU	01		;END OF FILE CHARACTER
  589:           N      0001    ASTKAH	EQU	01		;ASTKA IS IN PAGE 1 OF RA
  590:           N      0000    CSTKAH	EQU	00		;CSTKA IS IN PAGE 0 OF RA
  591:           N      0001    FTYPE	EQU	01		;CONTROL STACK "FOR"
  592:           N      0002    GTYPE	EQU	02		;CONTROL STACK "GOSUB"
  593:           N      0003    DTYPE	EQU	03		;DO-WHILE/UNTIL TYPE
  594:           N      8000    ROMADR	EQU	8000H	;LOCATION OF ROM
  595:                          ;
  596:                          	; The floating point equates
  597:                          	;
  598:           N      0006    FPSIZ	EQU	6		;NO. OF BYTES IN A FLOATING
  599:           N      0004    DIGIT	EQU	FPSIZ-2 	;THE MANTISSA OF A FL
  600:           N      0009    STESIZ	EQU	FPSIZ+3 	;SIZE OF SYMBOL ADJU
  601:                          ;FP_BASE EQU	 1993H		 ;BASE OF FLOATING 
  602:           N      0200    PSTART	EQU	512		;START OF A PROGRAM IN R
  603:           N      0011    FSIZE	EQU	FPSIZ+FPSIZ+2+2+1

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 12



 Line    I  Addr Code           Source

  604:                          ;
  605:                          ;=== CH559 Added =====
  606:           N      0FFF    ERAMEND	EQU	0FFFH ; EX-RAM last addr (6K
  607:                          ;=====================
  608:                          ;
  609:                          	;**************************************
  610:                          	;
  611:                          USENT:	; User entry jump table
  612:                          	;
  613:                          	;**************************************
  614:                          	;
  615:      0047 17 87          	DW	CMND1		;(00, 00H)COMMAND MODE JUMP
  616:      0049 12 23          	DW	IFIX		;(01, 01H)CONVERT FP TO INT
  617:      004B 0F DD          	DW	PUSHAS		;(02, 02H)PUSH VALUE ONTO AR
  618:      004D 0F D3          	DW	POPAS		;(03, 03H)POP VALUE OFF ARG S
  619:      004F 04 BD          	DW	PG1		;(04, 04H)PROGRAM A PROM
  620:      0051 06 D8          	DW	INLINE		;(05, 05H)INPUT A LINE
  621:      0053 06 BF          	DW	UPRNT		;(06, 06H)PRINT A LINR
  622:      0055 06 A5          	DW	CRLF		;(07, 07H)OUTPUT A CRLF
  623:                          	;
  624:                          	;**************************************
  625:                          	;
  626:                          	; This is the operation jump table for 
  627:                          	;
  628:                          	;**************************************
  629:                          	;
  630:      0057 13 AC          OPTAB:	DW	ALPAR		;(08, 08H)LEFT PAREN
  631:      0059 13 2B          	DW	AEXP		;(09, 09H)EXPONENTAION
  632:      005B 11 B0          	DW	AMUL		;(10, 0AH)FP MUL
  633:      005D 17 41          	DW	AADD		;(11, 0BH)FLOATING POINT ADD
  634:      005F 14 0A          	DW	ADIV		;(12, 0CH)FLOATING POINT DIVID
  635:      0061 17 1C          	DW	ASUB		;(13, 0DH)FLOATING POINT SUBTR
  636:      0063 14 98          	DW	AXRL		;(14, 0EH)XOR
  637:      0065 14 84          	DW	AANL		;(15, 0FH)AND
  638:      0067 14 8D          	DW	AORL		;(16, 10H)OR
  639:      0069 13 A1          	DW	ANEG		;(17, 11H)NEGATE
  640:      006B 13 DB          	DW	AEQ		;(18, 12H)EQUAL
  641:      006D 13 E7          	DW	AGE		;(19, 13H)GREATER THAN OR EQUAL
  642:      006F 13 EB          	DW	ALE		;(20, 14H)LESS THAN OR EQUAL
  643:      0071 13 E1          	DW	ANE		;(21, 15H)NOT EQUAL
  644:      0073 13 D6          	DW	ALT		;(22, 16H)LESS THAN
  645:      0075 13 C5          	DW	AGT		;(23, 17H)GREATER THAN
  646:                          	;
  647:                          	;**************************************
  648:                          	;
  649:                          	; This is the jump table for unary oper
  650:                          	;
  651:                          	;**************************************
  652:                          	;
  653:      0077 13 8F          	DW	AABS		;(24, 18H)ABSOLUTE VALUE
  654:      0079 13 6D          	DW	AINT		;(25, 19H)INTEGER OPERATOR
  655:      007B 13 95          	DW	ASGN		;(26, 1AH)SIGN OPERATOR
  656:      007D 14 96          	DW	ANOT		;(27, 1BH)ONE'S COMPLEMENT
  657:      007F 11 6D          	DW	ACOS		;(28, 1CH)COSINE
  658:      0081 11 D0          	DW	ATAN		;(29, 1DH)TANGENT
  659:      0083 11 71          	DW	ASIN		;(30, 1EH)SINE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 13



 Line    I  Addr Code           Source

  660:      0085 12 8D          	DW	ASQR		;(31, 1FH)SQUARE ROOT
  661:      0087 13 AD          	DW	ACBYTE		;(32, 20H)READ CODE
  662:      0089 13 27          	DW	AETOX		;(33, 21H)E TO THE X
  663:      008B 11 E0          	DW	AATAN		;(34, 22H)ARC TANGENT
  664:      008D 12 C0          	DW	ALN		;(35, 23H)NATURAL LOG
  665:      008F 13 B6          	DW	ADBYTE		;(36, 24H)READ DATA MEMORY
  666:      0091 13 BE          	DW	AXBYTE		;(37, 25H)READ EXTERNAL MEMO
  667:      0093 14 7F          	DW	PIPI		;(38, 26H)PI
  668:      0095 13 F1          	DW	ARND		;(39, 27H)RANDOM NUMBER
  669:      0097 14 A9          	DW	AGET		;(40, 28H)GET INPUT CHARACTER
  670:      0099 17 11          	DW	AFREE		;(41, 29H)COMPUTE #BYTES FREE
  671:      009B 17 21          	DW	ALEN		;(42, 2AH) COMPUTE LEN OF PORG
  672:      009D 0F D9          	DW	AXTAL		;(43, 2BH) CRYSTAL
  673:      009F 16 4F          	DW	PMTOP		;(44, 2CH)TOP OF MEMORY
  674:      00A1 17 29          	DW	ATIME		;(45, 2DH) TIME
  675:      00A3 14 B9          	DW	A_IE		;(46, 2EH) IE
  676:      00A5 14 BD          	DW	A_IP		;(47, 2FH) IP
  677:      00A7 14 C1          	DW	ATIM0		;(48, 30H) TIMER 0
  678:      00A9 14 C7          	DW	ATIM1		;(49, 31H) TIMER 1
  679:      00AB 14 CD          	DW	ATIM2		;(50, 32H) TIMER 2
  680:      00AD 14 D3          	DW	AT2CON		;(51, 33H) T2CON
  681:      00AF 14 D7          	DW	ATCON		;(52, 34H) TCON
  682:      00B1 14 DB          	DW	ATMOD		;(53, 35H) ATMOD
  683:      00B3 14 DF          	DW	ARCAP2		;(54, 36H) RCAP2
  684:      00B5 14 E5          	DW	AP1		;(55, 37H) P1
  685:      00B7 14 E9          	DW	APCON		;(56, 38H) PCON
  686:      00B9 0F 43          	DW	EXPRB		;(57, 39H) EVALUATE AN EXPRES
  687:      00BB 16 5C          	DW	AXTAL1		;(58, 3AH) CALCULATE CRYSTAL
  688:      00BD 14 F0          	DW	LINE		;(59, 3BH) EDIT A LINE
  689:      00BF 15 BA          	DW	PP		;(60, 3CH) PROCESS A LINE
  690:      00C1 10 A0          	DW	UPPL0		;(61, 3DH) UNPROCESS A LINE
  691:      00C3 0D 65          	DW	VAR		;(62, 3EH) FIND A VARIABLE
  692:      00C5 0E CD          	DW	GC		;(63, 3FH) GET A CHARACTER
  693:      00C7 0E D5          	DW	GCI		;(64, 40H) GET CHARACTER AND IN
  694:      00C9 07 91          	DW	INCHAR		;(65, 41H) INPUT A CHARACTER
  695:      00CB 08 02          	DW	CRUN		;(66, 42H) RUN A PROGRAM
  696:                          ;
  697:                          ;***************************************
  698:                          ;****** OPBYTE 43H for POP *************
  699:                          ;****** Boehling 1 *********************
  700:                          ;
  701:      00CD 0A 7D          	dw	SPOP		;(67, 43H) POP a value to a va
  702:                          ;
  703:                          ;***************************************
  704:                          ;
  705:                          
  706:      00CF 01             OPBOL:	DB	1		;
  707:                          	;
  708:      00D0 0F             	DB	15		;LEFT PAREN
  709:      00D1 0E             	DB	14		;EXPONENTIAN **
  710:      00D2 0A             	DB	10		;MUL
  711:      00D3 08             	DB	8		;ADD
  712:      00D4 0A             	DB	10		;DIVIDE
  713:      00D5 08             	DB	8		;SUB
  714:      00D6 03             	DB	3		;XOR
  715:      00D7 05             	DB	5		;AND

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 14



 Line    I  Addr Code           Source

  716:      00D8 04             	DB	4		;OR
  717:      00D9 0C             	DB	12		;NEGATE
  718:      00DA 06             	DB	6		;EQ
  719:      00DB 06             	DB	6		;GT
  720:      00DC 06             	DB	6		;LT
  721:      00DD 06             	DB	6		;NE
  722:      00DE 06             	DB	6		;LE
  723:      00DF 06             	DB	6		;GE
  724:                          	;
  725:      00E0 0F             UOPBOL: DB	15		;AABS
  726:      00E1 0F             	DB	15		;AAINT
  727:      00E2 0F             	DB	15		;ASGN
  728:      00E3 0F             	DB	15		;ANOT
  729:      00E4 0F             	DB	15		;ACOS
  730:      00E5 0F             	DB	15		;ATAN
  731:      00E6 0F             	DB	15		;ASIN
  732:      00E7 0F             	DB	15		;ASQR
  733:      00E8 0F             	DB	15		;ACBYTE
  734:      00E9 0F             	DB	15		;E TO THE X
  735:      00EA 0F             	DB	15		;AATAN
  736:      00EB 0F             	DB	15		;NATURAL LOG
  737:      00EC 0F             	DB	15		;DBYTE
  738:      00ED 0F             	DB	15		;XBYTE
  739:                          	;
  740:                          	;**************************************
  741:                          	;
  742:                          	; The ASCII printed messages.
  743:                          	;
  744:                          	;**************************************
  745:                          	;
  746:      00EE 53 54 4F 50    STP:	DB	'STOP"'
            00F2 22
  747:                          	;
  748:      00F3 54 52 59 20    IAN:	DB	'TRY AGAIN"'
            00F7 41 47 41 49
            00FB 4E 22
  749:                          	;
  750:      00FD 52 45 41 44    RDYS:	DB	'READY"'
            0101 59 22
  751:                          	;
  752:      0103 20 2D 20 49    INS:	DB	' - IN LINE "'
            0107 4E 20 4C 49
            010B 4E 45 20 22
  753:                          	;
  754:                          	;**************************************
  755:                          	;
  756:                          	; This is the command jump table
  757:                          	;
  758:                          	;**************************************
  759:                          	;
  760:      010F 08 02          CMNDD:	DW	CRUN		;RUN
  761:      0111 10 4E          	DW	CLIST		;LIST
  762:      0113 0B 08          	DW	CNULL		;NULL
  763:      0115 06 5C          	DW	CNEW		;NEW
  764:      0117 18 3E          	DW	CCONT		;CONTINUE
  765:      0119 04 8A          	DW	CPROG		;PROGRAM A PROM

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 15



 Line    I  Addr Code           Source

  766:      011B 17 73          	DW	CXFER		;TRANSFER FROM ROM TO RAM
  767:      011D 17 7F          	DW	CRAM		;RAM MODE
  768:      011F 05 3C          	DW	CROM		;ROM MODE
  769:                          ;
  770:                          ;***************************************
  771:                          ;****** Disable Intel programming for to
  772:                          ;
  773:                          ;	DW	CIPROG		;INTELLIGENT PROM PROGRAMMI
  774:                          ;
  775:                          ;***************************************
  776:                          ;
  777:      0121 05 00          	dw	CERASE		;Erase an EEPROM
  778:                          ;
  779:                          	;**************************************
  780:                          	;
  781:                          	; This is the statement jump table.
  782:                          	;
  783:                          	;**************************************
  784:                          	;
  785:                          STATD:	;
  786:      0123 09 6E          	DW	SLET		;LET		80H
  787:      0125 06 8F          	DW	SCLR		;CLEAR		81H
  788:      0127 0A 76          	DW	SPUSH		;PUSH VAR	82H
  789:      0129 0A AA          	DW	SGOTO		;GO TO		83H
  790:      012B 16 86          	DW	STONE		;TONE		84H
  791:      012D 0C 29          	DW	SPH0		;PRINT MODE 0	85H
  792:      012F 19 2E          	DW	SUI		;USER INPUT	86H
  793:      0131 19 33          	DW	SUO		;USER OUTPUT	87H
  794:      0133 0A 7D          	DW	SPOP		;POP VAR	88H
  795:      0135 0C 2D          	DW	SPRINT		;PRINT		89H
  796:      0137 0E 63          	DW	SCALL		;CALL		8AH
  797:      0139 0D 61          	DW	SDIMX		;DIMENSION	8BH
  798:      013B 06 0C          	DW	STRING		;STRING ALLO	8CH
  799:      013D 16 F9          	DW	SBAUD		;SET BAUD	8DH
  800:      013F 19 18          	DW	SCLOCK		;CLOCK		8EH
  801:      0141 0C 2B          	DW	SPH1		;PRINT MODE 1	8FH
  802:                          	;
  803:                          	; No direct mode from here on
  804:                          	;
  805:      0143 08 58          	DW	SSTOP		;STOP		90H
  806:      0145 0E 56          	DW	SOT		;ON TIME	91H
  807:      0147 14 19          	DW	SONEXT		;ON EXT INT	92H
  808:      0149 0B 0E          	DW	SRETI		;RET FROM INT	93H
  809:      014B 0F 05          	DW	S_DO		;DO		94H
  810:      014D 0B CE          	DW	SRESTR		;RESTOR 	95H
  811:      014F 0E FC          	DW	WCR		;REM		96H
  812:      0151 0B 5F          	DW	SNEXT		;NEXT		97H
  813:      0153 14 0F          	DW	SONERR		;ON ERROR	98H
  814:      0155 0C EB          	DW	S_ON		;ON		99H
  815:      0157 0D F5          	DW	SINPUT		;INPUT		9AH
  816:      0159 0B E3          	DW	SREAD		;READ		9BH
  817:      015B 0E EC          	DW	FINDCR		;DATA		9CH
  818:      015D 0B 10          	DW	SRETRN		;RETURN 	9DH
  819:      015F 0A 86          	DW	SIF		;IF		9EH
  820:      0161 0B 2D          	DW	SGOSUB		;GOSUB		9FH
  821:      0163 0A 3C          	DW	SFOR		;FOR		A0H

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 16



 Line    I  Addr Code           Source

  822:      0165 0A FC          	DW	SWHILE		;WHILE		A1H
  823:      0167 0B 01          	DW	SUNTIL		;UNTIL		A2H
  824:      0169 17 87          	DW	CMND1		;END		A3H
  825:      016B 18 5B          	DW	I_DL		;IDLE		A4H
  826:      016D 0F E5          	DW	ST_A		;STORE AT	A5H
  827:      016F 0F E9          	DW	LD_A		;LOAD AT	A6H
  828:      0171 04 F8          	DW	PGU		;PGM		A7H
  829:      0173 07 C0          	DW	RROM		;RUN A ROM	A9H
  830:                          	;
  831:                          	;**************************************
  832:                          	;
  833:                          TOKTAB: ; This is the basic token table
  834:                          	;
  835:                          	;**************************************
  836:                          	;
  837:                          	; First the tokens for statements
  838:                          	;
  839:      0175 80             	DB	80H		;LET TOKEN
  840:      0176 4C 45 54       	DB	'LET'
  841:                          	;
  842:      0179 81             	DB	81H		;CLEAR TOKEN
  843:      017A 43 4C 45 41    	DB	'CLEAR'
            017E 52
  844:                          	;
  845:      017F 82             	DB	82H		;PUSH TOKEN
  846:      0180 50 55 53 48    	DB	'PUSH'
  847:                          	;
  848:           N      0083    T_GOTO	EQU	83H
  849:                          	;
  850:      0184 83             	DB	83H		;GO TO TOKEN
  851:      0185 47 4F 54 4F    	DB	'GOTO'
  852:                          	;
  853:      0189 84             	DB	84H		;TOGGLE TOKEN
  854:      018A 50 57 4D       	DB	'PWM'
  855:                          	;
  856:      018D 85             	DB	85H		;PRINT HEX MODE 0
  857:      018E 50 48 30 2E    	DB	'PH0.'
  858:                          	;
  859:      0192 86             	DB	86H		;USER IN TOKEN
  860:      0193 55 49          	DB	'UI'
  861:                          	;
  862:      0195 87             	DB	87H		;USER OUT TOKEN
  863:      0196 55 4F          	DB	'UO'
  864:                          	;
  865:      0198 88             	DB	88H		;POP TOKEN
  866:      0199 50 4F 50       	DB	'POP'
  867:                          	;
  868:      019C 89             	DB	89H		;PRINT TOKEN
  869:      019D 50 52 49 4E    	DB	'PRINT'
            01A1 54
  870:      01A2 89             	DB	89H
  871:      01A3 50 2E          	DB	'P.'            ;P. ALSO MEANS PRINT
  872:      01A5 89             	DB	89H		;? ALSO
  873:      01A6 3F             	DB	'?'
  874:                          	;
  875:      01A7 8A             	DB	8AH		;CALL TOKEN

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 17



 Line    I  Addr Code           Source

  876:      01A8 43 41 4C 4C    	DB	'CALL'
  877:                          	;
  878:      01AC 8B             	DB	8BH		;DIMENSION TOKEN
  879:      01AD 44 49 4D       	DB	'DIM'
  880:                          	;
  881:      01B0 8C             	DB	8CH		;STRING TOKEN
  882:      01B1 53 54 52 49    	DB	'STRING'
            01B5 4E 47
  883:                          	;
  884:      01B7 8D             	DB	8DH		;SET BAUD RATE
  885:      01B8 42 41 55 44    	DB	'BAUD'
  886:                          	;
  887:      01BC 8E             	DB	8EH		;CLOCK
  888:      01BD 43 4C 4F 43    	DB	'CLOCK'
            01C1 4B
  889:                          	;
  890:      01C2 8F             	DB	8FH		;PRINT HEX MODE 1
  891:      01C3 50 48 31 2E    	DB	'PH1.'
  892:                          	;
  893:           N      0090    T_STOP	EQU	90H		;STOP TOKEN
  894:      01C7 90             	DB	T_STOP
  895:      01C8 53 54 4F 50    	DB	'STOP'
  896:                          	;
  897:           N      0090    T_DIR	EQU	T_STOP		;NO DIRECT FROM HERE O
  898:                          	;
  899:      01CC 91             	DB	T_STOP+1	;ON TIMER INTERRUPT
  900:      01CD 4F 4E 54 49    	DB	'ONTIME'
            01D1 4D 45
  901:                          	;
  902:      01D3 92             	DB	T_STOP+2	;ON EXTERNAL INTERRUPT
  903:      01D4 4F 4E 45 58    	DB	'ONEX1'
            01D8 31
  904:                          	;
  905:      01D9 93             	DB	T_STOP+3	;RETURN FROM INTERRUPT
  906:      01DA 52 45 54 49    	DB	'RETI'
  907:                          	;
  908:      01DE 94             	DB	T_STOP+4	;DO TOKEN
  909:      01DF 44 4F          	DB	'DO'
  910:                          	;
  911:      01E1 95             	DB	T_STOP+5	;RESTORE TOKEN
  912:      01E2 52 45 53 54    	DB	'RESTORE'
            01E6 4F 52 45
  913:                          	;
  914:           N      0096    T_REM	EQU	T_STOP+6	;REMARK TOKEN
  915:      01E9 96             	DB	T_REM
  916:      01EA 52 45 4D       	DB	'REM'
  917:                          	;
  918:      01ED 97             	DB	T_REM+1 	;NEXT TOKEN
  919:      01EE 4E 45 58 54    	DB	'NEXT'
  920:                          	;
  921:      01F2 98             	DB	T_REM+2 	;ON ERROR TOKEN
  922:      01F3 4F 4E 45 52    	DB	'ONERR'
            01F7 52
  923:                          	;
  924:      01F8 99             	DB	T_REM+3 	;ON TOKEN
  925:      01F9 4F 4E          	DB	'ON'

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 18



 Line    I  Addr Code           Source

  926:                          	;
  927:      01FB 9A             	DB	T_REM+4 	;INPUT
  928:      01FC 49 4E 50 55    	DB	'INPUT'
            0200 54
  929:                          	;
  930:      0201 9B             	DB	T_REM+5 	;READ
  931:      0202 52 45 41 44    	DB	'READ'
  932:                          	;
  933:           N      009C    T_DATA	EQU	T_REM+6 	;DATA
  934:      0206 9C             	DB	T_DATA
  935:      0207 44 41 54 41    	DB	'DATA'
  936:                          	;
  937:      020B 9D             	DB	T_DATA+1	;RETURN
  938:      020C 52 45 54 55    	DB	'RETURN'
            0210 52 4E
  939:                          	;
  940:      0212 9E             	DB	T_DATA+2	;IF
  941:      0213 49 46          	DB	'IF'
  942:                          	;
  943:           N      009F    T_GOSB	EQU	T_DATA+3	;GOSUB
  944:      0215 9F             	DB	T_GOSB
  945:      0216 47 4F 53 55    	DB	'GOSUB'
            021A 42
  946:                          	;
  947:      021B A0             	DB	T_GOSB+1	;FOR
  948:      021C 46 4F 52       	DB	'FOR'
  949:                          	;
  950:      021F A1             	DB	T_GOSB+2	;WHILE
  951:      0220 57 48 49 4C    	DB	'WHILE'
            0224 45
  952:                          	;
  953:      0225 A2             	DB	T_GOSB+3	;UNTIL
  954:      0226 55 4E 54 49    	DB	'UNTIL'
            022A 4C
  955:                          	;
  956:      022B A3             	DB	T_GOSB+4	;END
  957:      022C 45 4E 44       	DB	'END'
  958:                          	;
  959:           N      00A4    T_LAST	EQU	T_GOSB+5	;LAST INITIAL TOKEN
  960:                          	;
  961:           N      00A4    T_TAB	EQU	T_LAST		;TAB TOKEN
  962:      022F A4             	DB	T_TAB
  963:      0230 54 41 42       	DB	'TAB'
  964:                          	;
  965:           N      00A5    T_THEN	EQU	T_LAST+1	;THEN TOKEN
  966:      0233 A5             	DB	T_THEN
  967:      0234 54 48 45 4E    	DB	'THEN'
  968:                          	;
  969:           N      00A6    T_TO	EQU	T_LAST+2	;TO TOKEN
  970:      0238 A6             	DB	T_TO
  971:      0239 54 4F          	DB	'TO'
  972:                          	;
  973:           N      00A7    T_STEP	EQU	T_LAST+3	;STEP TOKEN
  974:      023B A7             	DB	T_STEP
  975:      023C 53 54 45 50    	DB	'STEP'
  976:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 19



 Line    I  Addr Code           Source

  977:           N      00A8    T_ELSE	EQU	T_LAST+4	;ELSE TOKEN
  978:      0240 A8             	DB	T_ELSE
  979:      0241 45 4C 53 45    	DB	'ELSE'
  980:                          	;
  981:           N      00A9    T_SPC	EQU	T_LAST+5	;SPACE TOKEN
  982:      0245 A9             	DB	T_SPC
  983:      0246 53 50 43       	DB	'SPC'
  984:                          	;
  985:           N      00AA    T_CR	EQU	T_LAST+6
  986:      0249 AA             	DB	T_CR
  987:      024A 43 52          	DB	'CR'
  988:                          	;
  989:      024C AB             	DB	T_CR+1
  990:      024D 49 44 4C 45    	DB	'IDLE'
  991:                          	;
  992:      0251 AC             	DB	T_CR+2
  993:      0252 53 54 40       	DB	'ST@'
  994:                          	;
  995:      0255 AD             	DB	T_CR+3
  996:      0256 4C 44 40       	DB	'LD@'
  997:                          	;
  998:      0259 AE             	DB	T_CR+4
  999:      025A 50 47 4D       	DB	'PGM'
 1000:                          	;
 1001:      025D AF             	DB	T_CR+5
 1002:      025E 52 52 4F 4D    	DB	'RROM'
 1003:                          	;
 1004:                          	; Operator tokens
 1005:                          	;
 1006:           N      00E0    T_LPAR	EQU	0E0H		;LEFT PAREN
 1007:      0262 E0             	DB	T_LPAR
 1008:      0263 28             	DB	'('
 1009:                          	;
 1010:      0264 E1             	DB	T_LPAR+1	;EXPONENTIAN
 1011:      0265 2A 2A          	DB	'**'
 1012:                          	;
 1013:      0267 E2             	DB	T_LPAR+2	;FP MULTIPLY
 1014:      0268 2A             	DB	'*'
 1015:                          	;
 1016:           N      00E3    T_ADD	EQU	T_LPAR+3
 1017:      0269 E3             	DB	T_LPAR+3	;ADD TOKEN
 1018:      026A 2B             	DB	'+'
 1019:                          	;
 1020:      026B E4             	DB	T_LPAR+4	;DIVIDE TOKEN
 1021:      026C 2F             	DB	'/'
 1022:                          	;
 1023:           N      00E5    T_SUB	EQU	T_LPAR+5	;SUBTRACT TOKEN
 1024:      026D E5             	DB	T_SUB
 1025:      026E 2D             	DB	'-'
 1026:                          	;
 1027:      026F E6             	DB	T_LPAR+6	;LOGICAL EXCLUSIVE OR
 1028:      0270 2E 58 4F 52    	DB	'.XOR.'
            0274 2E
 1029:                          	;
 1030:      0275 E7             	DB	T_LPAR+7	;LOGICAL AND
 1031:      0276 2E 41 4E 44    	DB	'.AND.'

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 20



 Line    I  Addr Code           Source

            027A 2E
 1032:                          	;
 1033:      027B E8             	DB	T_LPAR+8	;LOGICAL OR
 1034:      027C 2E 4F 52 2E    	DB	'.OR.'
 1035:                          	;
 1036:           N      00E9    T_NEG	EQU	T_LPAR+9
 1037:                          	;
 1038:           N      00EA    T_EQU	EQU	T_LPAR+10	;EQUAL
 1039:      0280 EA             	DB	T_EQU
 1040:      0281 3D             	DB	'='
 1041:                          	;
 1042:      0282 EB             	DB	T_LPAR+11	;GREATER THAN OR EQUAL
 1043:      0283 3E 3D          	DB	'>='
 1044:                          	;
 1045:      0285 EC             	DB	T_LPAR+12	;LESS THAN OR EQUAL
 1046:      0286 3C 3D          	DB	'<='
 1047:                          	;
 1048:      0288 ED             	DB	T_LPAR+13	;NOT EQUAL
 1049:      0289 3C 3E          	DB	'<>'
 1050:                          	;
 1051:      028B EE             	DB	T_LPAR+14	;LESS THAN
 1052:      028C 3C             	DB	'<'
 1053:                          	;
 1054:      028D EF             	DB	T_LPAR+15	;GREATER THAN
 1055:      028E 3E             	DB	'>'
 1056:                          	;
 1057:                          	;
 1058:           N      00B0    T_UOP	EQU	0B0H		;UNARY OP BASE TOKEN
 1059:                          	;
 1060:      028F B0             	DB	T_UOP		;ABS TOKEN
 1061:      0290 41 42 53       	DB	'ABS'
 1062:                          	;
 1063:      0293 B1             	DB	T_UOP+1 	;INTEGER TOKEN
 1064:      0294 49 4E 54       	DB	'INT'
 1065:                          	;
 1066:      0297 B2             	DB	T_UOP+2 	;SIGN TOKEN
 1067:      0298 53 47 4E       	DB	'SGN'
 1068:                          	;
 1069:      029B B3             	DB	T_UOP+3 	;GET TOKEN
 1070:      029C 4E 4F 54       	DB	'NOT'
 1071:                          	;
 1072:      029F B4             	DB	T_UOP+4 	;COSINE TOKEN
 1073:      02A0 43 4F 53       	DB	'COS'
 1074:                          	;
 1075:      02A3 B5             	DB	T_UOP+5 	;TANGENT TOKEN
 1076:      02A4 54 41 4E       	DB	'TAN'
 1077:                          	;
 1078:      02A7 B6             	DB	T_UOP+6 	;SINE TOKEN
 1079:      02A8 53 49 4E       	DB	'SIN'
 1080:                          	;
 1081:      02AB B7             	DB	T_UOP+7 	;SQUARE ROOT TOKEN
 1082:      02AC 53 51 52       	DB	'SQR'
 1083:                          	;
 1084:      02AF B8             	DB	T_UOP+8 	;CBYTE TOKEN
 1085:      02B0 43 42 59       	DB	'CBY'
 1086:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 21



 Line    I  Addr Code           Source

 1087:      02B3 B9             	DB	T_UOP+9 	;EXP (E TO THE X) TOKEN
 1088:      02B4 45 58 50       	DB	'EXP'
 1089:                          	;
 1090:      02B7 BA             	DB	T_UOP+10
 1091:      02B8 41 54 4E       	DB	'ATN'
 1092:                          	;
 1093:      02BB BB             	DB	T_UOP+11
 1094:      02BC 4C 4F 47       	DB	'LOG'
 1095:                          	;
 1096:      02BF BC             	DB	T_UOP+12	;DBYTE TOKEN
 1097:      02C0 44 42 59       	DB	'DBY'
 1098:                          	;
 1099:      02C3 BD             	DB	T_UOP+13	;XBYTE TOKEN
 1100:      02C4 58 42 59       	DB	'XBY'
 1101:                          	;
 1102:           N      00BE    T_ULAST EQU	T_UOP+14	;LAST OPERATOR NEED
 1103:                          	;
 1104:      02C7 BE             	DB	T_ULAST
 1105:      02C8 50 49          	DB	'PI'
 1106:                          	;
 1107:      02CA BF             	DB	T_ULAST+1	;RND TOKEN
 1108:      02CB 52 4E 44       	DB	'RND'
 1109:                          	;
 1110:      02CE C0             	DB	T_ULAST+2	;GET TOKEN
 1111:      02CF 47 45 54       	DB	'GET'
 1112:                          	;
 1113:      02D2 C1             	DB	T_ULAST+3	;FREE TOKEN
 1114:      02D3 46 52 45 45    	DB	'FREE'
 1115:                          	;
 1116:      02D7 C2             	DB	T_ULAST+4	;LEN TOKEN
 1117:      02D8 4C 45 4E       	DB	'LEN'
 1118:                          	;
 1119:           N      00C3    T_XTAL	EQU	T_ULAST+5	;CRYSTAL TOKEN
 1120:      02DB C3             	DB	T_XTAL
 1121:      02DC 58 54 41 4C    	DB	'XTAL'
 1122:                          	;
 1123:           N      00C4    T_MTOP	EQU	T_ULAST+6	;MTOP
 1124:      02E0 C4             	DB	T_MTOP
 1125:      02E1 4D 54 4F 50    	DB	'MTOP'
 1126:                          	;
 1127:           N      00C6    T_IE	EQU	T_ULAST+8	;IE REGISTER
 1128:      02E5 C6             	DB	T_IE
 1129:      02E6 49 45          	DB	'IE'
 1130:                          	;
 1131:           N      00C7    T_IP	EQU	T_ULAST+9	;IP REGISTER
 1132:      02E8 C7             	DB	T_IP
 1133:      02E9 49 50          	DB	'IP'
 1134:                          	;
 1135:           N      00C8    TMR0	EQU	T_ULAST+10	;TIMER 0
 1136:      02EB C8             	DB	TMR0
 1137:      02EC 54 49 4D 45    	DB	'TIMER0'
            02F0 52 30
 1138:                          	;
 1139:           N      00C9    TMR1	EQU	T_ULAST+11	;TIMER 1
 1140:      02F2 C9             	DB	TMR1
 1141:      02F3 54 49 4D 45    	DB	'TIMER1'

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 22



 Line    I  Addr Code           Source

            02F7 52 31
 1142:                          	;
 1143:           N      00CA    TMR2	EQU	T_ULAST+12	;TIMER 2
 1144:      02F9 CA             	DB	TMR2
 1145:      02FA 54 49 4D 45    	DB	'TIMER2'
            02FE 52 32
 1146:                          	;
 1147:           N      00C5    T_TIME	EQU	T_ULAST+7	;TIME
 1148:      0300 C5             	DB	T_TIME
 1149:      0301 54 49 4D 45    	DB	'TIME'
 1150:                          	;
 1151:           N      00CB    TT2C	EQU	T_ULAST+13	;T2CON
 1152:      0305 CB             	DB	TT2C
 1153:      0306 54 32 43 4F    	DB	'T2CON'
            030A 4E
 1154:                          	;
 1155:           N      00CC    TTC	EQU	T_ULAST+14	;TCON
 1156:      030B CC             	DB	TTC
 1157:      030C 54 43 4F 4E    	DB	'TCON'
 1158:                          	;
 1159:           N      00CD    TTM	EQU	T_ULAST+15	;TMOD
 1160:      0310 CD             	DB	TTM
 1161:      0311 54 4D 4F 44    	DB	'TMOD'
 1162:                          	;
 1163:           N      00CE    TRC2	EQU	T_ULAST+16	;RCAP2
 1164:      0315 CE             	DB	TRC2
 1165:      0316 52 43 41 50    	DB	'RCAP2'
            031A 32
 1166:                          	;
 1167:           N      00CF    T_P1	EQU	T_ULAST+17	;P1
 1168:      031B CF             	DB	T_P1
 1169:      031C 50 4F 52 54    	DB	'PORT1'
            0320 31
 1170:                          	;
 1171:           N      00D0    T_PC	EQU	T_ULAST+18	;PCON
 1172:      0321 D0             	DB	T_PC
 1173:      0322 50 43 4F 4E    	DB	'PCON'
 1174:                          	;
 1175:           N      00D1    T_ASC	EQU	T_ULAST+19	;ASC TOKEN
 1176:      0326 D1             	DB	T_ASC
 1177:      0327 41 53 43 28    	DB	'ASC('
 1178:                          	;
 1179:           N      00D2    T_USE	EQU	T_ULAST+20	;USING TOKEN
 1180:      032B D2             	DB	T_USE
 1181:      032C 55 53 49 4E    	DB	'USING('
            0330 47 28
 1182:      0332 D2             	DB	T_USE
 1183:      0333 55 2E 28       	DB	'U.('
 1184:                          	;
 1185:           N      00D3    T_CHR	EQU	T_ULAST+21	;CHR TOKEN
 1186:      0336 D3             	DB	T_CHR
 1187:      0337 43 48 52 28    	DB	'CHR('
 1188:                          	;
 1189:           N      00F0    T_CMND	EQU	0F0H		;COMMAND BASE
 1190:                          	;
 1191:      033B F0             	DB	0F0H		;RUN TOKEN

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 23



 Line    I  Addr Code           Source

 1192:      033C 52 55 4E       	DB	'RUN'
 1193:                          	;
 1194:      033F F1             	DB	0F1H		;LIST TOKEN
 1195:      0340 4C 49 53 54    	DB	'LIST'
 1196:                          	;
 1197:      0344 F2             	DB	0F2H		;NULL TOKEN
 1198:      0345 4E 55 4C 4C    	DB	'NULL'
 1199:                          	;
 1200:      0349 F3             	DB	0F3H		;NEW TOKEN
 1201:      034A 4E 45 57       	DB	'NEW'
 1202:                          	;
 1203:      034D F4             	DB	0F4H		;CONTINUE TOKEN
 1204:      034E 43 4F 4E 54    	DB	'CONT'
 1205:                          	;
 1206:      0352 F5             	DB	0F5H		;PROGRAM TOKEN
 1207:      0353 50 52 4F 47    	DB	'PROG'
 1208:                          	;
 1209:      0357 F6             	DB	0F6H		;TRANSFER TOKEN
 1210:      0358 58 46 45 52    	DB	'XFER'
 1211:                          	;
 1212:      035C F7             	DB	0F7H		;RAM MODE
 1213:      035D 52 41 4D       	DB	'RAM'
 1214:                          	;
 1215:      0360 F8             	DB	0F8H		;ROM MODE
 1216:      0361 52 4F 4D       	DB	'ROM'
 1217:                          ;
 1218:                          ;
 1219:                          ;***************************************
 1220:                          ;****** Disable Intel programming for to
 1221:                          ;
 1222:                          ;	DB	0F9H		;INTELLIGENT PROM PROGRAMMING
 1223:                          ;	DB	'FPROG'
 1224:                          ;
 1225:                          ;***************************************
 1226:                          ;****** New command "ERASE" to fill an E
 1227:                          ;****** Boehling 3 *********************
 1228:                          ;
 1229:      0364 F9             	db	0F9H		;Erase an EEPROM
 1230:      0365 45 52 41 53    	db	'ERASE'
            0369 45
 1231:                          ;
 1232:                          ;***************************************
 1233:                          ;****** Karmann 2 Bugfix ***************
 1234:                          ;
 1235:      036A FE             	db	0feh		;dummy token and
 1236:      036B 7F             	db	07fh		;unused dummy char
 1237:                          ;
 1238:                          ;****** continue with original code: ***
 1239:                          ;
 1240:      036C FF             	DB	0FFH		;END OF TABLE
 1241:                          	;
 1242:      036D 45 58 54 52    EIG:	DB	'EXTRA IGNORED"'
            0371 41 20 49 47
            0375 4E 4F 52 45
            0379 44 22
 1243:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 24



 Line    I  Addr Code           Source

 1244:      037B 41 2D 53 54    EXA:	DB	'A-STACK"'
            037F 41 43 4B 22
 1245:                          	;
 1246:      0383 43 2D 53 54    EXC:	DB	'C-STACK"'
            0387 41 43 4B 22
 1247:                          	;
 1248:                          	;**************************************
 1249:                          	;
 1250:                          CRST:	; This performs system initialzati
 1251:                          	; new power on reset functions could be
 1252:                          	;
 1253:                          	;**************************************
 1254:                          	;
 1255:                          	; First, initialize SFR's
 1256:                          	;
 1257:      038B 75 98 5A       	MOV	SCON,#5AH	;INITIALIZE SFR'S
 1258:                          ;
 1259:                          ;***************************************
 1260:                          ;****** Use XTAL up to 47 MHz **********
 1261:                          ;****** Wulf 2 *************************
 1262:                          ;
 1263:                          ;	MOV	TMOD,#10H
 1264:                          ;
 1265:      038E 75 89 11       	mov	TMOD,#11H	;Use 16 bit mode of timer
 1266:                          ;
 1267:                          ;***************************************
 1268:                          ;
 1269:      0391 75 88 54       	MOV	TCON,#54H
 1270:      0394 75 C8 34       	MOV	T2CON,#34H
 1271:                          ;	DB	75H		;MOV DIRECT, # OP CODE
 1272:                          ;	DB	0C8H		;T2CON LOCATION
 1273:                          ;	DB	34H		;CONFIGURATION BYTE
 1274:                          ;
 1275:                          ;=== CH559 Added =====
 1276:      0397 91 40          	acall	setfsys	; Set CPU Clock 48MHz
 1277:                          ;=====================
 1278:                          ;
 1279:      0399 90 20 01       	MOV	DPTR,#2001H	;READ CODE AT 2001H
 1280:      039C E4             	CLR	A
 1281:      039D 93             	MOVC	A,@A+DPTR
 1282:      039E B4 AA 03       	CJNE	A,#0AAH,CRST1	;IF IT IS AN AAH, DO
 1283:      03A1 12 20 90       	LCALL	2090H
 1284:                          	;
 1285:      03A4 78 FF          CRST1:	MOV	R0,#IRAMTOP	;PUT THE TOP OF R
 1286:      03A6 E4             	CLR	A		;ZERO THE ACC
 1287:                          	;
 1288:      03A7 F6             CRST2:	MOV	@R0,A		;CLEAR INTERNAL MEMORY
 1289:      03A8 D8 FD          	DJNZ	R0,CRST2	;LOOP TIL DONE
 1290:                          	;
 1291:                          	; Now, test the external memory
 1292:                          	;
 1293:      03AA 75 3E 4D       	MOV	SPSAV,#CMNDSP	;SET UP THE STACK
 1294:      03AD 85 3E 81       	MOV	SP,SPSAV
 1295:                          ;
 1296:                          ;***************************************
 1297:                          ;****** Karmann 1 Bugfix ***************

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 25



 Line    I  Addr Code           Source

 1298:                          ;
 1299:      03B0 12 17 E0       	lcall	TEST_USER	;chek for user command 
 1300:                          ;
 1301:                          ;****** continue with original code: ***
 1302:                          ;
 1303:      03B3 75 13 80       	MOV	BOFAH,#HIGH ROMADR
 1304:      03B6 75 14 11       	MOV	BOFAL,#LOW ROMADR+17
 1305:      03B9 90 80 00       	MOV	DPTR,#ROMADR	;GET THE BYTE AT 8000H
 1306:      03BC E0             	MOVX	A,@DPTR
 1307:      03BD C3             	CLR	C
 1308:      03BE 94 31          	SUBB	A,#31H		;FOR BIAS
 1309:      03C0 F5 45          	MOV	MT1,A		;SAVE IN DIRECT MATH LOC
 1310:      03C2 C2 E2          	CLR	ACC.2		;SAVE FOR RESET
 1311:      03C4 FF             	MOV	R7,A		;SAVE IT IN R7
 1312:      03C5 A3             	INC	DPTR
 1313:      03C6 B1 BA          	ACALL	L31DPI		;SAVE BAUD RATE
 1314:      03C8 12 08 85       	LCALL	RCL
 1315:      03CB A3             	INC	DPTR		;GET MEMTOP
 1316:      03CC B1 BA          	ACALL	L31DPI
 1317:      03CE 90 00 5F       	MOV	DPTR,#5FH	;READ THE EXTERNAL BYTE
 1318:      03D1 E0             	MOVX	A,@DPTR
 1319:      03D2 90 00 00       	MOV	DPTR,#0 	;ESTABLISH BASE FOR CLEAR
 1320:      03D5 B4 A5 08       	CJNE	A,#0A5H,CRS	;Erase the memory
 1321:      03D8 E5 45          	MOV	A,MT1
 1322:      03DA C2 E0          	CLR	ACC.0		;CLEAR BIT ONE
 1323:      03DC 64 04          	XRL	A,#4H
 1324:      03DE 60 2C          	JZ	CR2
 1325:                          	;
 1326:      03E0 BF 02 02       CRS:	CJNE	R7,#2,CRS1
 1327:      03E3 80 03          	SJMP	CRS2
 1328:      03E5 BF 03 04       CRS1:	CJNE	R7,#3,CR0
 1329:      03E8 D1 7D          CRS2:	ACALL	CL_1
 1330:      03EA 80 14          	SJMP	CR1
 1331:                          	;
 1332:      03EC AB 83          CR0:	MOV	R3,DPH		;SAVE THE DPTR
 1333:      03EE A9 82          	MOV	R1,DPL
 1334:      03F0 A3             	INC	DPTR
 1335:      03F1 74 5A          	MOV	A,#5AH
 1336:      03F3 F0             	MOVX	@DPTR,A 	;Test external memory
 1337:      03F4 E0             	MOVX	A,@DPTR
 1338:      03F5 B4 5A 08       	CJNE	A,#5AH,CR1
 1339:      03F8 E4             	CLR	A
 1340:      03F9 F0             	MOVX	@DPTR,A
 1341:                          ;
 1342:                          ;***************************************
 1343:                          ;******* Skowronek alterations to progra
 1344:                          ;
 1345:                          ;	CJNE	R3,#0E0H,CR0
 1346:                          ;
 1347:                          ;=== CH552/CH559 Replaced =====
 1348:                          ;	CJNE	R3,#HIGH ROMADR-1,CR0	;Stop the t
 1349:                          ;	CJNE	R1,#LOW ROMADR-2,CR0	;EEPROM star
 1350:                          ;
 1351:      03FA BB 0F EF       	CJNE	R3,#HIGH ERAMEND,CR0	; Stop the te
 1352:      03FD B9 FE EC       	CJNE	R1,#LOW ERAMEND-1,CR0	; EXT-RAM en
 1353:                          ;========================

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 26



 Line    I  Addr Code           Source

 1354:                          ;
 1355:                          ;***************************************
 1356:                          ;
 1357:      0400 BB 03 00       CR1:	CJNE	R3,#03H,CR11	;NEED THIS MUCH R
 1358:      0403 40 86          CR11:	JC	CRST
 1359:      0405 90 01 0A       	MOV	DPTR,#MEMTOP	;SAVE MEMTOP
 1360:      0408 D1 03          	ACALL	S31DP2		;SAVE MEMTOP AND SEED RCE
 1361:      040A D1 5C          	ACALL	CNEW		;CLEAR THE MEMORY AND SET U
 1362:                          	;
 1363:      040C D1 6F          CR2:	ACALL	RC1		;SET UP STACKS IF NOT DO
 1364:                          	;
 1365:      040E 12 16 57       	LCALL	AXTAL0		;DO THE CRYSTAL
 1366:      0411 E5 45          	MOV	A,MT1		;GET THE RESET BYTE
 1367:      0413 B4 05 03       	CJNE	A,#5,CR20
 1368:      0416 12 40 39       	LCALL	4039H
 1369:      0419 50 0D          CR20:	JNC	BG1		;CHECK FOR 0,1,2,3, OR 4
 1370:      041B 30 E0 49       	JNB	ACC.0,BG3	;NO RUN IF WRONG TYPE
 1371:      041E 90 80 10       	MOV	DPTR,#ROMADR+16
 1372:      0421 E0             	MOVX	A,@DPTR 	;READ THE BYTE
 1373:      0422 B4 55 42       	CJNE	A,#55H,BG3
 1374:      0425 02 08 02       	LJMP	CRUN
 1375:                          ;
 1376:                          ;***************************************
 1377:                          ;******* New baudrate detection ********
 1378:                          ;******* Wulf 3 alteration 1 ***********
 1379:                          ;
 1380:                          ;BG1:	 CLR	 A		 ;DO BAUD RATE
 1381:                          ;	 MOV	 R3,A
 1382:                          ;	 MOV	 R1,A
 1383:                          ;	 MOV	 R0,#4
 1384:                          ;	 JB	 RXD,$		 ;LOOP UNTIL A CHARACTER I
 1385:                          ;	;
 1386:                          ;BG2:	 DJNZ	 R0,$		 ;FOUR CLOCKS, IN LOO
 1387:                          ;	 CALL	 DEC3211	 ;NINE CLOCKS
 1388:                          ;	 MOV	 R0,#2		 ;ONE CLOCK
 1389:                          ;	 JNB	 RXD,BG2	 ;TWO CLOCKS, LOOP UNTIL
 1390:                          ;	 JB	 RXD,$		 ;WAIT FOR STOP CHARACTER 
 1391:                          ;	 JNB	 RXD,$
 1392:                          ;
 1393:                          ;***************************************
 1394:                          ;******* New processor type detection **
 1395:                          ;******* Wulf 4 ************************
 1396:                          ;
 1397:                          ;-- comment out for AT98LP52 -----------
 1398:                          ;
 1399:                          ;BG1:	clr	a
 1400:                          ;	mov	t2con,a
 1401:                          ;	mov	TH2,#0FFh
 1402:                          ;	mov	TL2,#0F8h
 1403:                          ;	jb	rxd,$
 1404:                          ;	mov	t2con,#5	;Timer2 start
 1405:                          ;	jnb	rxd,$
 1406:                          ;	mov	t2con,a 	;Timer2 stop
 1407:                          ;	jb	rxd,$
 1408:                          ;	jnb	rxd,$
 1409:                          ;	call	sercalc 	;r3=timer2 MSB default

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 27



 Line    I  Addr Code           Source

 1410:                          ;	;
 1411:                          ;	cjne	a,ADCON,BG10	;jump if A/D process
 1412:                          ;BG14:	mov	a,S0RELL
 1413:                          ;	cjne	a,#B9600,BG2	;jump if not 805x7A
 1414:                          ;	mov	a,r3
 1415:                          ;	anl	S0RELH,a
 1416:                          ;	mov	S0RELL,r1	;start Baudratetimer 805
 1417:                          ;	sjmp	BG11
 1418:                          ;	;
 1419:                          ;BG10:	cjne	r1,#B9600,BG12	;jump if wron
 1420:                          ;BG11:	orl	PCON0,#080h	;setb smod for fa
 1421:                          ;	sjmp	BG13
 1422:                          ;	;
 1423:                          ;BG12:	cjne	r1,#B4800,BG14	;jump if wron
 1424:                          ;BG13:	setb	BD		;enable baudrategenerato
 1425:                          ;	sjmp	BG15
 1426:                          ;	;
 1427:                          ;BG2:	mov	t2con,#34h	;configure Timer2 a
 1428:                          ;BG15:	CALL	RCL		;LOAD THE TIMER
 1429:                          
 1430:                          ;
 1431:                          ;-- insert for AT98LP52 ----------------
 1432:                          ;
 1433:                          ;BG1:	mov	r6,#0		; Speed Table Index
 1434:                          ;	mov	r3,#0FFH	; Set R3 = RCAP2H
 1435:                          ;
 1436:                          ;BG11:	mov	dptr,#SPEED_TBL	; Speed Table
 1437:                          ;	mov	a,r6		; Speed Table Index
 1438:                          ;	movc	a,@a+dptr	; Fetch Speed Table
 1439:                          ;	inc	r6
 1440:                          ;	jz	bg3		; Table End, Use Last Speed
 1441:                          ;
 1442:                          ;	mov	r1,a		; Set R1 = RCAP2L
 1443:                          ;	mov	t2con,#34h	;configure Timer2 as ba
 1444:                          ;	call	RCL		;LOAD THE TIMER
 1445:                          ;
 1446:                          ;	mov	dptr,#TEST_MSG	; Put Test Message
 1447:                          ;	mov	r7,#0		; Message Text Index
 1448:                          ;
 1449:                          ;BG13:	mov	a,r7		; Text Index
 1450:                          ;	movc	a,@a+dptr	; Fetch Message String
 1451:                          ;	jz	BG14		; String End ?
 1452:                          ;	jnb	TI,$		; Wait Until Transmmit End
 1453:                          ;	clr	TI		; Clear TX Flag
 1454:                          ;	mov	SBUF,a	 	; Output Character
 1455:                          ;	inc	r7		; Next Character
 1456:                          ;	sjmp	BG13
 1457:                          ;
 1458:                          ;BG14:	jnb	RI,$		; Wait Until Receive En
 1459:                          ;	mov	a,SBUF		; Get Receive Character
 1460:                          ;	clr	RI		; Reset Flag
 1461:                          ;	anl	a,#07FH		; Clear Bit-7
 1462:                          ;	cjne	a,#'y',BG11	; Ok?, Test Next Spee
 1463:                          ;	sjmp	BG3
 1464:                          ;
 1465:                          ;SPEED_TBL:	db	0A0H	; RCAP2H,L = FFA0H (

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 28



 Line    I  Addr Code           Source

 1466:                          ;		db	0B8H	; RCAP2H,L = FFB8H (19.2Kbps,
 1467:                          ;		db	0D0H	; RCAP2H,L = FFD0H (19.2Kbbs,
 1468:                          ;		db	0DCH	; RCAP2H,L = FFDCH (19.2Kbps,
 1469:                          ;		db	00h	; Table End
 1470:                          
 1471:                          ;-- CH559 Insert Start -----------------
 1472:                          ;=======================================
 1473:                          ;  CH559 Set Fixed baudrate 19.23Kbps
 1474:                          ;  RCAP2H,L = 65536 - (Fsys/16/Baud Rate
 1475:                          ;=======================================
 1476:           N      FF64    baud19K	equ	0ff64h		; RCAP2H,L Value of 
 1477:                          ;
 1478:                          BG1:
 1479:                          ;=== CH559T alternative UART0 port setti
 1480:                            IF (CH559T) 			; if CH559T = true Then
 1481:      0428 43 C4 08       	orl		P0_DIR,#08h		; P0.3(TXD_) is outpu
 1482:      042B 43 C5 0C       	orl		P0_PU,#0Ch		; P0.2(RXD_),P0.3(TXD_
 1483:      042E 43 CE 10       	orl		PIN_FUNC,#10h	; UART0 mapping enab
 1484:                            ENDIF
 1485:                          ;================
 1486:      0431 43 C9 C0       	orl		t2mod,#0C0H		; Set bTMR_CLK, bT2_C
 1487:      0434 7B FF          	mov		r3,#high baud19k	; Set R3 = RCAP2H
 1488:      0436 79 64          	mov		r1,#low baud19k		; Set R1 = RCAP2L
 1489:      0438 75 C8 34       	mov		t2con,#34h		; configure Timer2 as 
 1490:      043B 12 08 85       	call	RCL				; LOAD THE TIMER
 1491:                          
 1492:      043E 80 27          	sjmp	BG3
 1493:                          
 1494:                          ;=======================================
 1495:                          ;  CH559 System Clock (Fsys) Up 12MHz ->
 1496:                          ;=======================================
 1497:                          ;   PLL_CFG is Default = 12MHz x 24 = 28
 1498:                          ;
 1499:                          setfsys:
 1500:      0440 E5 B3          	mov	a,CLOCK_CFG		; Get CLOCK_CFG
 1501:      0442 54 E0          	anl	a,#0E0H			;  Clear MASK_SYS_CK_SEL
 1502:      0444 44 06          	orl	a,#6			;  Set MASK_SYS_CK_SEL = 001
 1503:                          
 1504:      0446 75 A1 55       	mov	SAFE_MOD,#055H	; Enter Safe_Mode Ke
 1505:      0449 75 A1 AA       	mov	SAFE_MOD,#0AAH	; Enter Safe_Mode Ke
 1506:                          
 1507:      044C F5 B3          	mov	CLOCK_CFG,a		; Rewrite CLOCK_CFG
 1508:                          
 1509:      044E 75 A1 00       	mov	SAFE_MOD,#00	; Exit Safe_Mode
 1510:                          
 1511:      0451 22             	ret
 1512:                          
 1513:           N      0467    	org	0467h		; Insert Dummy Space, 0467H 
 1514:                          ;
 1515:                          ;-- insert end -------------------------
 1516:                          ;
 1517:                          ;****** Original code from here ********
 1518:                          ;
 1519:      0467 90 1F D3       BG3:	MOV	DPTR,#S_N	;GET THE MESSAGE
 1520:      046A D1 AD          	ACALL	CRP		;PRINT IT
 1521:      046C 02 17 7F       	LJMP	CRAM

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 29



 Line    I  Addr Code           Source

 1522:                          	;
 1523:                          	;**************************************
 1524:                          	;
 1525:                          	; CIPROG AND CPROG - Program a prom
 1526:                          	;
 1527:                          	;**************************************
 1528:                          	;
 1529:      046F 7F 00          PG8:	MOV	R7,#00H 	;PROGRAM ONE BYTE AT A
 1530:      0471 7E 01          	MOV	R6,#01H
 1531:      0473 7A 7F          	MOV	R2,#HIGH ROMADR-1
 1532:      0475 78 FF          	MOV	R0,#LOW ROMADR-1;LOAD PROM ADDRESS
 1533:      0477 91 B5          	ACALL	PG101
 1534:      0479 0E             	INC	R6
 1535:      047A E5 CB          	MOV	A,RCAPH2
 1536:                          ;	DB	0E5H		;MOV A DIRECT OP CODE
 1537:                          ;	DB	0CBH		;ADDRESS OF R2CAP HIGH
 1538:      047C 91 B5          	ACALL	PG101
 1539:      047E E5 CA          	MOV	A,RCAPL2
 1540:                          ;	DB	0E5H		;MOV A, DIRECT OP CODE
 1541:                          ;	DB	0CAH		;R2CAP LOW
 1542:      0480 7E 03          	MOV	R6,#3
 1543:      0482 79 09          	MOV	R1,#LOW MEMTOP-1
 1544:      0484 7B 01          	MOV	R3,#HIGH MEMTOP
 1545:      0486 91 B5          	ACALL	PG101		;SAVE MEMTOP
 1546:      0488 80 29          	SJMP	PGR
 1547:                          ;
 1548:                          ;
 1549:                          ;***************************************
 1550:                          ;****** Skowronek alterations to program
 1551:                          ;****** Support the "PGM" statement was 
 1552:                          ;****** Disable Intel programming and co
 1553:                          ;
 1554:                          ;CIPROG: MOV	DPTR,#IPROGS	;LOAD IPROG LO
 1555:                          ;	SETB	INTELB
 1556:                          ;	SJMP	CPROG1		;GO DO PROG
 1557:                          ;	;
 1558:                          ;CPROG: MOV	DPTR,#PROGS	;LOAD PROG LOCAT
 1559:                          ;	CLR	INTELB
 1560:                          ;	;
 1561:                          ;CPROG1: ACALL	LD_T		;LOAD THE TIMER
 1562:                          ;	CLR	PROMV		;TURN ON THE PROM VOLTAGE
 1563:                          ;	CALL	DELTST		;SEE IF A CR
 1564:                          ;	JNZ	PG8		;SAVE TIMER IF SO
 1565:                          ;	MOV	R4,#0FEH
 1566:                          ;	SETB	INBIT
 1567:                          ;	ACALL	ROMFD		;GET THE ROM ADDRESS OF T
 1568:                          ;	CALL	TEMPD		;SAVE THE ADDRESS
 1569:                          ;	MOV	A,R4		;GET COUNT
 1570:                          ;	CPL	A
 1571:                          ;	CALL	TWO_R2		;PUT IT ON THE STACK
 1572:                          ;	CALL	FP_BASE7	;OUTPUT IT
 1573:                          ;	ACALL	CCAL		;GET THE PROGRAM
 1574:                          ;	ACALL	CRLF		;DO CRLF
 1575:                          ;	MOV	R0,TEMP4	;GET ADDRESS
 1576:                          ;	MOV	R2,TEMP5
 1577:                          ;	MOV	A,#55H		;LOAD SIGNIFIER

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 30



 Line    I  Addr Code           Source

 1578:                          ;	INC	R6		;LOAD LEN + 1
 1579:                          ;	CJNE	R6,#00,CPROG2
 1580:                          ;	INC	R7
 1581:                          ;CPROG2: ACALL	 PG102
 1582:                          ;
 1583:                          ;PGR:	SETB	PROMV
 1584:                          ;	AJMP	C_K
 1585:                          ;
 1586:                          ;PG1:	MOV	P2,R3		;GET THE BYTE TO PROGRA
 1587:                          ;	MOVX	A,@R1
 1588:                          ;PG101:  LCALL	 INC3210	 ;BUMP POINTERS
 1589:                          ;PG102:  MOV	 R5,#1		 ;SET UP INTELLIGEN
 1590:                          ;
 1591:                          ;PG2:	MOV	R4,A		;SAVE THE BYTE IN R4
 1592:                          ;	ACALL	PG7		;PROGRAM THE BYTE
 1593:                          ;	ACALL	PG9
 1594:                          ;	JB	INTELB,PG4	;SEE IF INTELLIGENT PROG
 1595:                          ;
 1596:                          ;PG3:	XRL	A,R4
 1597:                          ;	JNZ	PG6		;ERROR IF NOT THE SAME
 1598:                          ;	CALL	DEC76		;BUMP THE COUNTERS
 1599:                          ;	JNZ	PG1		;LOOP IF NOT DONE
 1600:                          ;	ANL	PSW,#11100111B	;INSURE RB0
 1601:                          ;PG31:	 RET
 1602:                          ;
 1603:                          ;PG4:	XRL	A,R4		;SEE IF PROGRAMMED
 1604:                          ;	JNZ	PG5		;JUMP IF NOT
 1605:                          ;	MOV	A,R4		;GET THE DATA BACK
 1606:                          ;	ACALL	PG7		;PROGRAM THE LOCATION
 1607:                          ;PG41:	 ACALL	 ZRO		 ;AGAIN
 1608:                          ;	ACALL	ZRO		;AND AGAIN
 1609:                          ;	ACALL	ZRO		;AND AGAIN
 1610:                          ;	DJNZ	R5,PG41 	;KEEP DOING IT
 1611:                          ;	ACALL	PG9		;RESET PROG
 1612:                          ;	SJMP	PG3		;FINISH THE LOOP
 1613:                          ;
 1614:                          ;PG5:	INC	R5		;BUMP THE COUNTER
 1615:                          ;	MOV	A,R4		;GET THE BYTE
 1616:                          ;	CJNE	R5,#25,PG2	;SEE IF TRIED 25 TIMES
 1617:                          ;
 1618:                          ;PG6:	SETB	PROMV		;TURN OFF PROM VOLTAGE
 1619:                          ;	MOV	PSW,#0		;INSURE RB0
 1620:                          ;	JNB	DIRF,PG31	;EXIT IF IN RUN MODE
 1621:                          ;	MOV	DPTR,#E16X	;PROGRAMMING ERROR
 1622:                          ;
 1623:                          ;ERRLK: LJMP	ERROR		;PROCESS THE ERROR
 1624:                          ;
 1625:                          ;PG7:	MOV	P0,R0		;SET UP THE PORTS
 1626:                          ;	MOV	P2,R2		;LATCH LOW ORDER ADDRESS
 1627:                          ;	ACALL	PG11		;DELAY FOR 8748/9
 1628:                          ;	CLR	ALED
 1629:                          ;	MOV	P0,A		;PUT DATA ON THE PORT
 1630:                          ;	;
 1631:                          ;ZRO:	NOP			;SETTLEING TIME + FP ZERO
 1632:                          ;	NOP
 1633:                          ;	NOP

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 31



 Line    I  Addr Code           Source

 1634:                          ;	NOP
 1635:                          ;	NOP
 1636:                          ;	NOP
 1637:                          ;	ACALL	PG11		;DELAY A WHILE
 1638:                          ;	CLR	PROMP		;START PROGRAMMING
 1639:                          ;	ACALL	TIMER_LOAD	;START THE TIMER
 1640:                          ;	JNB	TF1,$		;WAIT FOR PART TO PROGRAM
 1641:                          ;	RET			;EXIT
 1642:                          ;
 1643:                          ;PG9:	SETB	PROMP
 1644:                          ;	ACALL	PG11		;DELAY FOR A WHILE
 1645:                          ;	JNB	P3.2,$		;LOOP FOR EEPROMS
 1646:                          ;	MOV	P0,#0FFH
 1647:                          ;	CLR	P3.7		;LOWER READ
 1648:                          ;	ACALL	PG11
 1649:                          ;	MOV	A,P0		;READ THE PORT
 1650:                          ;	SETB	P3.7
 1651:                          ;	SETB	ALED
 1652:                          ;	RET
 1653:                          ;
 1654:                          ;PG11:	MOV	TEMP5,#12	;DELAY 30uS AT 12 M
 1655:                          ;	DJNZ	TEMP5,$
 1656:                          ;	RET
 1657:                          ;
 1658:                          ;	;*************************************
 1659:                          ;	;
 1660:                          ;PGU:	;PROGRAM A PROM FOR THE USER
 1661:                          ;	;
 1662:                          ;	;*************************************
 1663:                          ;
 1664:                          ;	CLR	PROMV		;TURN ON THE VOLTAGE
 1665:                          ;	MOV	PSW,#00011000B	;SELECT RB3
 1666:                          ;	ACALL	PG1		;DO IT
 1667:                          ;	SETB	PROMV		;TURN IT OFF
 1668:                          ;	RET
 1669:                          ;
 1670:                          ;****** alteredet code starts here: ****
 1671:                          ;
 1672:      048A 90 01 28       CPROG:	MOV	DPTR,#PROGS	;LOAD PROG LOCATI
 1673:                          	;
 1674:      048D B1 82          CPROG1: ACALL	LD_T		;LOAD THE TIMER
 1675:      048F 12 0E E1       	CALL	DELTST		;SEE IF A CR
 1676:      0492 70 DB          	JNZ	PG8		;SAVE TIMER IF SO
 1677:      0494 7C FE          	MOV	R4,#0FEH
 1678:      0496 D2 1D          	SETB	INBIT
 1679:      0498 B1 5B          	ACALL	ROMFD		;GET THE ROM ADDRESS OF TH
 1680:      049A 12 18 54       	CALL	TEMPD		;SAVE THE ADDRESS
 1681:      049D EC             	MOV	A,R4		;GET COUNT
 1682:      049E F4             	CPL	A
 1683:      049F 12 14 B1       	CALL	TWO_R2		;PUT IT ON THE STACK
 1684:      04A2 12 19 7D       	CALL	FP_BASE7	;OUTPUT IT
 1685:      04A5 B1 1C          	ACALL	CCAL		;GET THE PROGRAM
 1686:      04A7 D1 A5          	ACALL	CRLF		;DO CRLF
 1687:      04A9 A8 0E          	MOV	R0,TEMP4	;GET ADDRESS
 1688:      04AB AA 0F          	MOV	R2,TEMP5
 1689:      04AD 74 55          	MOV	A,#55H		;LOAD SIGNIFIER

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 32



 Line    I  Addr Code           Source

 1690:      04AF 0E             	INC	R6		;LOAD LEN + 1
 1691:      04B0 0F             	INC	R7
 1692:      04B1 91 C3          CPROG2: ACALL	PG2
 1693:                          	;
 1694:      04B3 A1 40          PGR:	AJMP	C_K		;Exit to command mode
 1695:                          	;
 1696:      04B5 0F             PG101:	INC	R7
 1697:      04B6 BE 00 07       	CJNE	R6,#0,PG4
 1698:      04B9 1F             	DEC	R7
 1699:      04BA 80 04          	SJMP	PG4
 1700:                          	;
 1701:      04BC 0F             PG10:	INC	R7
 1702:                          	;
 1703:      04BD 8B A0          PG1:	MOV	P2,R3		;GET THE BYTE TO PROGRAM
 1704:      04BF E3             	MOVX	A,@R1
 1705:      04C0 12 15 76       PG4:	LCALL	INC3210 	;BUMP POINTERS
 1706:                          	;
 1707:      04C3 91 D9          PG2:	ACALL	PG7		;Write the byte
 1708:      04C5 70 04          	JNZ	PG5		;exit if error
 1709:      04C7 DE F4          	DJNZ	R6,PG1
 1710:      04C9 DF F2          	DJNZ	R7,PG1		;LOOP IF NOT DONE
 1711:                          	;
 1712:      04CB 53 D0 E7       PG5:	ANL	PSW,#11100111B	;INSURE RB0
 1713:      04CE 60 27          	JZ	PG31		;Jump if none error
 1714:                          	;
 1715:      04D0 30 2F 24       PG6:	JNB	DIRF,PG31	;EXIT IF IN RUN MODE
 1716:      04D3 90 1F 9A       	MOV	DPTR,#E16X	;PROGRAMMING ERROR
 1717:      04D6 02 18 8F       ERRLK:	LJMP	ERROR		;PROCESS THE ERROR
 1718:                          	;
 1719:                          	;
 1720:      04D9 FC             PG7:	MOV	R4,A		;SAVE THE BYTE IN R4 for 
 1721:      04DA 8A 83          	mov	dph,r2		;load data pointer with eep
 1722:      04DC 88 82          	mov	dpl,r0
 1723:      04DE F0             	movx	@dptr,a 	;write the byte
 1724:      04DF 7D             	DB	07DH		;mov	 r5,#0
 1725:                          	;
 1726:      04E0 00             ZRO:	NOP
 1727:      04E1 00             	NOP			;SETTLEING TIME + FP ZERO
 1728:      04E2 00             	NOP			;Atenttion. This 6 NOP's a not on
 1729:      04E3 00             	NOP			;for settleing time, it is also t
 1730:      04E4 00             	NOP			;floating point zero!
 1731:      04E5 00             	NOP
 1732:      04E6 75 0F 0C       	MOV	TEMP5,#12	;DELAY 30uS AT 12 MHZ
 1733:      04E9 D5 0F FD       	DJNZ	TEMP5,$
 1734:      04EC B1 2D          	ACALL	TIMER_LOAD	;START THE TIMER
 1735:      04EE 30 8F FD       	JNB	TF1,$		;WAIT FOR PART TO PROGRAM
 1736:      04F1 E0             	movx	A,@DPTR 	;Read back for error dete
 1737:      04F2 6C             	xrl	A,R4		;Test for error
 1738:      04F3 60 02          	jz	PG31
 1739:      04F5 DD E9          	djnz	r5,ZRO
 1740:      04F7 22             PG31:	RET
 1741:                          	;
 1742:                          	;**************************************
 1743:                          	;
 1744:                          PGU:	;PROGRAM A PROM FOR THE USER (state
 1745:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 33



 Line    I  Addr Code           Source

 1746:                          	;**************************************
 1747:                          	;
 1748:      04F8 75 D0 18       	MOV	PSW,#00011000B	;SELECT RB3
 1749:      04FB BE 00 BE       	CJNE	R6,#0,PG10
 1750:      04FE 80 BD          	SJMP	PG1
 1751:                          ;
 1752:                          ;***************************************
 1753:                          ;****** The new command "ERASE" to fill 
 1754:                          ;****** Boehling 3 *********************
 1755:                          ;
 1756:      0500 7F 40          CERASE: mov	R7,#40H 		;Erase 16K byte
 1757:      0502 7E 00          	mov	R6,#00H
 1758:      0504 7A 7F          	mov	R2,#HIGH ROMADR-1	;Startaddress EEP
 1759:      0506 78 FF          	mov	R0,#LOW ROMADR-1
 1760:      0508 90 01 28       	mov	DPTR,#PROGS		;Point to EEPROM timei
 1761:      050B B1 82          	acall	LD_T			;Load the timer
 1762:                          	;
 1763:      050D 12 15 76       ERA1:	lcall	INC3210 		;Bump pointers
 1764:      0510 74 FF          	mov	A,#0FFH 		;Fill the EEPROM with 0FF
 1765:      0512 91 D9          	acall	PG7			;Write the byte
 1766:      0514 70 BA          	jnz	PG6			;Exit if error
 1767:      0516 DE F5          	DJNZ	R6,ERA1
 1768:      0518 DF F3          	DJNZ	R7,ERA1 		;Do the loop
 1769:      051A A1 40          	ajmp	C_K			;Exit to command mode
 1770:                          ;
 1771:                          ;***************************************
 1772:                          ;
 1773:                          ;****** continue with original code: ***
 1774:                          	;
 1775:                          	;**************************************
 1776:                          	;
 1777:                          CCAL:	; Set up for prom moves
 1778:                          	; R3:R1 gets source
 1779:                          	; R7:R6 gets # of bytes
 1780:                          	;
 1781:                          	;**************************************
 1782:                          	;
 1783:      051C B1 8A          	ACALL	GETEND		;GET THE LAST LOCATION
 1784:      051E A3             	INC	DPTR		;BUMP TO LOAD EOF
 1785:      051F AB 13          	MOV	R3,BOFAH
 1786:      0521 A9 14          	MOV	R1,BOFAL	;RESTORE START
 1787:      0523 C3             	CLR	C		;PREPARE FOR SUBB
 1788:      0524 E5 82          	MOV	A,DPL		;SUB DPTR - BOFA > R7:R6
 1789:      0526 99             	SUBB	A,R1
 1790:      0527 FE             	MOV	R6,A
 1791:      0528 E5 83          	MOV	A,DPH
 1792:      052A 9B             	SUBB	A,R3
 1793:      052B FF             	MOV	R7,A
 1794:      052C 22             CCAL1:	RET
 1795:                          	;
 1796:                          	;**************************************
 1797:                          	;
 1798:                          TIMER_LOAD:; Load the timer
 1799:                          	;
 1800:                          	;**************************************
 1801:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 34



 Line    I  Addr Code           Source

 1802:      052D B1 2C          	ACALL	CCAL1		;DELAY FOUR CLOCKS
 1803:                          TIMER_LOAD1:
 1804:      052F C2 8E          	CLR	TR1		;STOP IT WHILE IT'S LOADED
 1805:      0531 85 40 8D       	MOV	TH1,T_HH
 1806:      0534 85 41 8B       	MOV	TL1,T_LL
 1807:      0537 C2 8F          	CLR	TF1		;CLEAR THE OVERFLOW FLAG
 1808:      0539 D2 8E          	SETB	TR1		;START IT NOW
 1809:      053B 22             	RET
 1810:                          	;
 1811:                          	;**************************************
 1812:                          	;
 1813:                          CROM:	; The command action routine - ROM
 1814:                          	;
 1815:                          	;**************************************
 1816:                          	;
 1817:      053C C2 17          	CLR	CONB		;CAN'T CONTINUE IF MODE CHANG
 1818:      053E B1 43          	ACALL	RO1		;DO IT
 1819:                          	;
 1820:      0540 02 10 92       C_K:	LJMP	CL3		;EXIT
 1821:                          	;
 1822:                          ;RO1:	 CALL	 INTGER 	;SEE IF INTGER PRES
 1823:                          ;	 MOV	 R4,R0B0	;SAVE THE NUMBER
 1824:                          ;	 JNC	 $+4
 1825:                          ;	 MOV	 R4,#01H	;ONE IF NO INTEGER PRESE
 1826:                          ;	ACALL	ROMFD		;FIND THE PROGRAM
 1827:                          ;
 1828:      0543 12 0E E1       RO1:	CALL	DELTST
 1829:      0546 7C 01          	MOV	R4,#1
 1830:      0548 50 04          	JNC	RO11
 1831:      054A 12 0E 8E       	CALL	ONE
 1832:      054D FC             	MOV	R4,A
 1833:                          ;
 1834:      054E B1 5B          RO11:	ACALL	ROMFD
 1835:      0550 BC 00 11       	CJNE	R4,#0,RFX	;EXIT IF R4 <> 0
 1836:      0553 A3             	INC	DPTR		;BUMP PAST TAG
 1837:      0554 85 83 13       	MOV	BOFAH,DPH	;SAVE THE ADDRESS
 1838:      0557 85 82 14       	MOV	BOFAL,DPL
 1839:      055A 22             	RET
 1840:                          	;
 1841:      055B 90 80 10       ROMFD:	MOV	DPTR,#ROMADR+16 ;START OF USE
 1842:                          	;
 1843:      055E E0             RF1:	MOVX	A,@DPTR 	;GET THE BYTE
 1844:      055F B4 55 09       	CJNE	A,#55H,RF3	;SEE IF PROPER TAG
 1845:      0562 DC 01          	DJNZ	R4,RF2		;BUMP COUNTER
 1846:                          	;
 1847:      0564 22             RFX:	RET			;DPTR HAS THE START ADDRESS
 1848:                          	;
 1849:      0565 A3             RF2:	INC	DPTR		;BUMP PAST TAG
 1850:      0566 B1 AC          	ACALL	G5
 1851:      0568 A3             	INC	DPTR		;BUMP TO NEXT PROGRAM
 1852:      0569 80 F3          	SJMP	RF1		;DO IT AGAIN
 1853:                          	;
 1854:      056B 10 1D F6       RF3:	JBC	INBIT,RFX	;EXIT IF SET
 1855:                          	;
 1856:      056E 90 1F C9       NOGO:	MOV	DPTR,#NOROM
 1857:      0571 81 D6          	AJMP	ERRLK

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 35



 Line    I  Addr Code           Source

 1858:                          	;
 1859:                          	;**************************************
 1860:                          	;
 1861:                          L20DPI: ; load R2:R0 with the location t
 1862:                          	;
 1863:                          	;**************************************
 1864:                          	;
 1865:      0573 E0             	MOVX	A,@DPTR
 1866:      0574 FA             	MOV	R2,A
 1867:      0575 A3             	INC	DPTR
 1868:      0576 E0             	MOVX	A,@DPTR
 1869:      0577 F8             	MOV	R0,A
 1870:      0578 22             	RET			;DON'T BUMP DPTR
 1871:                          	;
 1872:                          	;**************************************
 1873:                          	;
 1874:                          X31DP:	; swap R3:R1 with DPTR
 1875:                          	;
 1876:                          	;**************************************
 1877:                          	;
 1878:      0579 CB             	XCH	A,R3
 1879:      057A C5 83          	XCH	A,DPH
 1880:      057C CB             	XCH	A,R3
 1881:      057D C9             	XCH	A,R1
 1882:      057E C5 82          	XCH	A,DPL
 1883:      0580 C9             	XCH	A,R1
 1884:      0581 22             	RET
 1885:                          	;
 1886:                          	;**************************************
 1887:                          	;
 1888:                          LD_T:	; Load the timer save location wit
 1889:                          	; pointing to.
 1890:                          	;
 1891:                          	;**************************************
 1892:                          	;
 1893:      0582 E0             	MOVX	A,@DPTR
 1894:      0583 F5 40          	MOV	T_HH,A
 1895:      0585 A3             	INC	DPTR
 1896:      0586 E0             	MOVX	A,@DPTR
 1897:      0587 F5 41          	MOV	T_LL,A
 1898:      0589 22             	RET
 1899:                          	;
 1900:                          	;
 1901:                          	;**************************************
 1902:                          	;
 1903:                          	;GETLIN - FIND THE LOCATION OF THE LINE
 1904:                          	;	  IF ACC = 0 THE LINE WAS NOT FOUND I
 1905:                          	;	  WAS TOO BIG, ELSE ACC <> 0 AND THE 
 1906:                          	;	  AT THE LINE THAT IS GREATER THAN OR
 1907:                          	;	  VALUE IN R3:R1.
 1908:                          	;
 1909:                          	;**************************************
 1910:                          	;
 1911:      058A D2 29          GETEND: SETB	ENDBIT		;GET THE END OF THE
 1912:                          	;
 1913:      058C 12 0E 9B       GETLIN: CALL	DP_B		;GET BEGINNING ADDRES

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 36



 Line    I  Addr Code           Source

 1914:                          	;
 1915:      058F 12 0A A4       G1:	CALL	B_C
 1916:      0592 60 12          	JZ	G3		;EXIT WITH A ZERO IN A IF AT END
 1917:      0594 A3             	INC	DPTR		;POINT AT THE LINE NUMBER
 1918:      0595 20 29 0A       	JB	ENDBIT,G2	;SEE IF WE WANT TO FIND TH
 1919:      0598 B1 CC          	ACALL	DCMPX		;SEE IF (DPTR) = R3:R1
 1920:      059A B1 C2          	ACALL	DECDP		;POINT AT LINE COUNT
 1921:      059C E0             	MOVX	A,@DPTR 	;PUT LINE LENGTH INTO ACC
 1922:      059D 20 2A 06       	JB	UBIT,G3 	;EXIT IF EQUAL
 1923:      05A0 40 04          	JC	G3		;SEE IF LESS THAN OR ZERO
 1924:                          	;
 1925:      05A2 B1 DE          G2:	ACALL	ADDPTR		;ADD IT TO DPTR
 1926:      05A4 80 E9          	SJMP	G1		;LOOP
 1927:                          	;
 1928:      05A6 C2 29          G3:	CLR	ENDBIT		;RESET ENDBIT
 1929:      05A8 22             	RET			;EXIT
 1930:                          	;
 1931:      05A9 90 02 00       G4:	MOV	DPTR,#PSTART	;DO RAM
 1932:                          	;
 1933:      05AC D2 29          G5:	SETB	ENDBIT
 1934:      05AE 80 DF          	SJMP	G1		;NOW DO TEST
 1935:                          	;
 1936:                          	;**************************************
 1937:                          	;
 1938:                          	; LDPTRI - Load the DATA POINTER with t
 1939:                          	;	   to - DPH = (DPTR) , DPL = (DPTR+1)
 1940:                          	;
 1941:                          	; acc gets wasted
 1942:                          	;
 1943:                          	;**************************************
 1944:                          	;
 1945:      05B0 E0             LDPTRI: MOVX	A,@DPTR 	;GET THE HIGH BYTE
 1946:      05B1 C0 E0          	PUSH	ACC		;SAVE IT
 1947:      05B3 A3             	INC	DPTR		;BUMP THE POINTER
 1948:      05B4 E0             	MOVX	A,@DPTR 	;GET THE LOW BYTE
 1949:      05B5 F5 82          	MOV	DPL,A		;PUT IT IN DPL
 1950:      05B7 D0 83          	POP	DPH		;GET THE HIGH BYTE
 1951:      05B9 22             	RET			;GO BACK
 1952:                          	;
 1953:                          	;**************************************
 1954:                          	;
 1955:                          	;L31DPI - LOAD R3 WITH (DPTR) AND R1 WI
 1956:                          	;
 1957:                          	;ACC GETS CLOBBERED
 1958:                          	;
 1959:                          	;**************************************
 1960:                          	;
 1961:      05BA E0             L31DPI: MOVX	A,@DPTR 	;GET THE HIGH BYTE
 1962:      05BB FB             	MOV	R3,A		;PUT IT IN THE REG
 1963:      05BC A3             	INC	DPTR		;BUMP THE POINTER
 1964:      05BD E0             	MOVX	A,@DPTR 	;GET THE NEXT BYTE
 1965:      05BE F9             	MOV	R1,A		;SAVE IT
 1966:      05BF 22             	RET
 1967:                          	;
 1968:                          	;**************************************
 1969:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 37



 Line    I  Addr Code           Source

 1970:                          	;DECDP - DECREMENT THE DATA POINTER - U
 1971:                          	;
 1972:                          	;**************************************
 1973:                          	;
 1974:      05C0 B1 C2          DECDP2: ACALL	DECDP
 1975:                          	;
 1976:      05C2 C5 82          DECDP:	XCH	A,DPL		;GET DPL
 1977:      05C4 70 02          	JNZ	DECDP1		;BUMP IF ZERO
 1978:      05C6 15 83          	DEC	DPH
 1979:      05C8 14             DECDP1: DEC	A		;DECREMENT IT
 1980:      05C9 C5 82          	XCH	A,DPL		;GET A BACK
 1981:      05CB 22             	RET			;EXIT
 1982:                          	;
 1983:                          	;**************************************
 1984:                          	;
 1985:                          	;DCMPX - DOUBLE COMPARE - COMPARE (DPTR
 1986:                          	;R3:R1 - (DPTR) = SET CARRY FLAG
 1987:                          	;
 1988:                          	;IF R3:R1 > (DPTR) THEN C = 0
 1989:                          	;IF R3:R1 < (DPTR) THEN C = 1
 1990:                          	;IF R3:R1 = (DPTR) THEN C = 0
 1991:                          	;
 1992:                          	;**************************************
 1993:                          	;
 1994:      05CC C2 2A          DCMPX:	CLR	UBIT		;ASSUME NOT EQUAL
 1995:      05CE E0             	MOVX	A,@DPTR 	;GET THE BYTE
 1996:      05CF B5 03 0A       	CJNE	A,R3B0,D1	;IF A IS GREATER THAN R3
 1997:                          				;WHICH IS R3<@DPTR = NO CARRY AND
 1998:                          				;R3>@DPTR CARRY IS SET
 1999:      05D2 A3             	INC	DPTR		;BUMP THE DATA POINTER
 2000:      05D3 E0             	MOVX	A,@DPTR 	;GET THE BYTE
 2001:      05D4 B1 C2          	ACALL	DECDP		;PUT DPTR BACK
 2002:      05D6 B5 01 03       	CJNE	A,R1B0,D1	;DO THE COMPARE
 2003:      05D9 B3             	CPL	C		;FLIP CARRY
 2004:                          	;
 2005:      05DA B2 2A          	CPL	UBIT		;SET IT
 2006:      05DC B3             D1:	CPL	C		;GET THE CARRY RIGHT
 2007:      05DD 22             	RET			;EXIT
 2008:                          	;
 2009:                          	;**************************************
 2010:                          	;
 2011:                          	; ADDPTR - Add acc to the dptr
 2012:                          	;
 2013:                          	; acc gets wasted
 2014:                          	;
 2015:                          	;**************************************
 2016:                          	;
 2017:      05DE 25 82          ADDPTR: ADD	A,DPL		;ADD THE ACC TO DPL
 2018:      05E0 F5 82          	MOV	DPL,A		;PUT IT IN DPL
 2019:      05E2 50 02          	JNC	ADDPTR1 	;JUMP IF NO CARRY
 2020:      05E4 05 83          	INC	DPH		;BUMP DPH
 2021:      05E6 22             ADDPTR1:RET			;EXIT
 2022:                          	;
 2023:                          	;**************************************
 2024:                          	;
 2025:                          LCLR:	; Set up the storage allocation

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 38



 Line    I  Addr Code           Source

 2026:                          	;
 2027:                          	;**************************************
 2028:                          	;
 2029:      05E7 D1 9A          	ACALL	ICLR		;CLEAR THE INTERRUPTS
 2030:      05E9 B1 A9          	ACALL	G4		;PUT END ADDRESS INTO DPTR
 2031:      05EB 74 06          	MOV	A,#6		;ADJUST MATRIX SPACE
 2032:      05ED B1 DE          	ACALL	ADDPTR		;ADD FOR PROPER BOUNDS
 2033:      05EF B1 79          	ACALL	X31DP		;PUT MATRIX BOUNDS IN R3:R
 2034:      05F1 90 01 08       	MOV	DPTR,#MT_ALL	;SAVE R3:R1 IN MATRIX 
 2035:      05F4 D1 05          	ACALL	S31DP		;DPTR POINTS TO MEMTOP
 2036:      05F6 B1 BA          	ACALL	L31DPI		;LOAD MEMTOP INTO R3:R1
 2037:      05F8 90 01 22       	MOV	DPTR,#STR_AL	;GET MEMORY ALLOCATED 
 2038:      05FB B1 B0          	ACALL	LDPTRI
 2039:      05FD 12 0A 02       	CALL	DUBSUB		;R3:R1 = MEMTOP - STRING A
 2040:      0600 90 01 04       	MOV	DPTR,#VARTOP	;SAVE R3:R1 IN VARTOP
 2041:                          	;
 2042:                          	; FALL THRU TO S31DP2
 2043:                          	;
 2044:                          	;**************************************
 2045:                          	;
 2046:                          	;S31DP - STORE R3 INTO (DPTR) AND R1 IN
 2047:                          	;
 2048:                          	;ACC GETS CLOBBERED
 2049:                          	;
 2050:                          	;**************************************
 2051:                          	;
 2052:      0603 D1 05          S31DP2: ACALL	S31DP		;DO IT TWICE
 2053:                          	;
 2054:      0605 EB             S31DP:	MOV	A,R3		;GET R3 INTO ACC
 2055:      0606 F0             	MOVX	@DPTR,A 	;STORE IT
 2056:      0607 A3             	INC	DPTR		;BUMP DPTR
 2057:      0608 E9             	MOV	A,R1		;GET R1
 2058:      0609 F0             	MOVX	@DPTR,A 	;STORE IT
 2059:      060A A3             	INC	DPTR		;BUMP IT AGAIN TO SAVE PROGRA
 2060:      060B 22             	RET			;GO BACK
 2061:                          	;
 2062:                          	;
 2063:                          	;**************************************
 2064:                          	;
 2065:                          STRING: ; Allocate memory for strings
 2066:                          	;
 2067:                          	;**************************************
 2068:                          	;
 2069:      060C 12 0E 85       	LCALL	TWO		;R3:R1 = NUMBER, R2:R0 = LEN
 2070:      060F 90 01 22       	MOV	DPTR,#STR_AL	;SAVE STRING ALLOCATIO
 2071:      0612 D1 05          	ACALL	S31DP
 2072:      0614 0E             	INC	R6		;BUMP
 2073:      0615 8E 3F          	MOV	S_LEN,R6	;SAVE STRING LENGTH
 2074:      0617 C1 64          	AJMP	RCLEAR		;CLEAR AND SET IT UP
 2075:                          	;
 2076:                          	;**************************************
 2077:                          	;
 2078:                          	; F_VAR - Find	the variable in symbol t
 2079:                          	;	  R7:R6 contain the variable name
 2080:                          	;	  If not found create a zero entry an
 2081:                          	;	  R2:R0 has the address of variable o

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 39



 Line    I  Addr Code           Source

 2082:                          	;
 2083:                          	;**************************************
 2084:                          	;
 2085:      0619 90 01 04       F_VAR:	MOV	DPTR,#VARTOP	;PUT VARTOP IN D
 2086:      061C B1 B0          	ACALL	LDPTRI
 2087:      061E B1 C0          	ACALL	DECDP2		;ADJUST DPTR FOR LOOKUP
 2088:                          	;
 2089:      0620 E0             F_VAR0: MOVX	A,@DPTR 	;LOAD THE VARIABLE
 2090:      0621 60 20          	JZ	F_VAR2		;TEST IF AT THE END OF THE T
 2091:      0623 A3             	INC	DPTR		;BUMP FOR NEXT BYTE
 2092:      0624 B5 07 0F       	CJNE	A,R7B0,F_VAR1	;SEE IF MATCH
 2093:      0627 E0             	MOVX	A,@DPTR 	;LOAD THE NAME
 2094:      0628 B5 06 0B       	CJNE	A,R6B0,F_VAR1
 2095:                          	;
 2096:                          	; Found the variable now adjust and put
 2097:                          	;
 2098:      062B E5 82          DLD:	MOV	A,DPL		;R2:R0 = DPTR-2
 2099:      062D 94 02          	SUBB	A,#2
 2100:      062F F8             	MOV	R0,A
 2101:      0630 E5 83          	MOV	A,DPH
 2102:      0632 94 00          	SUBB	A,#0		;CARRY IS CLEARED
 2103:      0634 FA             	MOV	R2,A
 2104:      0635 22             	RET
 2105:                          	;
 2106:      0636 E5 82          F_VAR1: MOV	A,DPL		;SUBTRACT THE STACK S
 2107:      0638 C3             	CLR	C
 2108:      0639 94 09          	SUBB	A,#STESIZ
 2109:      063B F5 82          	MOV	DPL,A		;RESTORE DPL
 2110:      063D 50 E1          	JNC	F_VAR0
 2111:      063F 15 83          	DEC	DPH
 2112:      0641 80 DD          	SJMP	F_VAR0		;CONTINUE COMPARE
 2113:                          	;
 2114:                          	;
 2115:                          	; Add the entry to the symbol table
 2116:                          	;
 2117:      0643 12 0D EF       F_VAR2: LCALL	R76S		;SAVE R7 AND R6
 2118:      0646 C3             	CLR	C
 2119:      0647 D1 2B          	ACALL	DLD		;BUMP THE POINTER TO GET ENT
 2120:                          	;
 2121:                          	; Adjust pointer and save storage alloc
 2122:                          	; and make sure we aren't wiping anythi
 2123:                          	; First calculate new storage allocatio
 2124:                          	;
 2125:      0649 E8             	MOV	A,R0
 2126:      064A 94 06          	SUBB	A,#STESIZ-3	;NEED THIS MUCH RAM
 2127:      064C F9             	MOV	R1,A
 2128:      064D EA             	MOV	A,R2
 2129:      064E 94 00          	SUBB	A,#0
 2130:      0650 FB             	MOV	R3,A
 2131:                          	;
 2132:                          	; Now save the new storage allocation
 2133:                          	;
 2134:      0651 90 01 06       	MOV	DPTR,#ST_ALL
 2135:      0654 D1 05          	CALL	S31DP		;SAVE STORAGE ALLOCATION
 2136:                          	;
 2137:                          	; Now make sure we didn't blow it, by w

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 40



 Line    I  Addr Code           Source

 2138:                          	;
 2139:      0656 B1 CC          	ACALL	DCMPX		;COMPARE STORAGE ALLOCATIO
 2140:      0658 40 32          	JC	CCLR3		;ERROR IF CARRY
 2141:      065A D3             	SETB	C		;DID NOT FIND ENTRY
 2142:      065B 22             	RET			;EXIT IF TEST IS OK
 2143:                          	;
 2144:                          	;**************************************
 2145:                          	;
 2146:                          	; Command action routine - NEW
 2147:                          	;
 2148:                          	;**************************************
 2149:                          	;
 2150:      065C 90 02 00       CNEW:	MOV	DPTR,#PSTART	;SAVE THE START O
 2151:      065F 74 01          	MOV	A,#EOF		;END OF FILE
 2152:      0661 F0             	MOVX	@DPTR,A 	;PUT IT IN MEMORY
 2153:                          	;
 2154:                          	; falls thru
 2155:                          	;
 2156:                          	;**************************************
 2157:                          	;
 2158:                          	; The statement action routine - CLEAR
 2159:                          	;
 2160:                          	;**************************************
 2161:                          	;
 2162:      0662 C2 15          CNEW1:	CLR	LINEB		;SET UP FOR RUN AND GO
 2163:                          	;
 2164:      0664 B1 E7          RCLEAR: ACALL	LCLR		;CLEAR THE INTERRUPT
 2165:      0666 90 01 0A       	MOV	DPTR,#MEMTOP	;PUT MEMTOP IN R3:R1
 2166:      0669 B1 BA          	ACALL	L31DPI
 2167:      066B B1 A9          	ACALL	G4		;DPTR GETS END ADDRESS
 2168:      066D D1 7D          	ACALL	CL_1		;CLEAR THE MEMORY
 2169:                          	;
 2170:      066F 90 00 FE       RC1:	MOV	DPTR,#STACKTP	;POINT AT CONTROL
 2171:      0672 E4             	CLR	A		;CONTROL UNDERFLOW
 2172:                          	;
 2173:      0673 F0             RC2:	MOVX	@DPTR,A 	;SAVE IN MEMORY
 2174:      0674 75 11 FE       	MOV	CSTKA,#STACKTP
 2175:      0677 75 09 FE       	MOV	ASTKA,#STACKTP
 2176:      067A C2 17          	CLR	CONB		;CAN'T CONTINUE
 2177:      067C 22             	RET
 2178:                          	;
 2179:                          	;**************************************
 2180:                          	;
 2181:                          	; Loop until the memory is cleared
 2182:                          	;
 2183:                          	;**************************************
 2184:                          	;
 2185:      067D A3             CL_1:	INC	DPTR		;BUMP MEMORY POINTER
 2186:      067E E4             	CLR	A		;CLEAR THE MEMORY
 2187:      067F F0             	MOVX	@DPTR,A 	;CLEAR THE RAM
 2188:      0680 E0             	MOVX	A,@DPTR 	;READ IT
 2189:      0681 70 09          	JNZ	CCLR3		;MAKE SURE IT IS CLEARED
 2190:      0683 EB             	MOV	A,R3		;GET POINTER FOR COMPARE
 2191:      0684 B5 83 F6       	CJNE	A,DPH,CL_1	;SEE TO LOOP
 2192:      0687 E9             	MOV	A,R1		;NOW TEST LOW BYTE
 2193:      0688 B5 82 F2       	CJNE	A,DPL,CL_1

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 41



 Line    I  Addr Code           Source

 2194:                          	;
 2195:      068B 22             CL_2:	RET
 2196:                          	;
 2197:      068C 02 15 B5       CCLR3:	JMP	TB		;ALLOCATED MEMORY DOESN'T
 2198:                          	;
 2199:                          	;**************************************
 2200:                          	;
 2201:                          SCLR:	;Entry point for clear return
 2202:                          	;
 2203:                          	;**************************************
 2204:                          	;
 2205:      068F 12 0E E1       	CALL	DELTST		;TEST FOR A CR
 2206:      0692 50 D0          	JNC	RCLEAR
 2207:      0694 12 0E D7       	CALL	GCI1		;BUMP THE TEST POINTER
 2208:      0697 B4 49 D5       	CJNE	A,#'I',RC1      ;SEE IF I, ELSE RE
 2209:                          	;
 2210:                          	;**************************************
 2211:                          	;
 2212:                          ICLR:	; Clear interrupts and system garb
 2213:                          	;
 2214:                          	;**************************************
 2215:                          	;
 2216:      069A 30 12 02       	JNB	INTBIT,ICLR1	;SEE IF BASIC HAS INTE
 2217:      069D C2 AA          	CLR	EX1		;IF SO, CLEAR INTERRUPTS
 2218:      069F 53 22 20       ICLR1:	ANL	34,#00100000B	;SET INTERRUPTS
 2219:      06A2 32             	RETI
 2220:                          	;
 2221:                          	;**************************************
 2222:                          	;
 2223:                          	;OUTPUT ROUTINES
 2224:                          	;
 2225:                          	;**************************************
 2226:                          	;
 2227:      06A3 D1 A5          CRLF2:	ACALL	CRLF		;DO TWO CRLF'S
 2228:                          	;
 2229:      06A5 7D 0D          CRLF:	MOV	R5,#CR		;LOAD THE CR
 2230:      06A7 F1 11          	ACALL	TEROT		;CALL TERMINAL OUT
 2231:      06A9 7D 0A          	MOV	R5,#LF		;LOAD THE LF
 2232:      06AB E1 11          	AJMP	TEROT		;OUTPUT IT AND RETURN
 2233:                          	;
 2234:                          	;PRINT THE MESSAGE ADDRESSED IN ROM OR 
 2235:                          	;ENDS WITH THE CHARACTER IN R4
 2236:                          	;DPTR HAS THE ADDRESS OF THE TERMINATOR
 2237:                          	;
 2238:      06AD D1 A5          CRP:	ACALL	CRLF		;DO A CR THEN PRINT ROM
 2239:                          	;
 2240:      06AF E4             ROM_P:	CLR	A		;CLEAR A FOR LOOKUP
 2241:      06B0 93             	MOVC	A,@A+DPTR	;GET THE CHARACTER
 2242:      06B1 C2 E7          	CLR	ACC.7		;CLEAR MS BIT
 2243:      06B3 B4 22 01       	CJNE	A,#'"',ROM_P1   ;EXIT IF TERMINATO
 2244:      06B6 22             	RET
 2245:      06B7 D2 34          ROM_P1: SETB	C0ORX1
 2246:                          	;
 2247:      06B9 FD             PN1:	MOV	R5,A		;OUTPUT THE CHARACTER
 2248:      06BA F1 11          	ACALL	TEROT
 2249:      06BC A3             	INC	DPTR		;BUMP THE POINTER

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 42



 Line    I  Addr Code           Source

 2250:      06BD 80 04          	SJMP	PN0
 2251:                          	;
 2252:      06BF B1 79          UPRNT:	ACALL	X31DP
 2253:                          	;
 2254:      06C1 7C 0D          PRNTCR: MOV	R4,#CR		;OUTPUT UNTIL A CR
 2255:                          	;
 2256:      06C3 10 34 E9       PN0:	JBC	C0ORX1,ROM_P
 2257:      06C6 E0             	MOVX	A,@DPTR 	;GET THE RAM BYTE
 2258:      06C7 60 03          	JZ	PN01
 2259:      06C9 B5 04 01       	CJNE	A,R4B0,PN02	;SEE IF THE SAME AS TE
 2260:      06CC 22             PN01:	RET			;EXIT IF THE SAME
 2261:      06CD B4 0D E9       PN02:	CJNE	A,#CR,PN1	;NEVER PRINT A CR I
 2262:      06D0 02 18 85       	LJMP	E1XX		;BAD SYNTAX
 2263:                          	;
 2264:                          	;**************************************
 2265:                          	;
 2266:                          	; INLINE - Input a line to IBUF, exit w
 2267:                          	;
 2268:                          	;**************************************
 2269:                          	;
 2270:      06D3 B4 04 16       INL2:	CJNE	A,#CNTRLD,INL2B ;SEE IF A CON
 2271:                          	;
 2272:      06D6 D1 A5          INL0:	ACALL	CRLF		;DO A CR
 2273:                          	;
 2274:      06D8 75 A0 00       INLINE: MOV	P2,#HIGH IBUF	;IBUF IS IN TH
 2275:      06DB 78 07          	MOV	R0,#LOW IBUF	;POINT AT THE INPUT BU
 2276:                          	;
 2277:      06DD F1 91          INL1:	ACALL	INCHAR		;GET A CHARACTER
 2278:      06DF FD             	MOV	R5,A		;SAVE IN R5 FOR OUTPUT
 2279:      06E0 B4 7F F0       	CJNE	A,#7FH,INL2	;SEE IF A DELETE CHARA
 2280:      06E3 B8 07 18       	CJNE	R0,#LOW IBUF,INL6
 2281:      06E6 7D 07          INL11:	MOV	R5,#BELL	;OUTPUT A BELL
 2282:                          	;
 2283:      06E8 F1 11          INLX:	ACALL	TEROT		;OUTPUT CHARACTER
 2284:      06EA 80 F1          	SJMP	INL1		;DO IT AGAIN
 2285:                          	;
 2286:      06EC F2             INL2B:	MOVX	@R0,A		;SAVE THE CHARACTER
 2287:      06ED B4 0D 02       	CJNE	A,#CR,INL2B1	;IS IT A CR
 2288:      06F0 C1 A5          	AJMP	CRLF		;OUTPUT A CRLF AND EXIT
 2289:      06F2 B4 20 00       INL2B1: CJNE	A,#20H,INL2B2
 2290:      06F5 40 F1          INL2B2: JC	INLX		;ONLY ECHO CONTROL CHAR
 2291:      06F7 08             	INC	R0		;BUMP THE POINTER
 2292:      06F8 B8 56 ED       	CJNE	R0,#IBUF+79,INLX
 2293:      06FB 18             	DEC	R0		;FORCE 79
 2294:      06FC 80 E8          	SJMP	INL11		;OUTPUT A BELL
 2295:                          	;
 2296:      06FE 18             INL6:	DEC	R0		;DEC THE RAM POINTER
 2297:      06FF 7D 08          	MOV	R5,#BS		;OUTPUT A BACK SPACE
 2298:      0701 F1 11          	ACALL	TEROT
 2299:      0703 F1 0F          	ACALL	STEROT		;OUTPUT A SPACE
 2300:      0705 7D 08          	MOV	R5,#BS		;ANOTHER BACK SPACE
 2301:      0707 80 DF          	SJMP	INLX		;OUTPUT IT
 2302:                          ;
 2303:                          ;***************************************
 2304:                          ;****** Use XTAL up to 47 MHz **********
 2305:                          ;****** Wulf 2 *************************

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 43



 Line    I  Addr Code           Source

 2306:                          ;
 2307:                          ;PTIME: DB	128-2		;PROM PROGRAMMER TIMER
 2308:                          ;	DB	00H
 2309:                          ;	DB	00H
 2310:                          ;	DB	50H
 2311:                          ;	DB	67H
 2312:                          ;	DB	41H
 2313:                          ;
 2314:      0709 7D             ptime:	db	128-3		;New programmer timer v
 2315:      070A 00             	db	00H		;divide by 5
 2316:      070B 00             	db	00H		;(50ms EPROM timeing to 10ms fo
 2317:      070C 00             	db	00H
 2318:      070D 35             	db	35H
 2319:      070E 83             	db	83H
 2320:                          ;
 2321:                          ;***************************************
 2322:                          ;
 2323:                          	;**************************************
 2324:                          	;
 2325:                          	; TEROT - Output a character to the sys
 2326:                          	;	  update PHEAD position.
 2327:                          	;
 2328:                          	;**************************************
 2329:                          	;
 2330:      070F 7D 20          STEROT: MOV	R5,#' '         ;OUTPUT A SP
 2331:                          	;
 2332:      0711 C0 E0          TEROT:	PUSH	ACC		;SAVE THE ACCUMULATOR
 2333:      0713 C0 83          	PUSH	DPH		;SAVE THE DPTR
 2334:      0715 C0 82          	PUSH	DPL
 2335:      0717 30 35 04       TEROT01:JNB	CNT_S,TEROT02	;WAIT FOR A CO
 2336:      071A F1 8D          	ACALL	BCK		;GET SERIAL STATUS
 2337:      071C 80 F9          	SJMP	TEROT01
 2338:      071E ED             TEROT02:MOV	A,R5		;PUT OUTPUT BYTE IN A
 2339:      071F 30 2C 05       	JNB	BO,TEROT03	;CHECK FOR MONITOR
 2340:      0722 12 20 40       	LCALL	2040H		;DO THE MONITOR
 2341:      0725 E1 66          	AJMP	TEROT1		;CLEAN UP
 2342:      0727 30 1C 05       TEROT03:JNB	COUB,TEROT04	;SEE IF USER WA
 2343:      072A 12 40 30       	LCALL	4030H
 2344:      072D E1 66          	AJMP	TEROT1
 2345:      072F 30 27 08       TEROT04:JNB	UPB,T_1 	;NO AT IF NO XBIT
 2346:      0732 30 19 05       	JNB	LPB,T_1 	;AT PRINT
 2347:      0735 12 40 3C       	LCALL	403CH		;CALL AT LOCATION
 2348:      0738 E1 66          	AJMP	TEROT1		;FINISH OFF OUTPUT
 2349:                          	;
 2350:      073A 30 1B 22       T_1:	JNB	COB,TXX 	;SEE IF LIST SET
 2351:      073D 90 01 24       	MOV	DPTR,#SPV	;LOAD BAUD RATE
 2352:      0740 B1 82          	ACALL	LD_T
 2353:      0742 C2 97          	CLR	LP		;OUTPUT START BIT
 2354:      0744 B1 2D          	ACALL	TIMER_LOAD	;LOAD AND START THE TI
 2355:      0746 ED             	MOV	A,R5		;GET THE OUTPUT BYTE
 2356:      0747 D3             	SETB	C		;SET CARRY FOR LAST OUTPUT
 2357:      0748 7D 09          	MOV	R5,#9		;LOAD TIMER COUNTDOWN
 2358:                          	;
 2359:      074A 13             LTOUT1: RRC	A		;ROTATE A
 2360:      074B 30 8F FD       	JNB	TF1,$		;WAIT TILL TIMER READY
 2361:      074E 92 97          	MOV	LP,C		;OUTPUT THE BIT

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 44



 Line    I  Addr Code           Source

 2362:      0750 B1 2D          	ACALL	TIMER_LOAD	;DO THE NEXT BIT
 2363:      0752 DD F6          	DJNZ	R5,LTOUT1	;LOOP UNTIL DONE
 2364:      0754 30 8F FD       	JNB	TF1,$		;FIRST STOP BIT
 2365:      0757 B1 2D          	ACALL	TIMER_LOAD
 2366:      0759 30 8F FD       	JNB	TF1,$		;SECOND STOP BIT
 2367:      075C FD             	MOV	R5,A		;RESTORE R5
 2368:      075D 80 07          	SJMP	TEROT1		;BACK TO TEROT
 2369:                          	;
 2370:      075F 30 99 FD       TXX:	JNB	TI,$		;WAIT FOR TRANSMIT READY
 2371:      0762 C2 99          	CLR	TI
 2372:      0764 8D 99          	MOV	SBUF,R5 	;SEND OUT THE CHARACTER
 2373:                          	;
 2374:      0766 BD 0D 03       TEROT1: CJNE	R5,#CR,TEROT11	;SEE IF A CR
 2375:      0769 75 16 00       	MOV	PHEAD,#00H	;IF A CR, RESET PHEAD AN
 2376:                          	;
 2377:      076C BD 0A 0B       TEROT11:CJNE	R5,#LF,NLC	;SEE IF A LF
 2378:      076F E5 15          	MOV	A,NULLCT	;GET THE NULL COUNT
 2379:      0771 60 07          	JZ	NLC		;NO NULLS IF ZERO
 2380:                          	;
 2381:      0773 7D 00          TEROT2: MOV	R5,#NULL	;PUT THE NULL IN TH
 2382:      0775 F1 11          	ACALL	TEROT		;OUTPUT THE NULL
 2383:      0777 14             	DEC	A		;DECREMENT NULL COUNT
 2384:      0778 70 F9          	JNZ	TEROT2		;LOOP UNTIL DONE
 2385:                          	;
 2386:      077A BD 08 02       NLC:	CJNE	R5,#BS,NLC1	;DEC PHEAD IF A BA
 2387:      077D 15 16          	DEC	PHEAD
 2388:      077F BD 20 00       NLC1:	CJNE	R5,#20H,NLC2	;IS IT A PRINTAB
 2389:      0782 40 02          NLC2:	JC	NLC3		;DON'T INCREMENT PHEAD IF
 2390:      0784 05 16          	INC	PHEAD		;BUMP PRINT HEAD
 2391:      0786 D0 82          NLC3:	POP	DPL		;RESTORE DPTR
 2392:      0788 D0 83          	POP	DPH
 2393:      078A D0 E0          	POP	ACC		;RESTORE ACC
 2394:      078C 22             	RET			;EXIT
 2395:                          	;
 2396:      078D F1 C8          BCK:	ACALL	CSTS		;CHECK STATUS
 2397:      078F 50 2E          	JNC	CI_RET1 	;EXIT IF NO CHARACTER
 2398:                          	;
 2399:                          	;**************************************
 2400:                          	;
 2401:                          	;INPUTS A CHARACTER FROM THE SYSTEM CON
 2402:                          	;
 2403:                          	;**************************************
 2404:                          	;
 2405:      0791 30 32 05       INCHAR: JNB	BI,INCHAR1	;CHECK FOR MONITO
 2406:      0794 12 20 60       	LCALL	2060H
 2407:      0797 80 11          	SJMP	INCH1
 2408:      0799 30 1E 05       INCHAR1:JNB	CIUB,INCHAR2	;CHECK FOR USER
 2409:      079C 12 40 33       	LCALL	4033H
 2410:      079F 80 09          	SJMP	INCH1
 2411:      07A1 30 98 FD       INCHAR2:JNB	RI,$		;WAIT FOR RECEIVER REA
 2412:      07A4 E5 99          	MOV	A,SBUF
 2413:      07A6 C2 98          	CLR	RI		;RESET READY
 2414:      07A8 C2 E7          	CLR	ACC.7		;NO BIT 7
 2415:                          	;
 2416:      07AA B4 13 02       INCH1:	CJNE	A,#13H,INCH11
 2417:      07AD D2 35          	SETB	CNT_S

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 45



 Line    I  Addr Code           Source

 2418:      07AF B4 11 02       INCH11: CJNE	A,#11H,INCH12
 2419:      07B2 C2 35          	CLR	CNT_S
 2420:      07B4 B4 03 04       INCH12: CJNE	A,#CNTRLC,INCH13
 2421:      07B7 30 30 1D       	JNB	NO_C,C_EX	;TRAP NO CONTROL C
 2422:      07BA 22             	RET
 2423:                          	;
 2424:                          ;
 2425:                          ;***************************************
 2426:                          ;****** Sorry - but the ego message had 
 2427:                          ;
 2428:                          INCH13:
 2429:                          ;	CLR	JKBIT
 2430:      07BB B4 17 00       	CJNE	A,#17H,CI_RET	;CONTROL W
 2431:                          ;	SETB	JKBIT
 2432:                          ;
 2433:                          ;***************************************
 2434:                          	;
 2435:      07BE D3             CI_RET: SETB	C		;CARRY SET IF A CHARACTE
 2436:      07BF 22             CI_RET1:RET			;EXIT
 2437:                          	;
 2438:                          	;**************************************
 2439:                          	;
 2440:                          	;RROM - The Statement Action Routine RR
 2441:                          	;
 2442:                          	;**************************************
 2443:                          	;
 2444:      07C0 D2 1D          RROM:	SETB	INBIT		;SO NO ERRORS
 2445:      07C2 B1 43          	ACALL	RO1		;FIND THE LINE NUMBER
 2446:      07C4 10 1D 3B       	JBC	INBIT,CRUN
 2447:      07C7 22             	RET			;EXIT
 2448:                          	;
 2449:                          	;**************************************
 2450:                          	;
 2451:                          CSTS:	;	RETURNS CARRY = 1 IF THERE IS A 
 2452:                          	;	THE SYSTEM CONSOLE. IF NO CHARACTER T
 2453:                          	;	WILL BE CLEARED
 2454:                          	;
 2455:                          	;**************************************
 2456:                          	;
 2457:      07C8 30 32 03       	JNB	BI,CSTS1	;BUBBLE STATUS
 2458:      07CB 02 20 68       	LJMP	2068H
 2459:      07CE 30 1E 03       CSTS1:	JNB	CIUB,CSTS2	;SEE IF EXTERNAL C
 2460:      07D1 02 40 36       	LJMP	4036H
 2461:      07D4 A2 98          CSTS2:	MOV	C,RI
 2462:      07D6 22             	RET
 2463:                          	;
 2464:                          ;
 2465:                          ;***************************************
 2466:                          ;****** Sorry - but the ego message had 
 2467:                          ;
 2468:                          ;C_EX0:  MOV	 DPTR,#WB	 ;EGO MESSAGE
 2469:                          ;	 ACALL	 ROM_P
 2470:                          ;
 2471:                          ;***************************************
 2472:                          	;
 2473:      07D7 C2 35          C_EX:	CLR	CNT_S		;NO OUTPUT STOP

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 46



 Line    I  Addr Code           Source

 2474:      07D9 12 0C 31       	LCALL	SPRINT1 	;ASSURE CONSOLE
 2475:      07DC D1 A5          	ACALL	CRLF
 2476:                          ;
 2477:                          ;***************************************
 2478:                          ;****** Sorry - but the ego message had 
 2479:                          ;
 2480:                          ;	 JBC	 JKBIT,C_EX0
 2481:                          ;
 2482:                          ;***************************************
 2483:                          ;
 2484:      07DE 30 2F 7F       	JNB	DIRF,SSTOP0
 2485:      07E1 A1 40          	AJMP	C_K		;CLEAR COB AND EXIT
 2486:                          	;
 2487:      07E3 E5 48          T_CMP:	MOV	A,TVH		;COMPARE TIMER TO SP_H
 2488:      07E5 A9 49          	MOV	R1,TVL
 2489:      07E7 B5 48 F9       	CJNE	A,TVH,T_CMP
 2490:      07EA C9             	XCH	A,R1
 2491:      07EB 95 4C          	SUBB	A,SP_L
 2492:      07ED E9             	MOV	A,R1
 2493:      07EE 95 4B          	SUBB	A,SP_H
 2494:      07F0 22             	RET
 2495:                          	;
 2496:                          	;**************************************
 2497:                          	;
 2498:                          BR0:	; Trap the timer interrupt
 2499:                          	;
 2500:                          	;**************************************
 2501:                          	;
 2502:      07F1 F1 E3          	CALL	T_CMP		;COMPARE TIMER
 2503:      07F3 40 40          	JC	BCHR1		;EXIT IF TEST FAILS
 2504:      07F5 D2 14          	SETB	OTI		;DOING THE TIMER INTERRUPT
 2505:      07F7 C2 10          	CLR	OTS		;CLEAR TIMER BIT
 2506:      07F9 A2 11          	MOV	C,INPROG	;SAVE IN PROGRESS
 2507:      07FB 92 2B          	MOV	ISAV,C
 2508:      07FD 90 01 26       	MOV	DPTR,#TIV
 2509:      0800 80 3C          	SJMP	BR2
 2510:                          	;
 2511:                          	;**************************************
 2512:                          	;
 2513:                          	; The command action routine - RUN
 2514:                          	;
 2515:                          	;**************************************
 2516:                          	;
 2517:      0802 12 06 62       CRUN:	LCALL	CNEW1		;CLEAR THE STORAGE AR
 2518:      0805 71 D0          	ACALL	SRESTR1 	;GET THE STARTING ADDRES
 2519:      0807 51 A4          	ACALL	B_C
 2520:      0809 60 4A          	JZ	CMNDLK		;IF NULL GO TO COMMAND MODE
 2521:                          	;
 2522:      080B D1 B8          	ACALL	T_DP
 2523:      080D F1 23          	ACALL	B_TXA		;BUMP TO STARTING LINE
 2524:                          	;
 2525:      080F 91 3C          CILOOP: ACALL	SP0		;DO A CR AND A LF
 2526:      0811 C2 2F          CILOOP1:CLR	DIRF		;NOT IN DIRECT MODE
 2527:                          	;
 2528:                          	;INTERPERTER DRIVER
 2529:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 47



 Line    I  Addr Code           Source

 2530:      0813 85 3E 81       ILOOP:	MOV	SP,SPSAV	;RESTORE THE STACK E
 2531:      0816 20 2F 06       	JB	DIRF,ILOOP1	;NO INTERRUPTS IF IN DIR
 2532:      0819 85 0A 42       	MOV	INTXAH,TXAH	;SAVE THE TEXT POINTER
 2533:      081C 85 08 43       	MOV	INTXAL,TXAL
 2534:      081F 12 07 8D       ILOOP1: LCALL	BCK		;GET CONSOLE STATUS
 2535:      0822 20 2F 24       	JB	DIRF,I_L	;DIRECT MODE
 2536:      0825 B0 18          	ANL	C,/GTRD 	;SEE IF CHARACTER READY
 2537:      0827 50 06          	JNC	BCHR		;NO CHARACTER = NO CARRY
 2538:                          	;
 2539:                          	; DO TRAP OPERATION
 2540:                          	;
 2541:      0829 90 01 00       	MOV	DPTR,#GTB	;SAVE TRAP CHARACTER
 2542:      082C F0             	MOVX	@DPTR,A
 2543:      082D D2 18          	SETB	GTRD		;SAYS READ A BYTE
 2544:                          	;
 2545:      082F 20 14 17       BCHR:	JB	OTI,I_L 	;EXIT IF TIMER INTERRU
 2546:      0832 20 10 BC       	JB	OTS,BR0 	;TEST TIMER VALUE IF SET
 2547:      0835 30 16 11       BCHR1:	JNB	INTPEN,I_L	;SEE IF INTERRUPT 
 2548:      0838 20 11 0E       	JB	INPROG,I_L	;DON'T DO IT AGAIN IF IN 
 2549:      083B 90 01 20       	MOV	DPTR,#INTLOC	;POINT AT INTERRUPT LO
 2550:                          	;
 2551:      083E 7C 02          BR2:	MOV	R4,#GTYPE	;SETUP FOR A FORCED G
 2552:      0840 71 35          	ACALL	SGS1		;PUT TXA ON STACK
 2553:      0842 D2 11          	SETB	INPROG		;INTERRUPT IN PROGRESS
 2554:                          	;
 2555:      0844 12 05 73       ERL4:	CALL	L20DPI
 2556:      0847 41 F8          	AJMP	D_L1		;GET THE LINE NUMBER
 2557:                          	;
 2558:      0849 11 F8          I_L:	ACALL	ISTAT		;LOOP
 2559:      084B F1 17          	ACALL	CLN_UP		;FINISH IT OFF
 2560:      084D 50 C4          	JNC	ILOOP		;LOOP ON THE DRIVER
 2561:      084F 30 2F 03       	JNB	DIRF,CMNDLK	;CMND1 IF IN RUN MODE
 2562:      0852 02 17 94       	LJMP	CMNDR		;DON'T PRINT READY
 2563:                          	;
 2564:      0855 02 17 87       CMNDLK: JMP	CMND1		;DONE
 2565:                          	;**************************************
 2566:                          	;
 2567:                          	; The Statement Action Routine - STOP
 2568:                          	;
 2569:                          	;**************************************
 2570:                          	;
 2571:      0858 F1 17          SSTOP:	ACALL	CLN_UP		;FINISH OFF THIS LI
 2572:      085A 85 0A 42       	MOV	INTXAH,TXAH	;SAVE TEXT POINTER FOR 
 2573:      085D 85 08 43       	MOV	INTXAL,TXAL
 2574:                          	;
 2575:      0860 D2 17          SSTOP0: SETB	CONB		;CONTINUE WILL WORK
 2576:      0862 90 00 EE       	MOV	DPTR,#STP	;PRINT THE STOP MESSAGE
 2577:      0865 D2 20          	SETB	STOPBIT 	;SET FOR ERROR ROUTINE
 2578:      0867 02 18 AD       	JMP	ERRS		;JUMP TO ERROR ROUTINE
 2579:                          	;
 2580:                          	;**************************************
 2581:                          	;
 2582:                          	; ITRAP - Trap special function registe
 2583:                          	;
 2584:                          	;**************************************
 2585:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 48



 Line    I  Addr Code           Source

 2586:      086A B4 C8 05       ITRAP:	CJNE	A,#TMR0,ITRAP1	;TIMER 0
 2587:      086D 8B 8C          	MOV	TH0,R3
 2588:      086F 89 8A          	MOV	TL0,R1
 2589:      0871 22             	RET
 2590:                          	;
 2591:      0872 B4 C9 05       ITRAP1: CJNE	A,#TMR1,ITRAP2	;TIMER 1
 2592:      0875 8B 8D          	MOV	TH1,R3
 2593:      0877 89 8B          	MOV	TL1,R1
 2594:      0879 22             	RET
 2595:                          	;
 2596:      087A B4 CA 05       ITRAP2: CJNE	A,#TMR2,ITRAP3	;TIMER 2
 2597:      087D 8B CD          ITRAP21:MOV	TH2,R3
 2598:      087F 89 CC          	MOV	TL2,R1
 2599:                          ;	DB	8BH		;MOV R3 DIRECT OP CODE
 2600:                          ;	DB	0CDH		;T2H LOCATION
 2601:                          ;	DB	89H		;MOV R1 DIRECT OP CODE
 2602:                          ;	DB	0CCH		;T2L LOCATION
 2603:      0881 22             	RET
 2604:                          	;
 2605:      0882 B4 CE 05       ITRAP3: CJNE	A,#TRC2,RCL1	;RCAP2 TOKEN
 2606:      0885 8B CB          RCL:	MOV	RCAPH2,R3
 2607:      0887 89 CA          	MOV	RCAPL2,R1
 2608:                          ;	DB	8BH		;MOV R3 DIRECT OP CODE
 2609:                          ;	DB	0CBH		;RCAP2H LOCATION
 2610:                          ;	DB	89H		;MOV R1 DIRECT OP CODE
 2611:                          ;	DB	0CAH		;RCAP2L LOCATION
 2612:      0889 22             	RET
 2613:                          	;
 2614:      088A 31 D5          RCL1:	ACALL	R3CK		;MAKE SURE THAT R3 IS 
 2615:      088C B4 CB 03       	CJNE	A,#TT2C,RCL2
 2616:      088F 89 C8          	MOV	T2CON,R1
 2617:                          ;	DB	89H		;MOV R1 DIRECT OP CODE
 2618:                          ;	DB	0C8H		;T2CON LOCATION
 2619:      0891 22             	RET
 2620:                          	;
 2621:      0892 B4 C6 03       RCL2:	CJNE	A,#T_IE,RCL3	;IE TOKEN
 2622:      0895 89 A8          	MOV	IE,R1
 2623:      0897 22             	RET
 2624:                          	;
 2625:      0898 B4 C7 03       RCL3:	CJNE	A,#T_IP,RCL4	;IP TOKEN
 2626:      089B 89 B8          	MOV	IP,R1
 2627:      089D 22             	RET
 2628:                          	;
 2629:      089E B4 CC 03       RCL4:	CJNE	A,#TTC,RCL5	;TCON TOKEN
 2630:      08A1 89 88          	MOV	TCON,R1
 2631:      08A3 22             	RET
 2632:                          	;
 2633:      08A4 B4 CD 03       RCL5:	CJNE	A,#TTM,RCL6	;TMOD TOKEN
 2634:      08A7 89 89          	MOV	TMOD,R1
 2635:      08A9 22             	RET
 2636:                          	;
 2637:      08AA B4 CF 32       RCL6:	CJNE	A,#T_P1,T_T2	;P1 TOKEN
 2638:      08AD 89 90          	MOV	P1,R1
 2639:      08AF 22             	RET
 2640:                          	;
 2641:                          	;**************************************

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 49



 Line    I  Addr Code           Source

 2642:                          	;
 2643:                          	; T_TRAP - Trap special operators
 2644:                          	;
 2645:                          	;**************************************
 2646:                          	;
 2647:      08B0 F5 0F          T_T:	MOV	TEMP5,A 	;SAVE THE TOKEN
 2648:      08B2 D1 D7          	ACALL	GCI1		;BUMP POINTER
 2649:      08B4 31 C8          	ACALL	SLET2		;EVALUATE AFTER =
 2650:      08B6 E5 0F          	MOV	A,TEMP5 	;GET THE TOKEN BACK
 2651:      08B8 B4 C3 03       	CJNE	A,#T_XTAL,T_T01
 2652:      08BB 02 16 5C       	LJMP	AXTAL1		;SET UP CRYSTAL
 2653:                          	;
 2654:      08BE D1 90          T_T01:	ACALL	IFIXL		;R3:R1 HAS THE TOS
 2655:      08C0 E5 0F          	MOV	A,TEMP5 	;GET THE TOKEN AGAIN
 2656:      08C2 B4 C4 09       	CJNE	A,#T_MTOP,T_T1	;SEE IF MTOP TOKEN
 2657:      08C5 90 01 0A       	MOV	DPTR,#MEMTOP
 2658:      08C8 12 06 05       	CALL	S31DP
 2659:      08CB 02 06 64       	JMP	RCLEAR		;CLEAR THE MEMORY
 2660:                          	;
 2661:      08CE B4 C5 99       T_T1:	CJNE	A,#T_TIME,ITRAP ;SEE IF A TIM
 2662:      08D1 A2 AF          	MOV	C,EA		;SAVE INTERRUPTS
 2663:      08D3 C2 AF          	CLR	EA		;NO TIMER 0 INTERRUPTS DURING L
 2664:      08D5 8B 48          	MOV	TVH,R3		;SAVE THE TIME
 2665:      08D7 89 49          	MOV	TVL,R1
 2666:                          ;
 2667:                          ;***************************************
 2668:                          ;****** Reset millisecond counter on "TI
 2669:                          ;****** Boehling 2 *********************
 2670:                          ;
 2671:      08D9 75 47 00       	mov	MILLIV,#0	;Reset millisecond counte
 2672:                          ;
 2673:                          ;***************************************
 2674:                          ;
 2675:      08DC 92 AF          	MOV	EA,C		;RESTORE INTERRUPTS
 2676:      08DE 22             	RET			;EXIT
 2677:                          	;
 2678:      08DF B4 D0 56       T_T2:	CJNE	A,#T_PC,INTERX	;PCON TOKEN
 2679:      08E2 89 87          	MOV	PCON,R1
 2680:                          ;	DB	89H		;MOV DIRECT, R1 OP CODE
 2681:                          ;	DB	87H		;ADDRESS OF PCON
 2682:      08E4 22             	RET			;EXIT
 2683:                          	;
 2684:      08E5 B4 D1 C8       T_TRAP: CJNE	A,#T_ASC,T_T	;SEE IF ASC TO
 2685:      08E8 D1 CB          	ACALL	IGC		;EAT IT AND GET THE NEXT CHA
 2686:      08EA B4 24 4B       	CJNE	A,#'$',INTERX   ;ERROR IF NOT A ST
 2687:      08ED 51 1E          	ACALL	CSY		;CALCULATE ADDRESS
 2688:      08EF B1 AD          	ACALL	X3120
 2689:      08F1 12 14 B4       	CALL	TWO_EY
 2690:      08F4 31 DD          	ACALL	SPEOP1		;EVALUATE AFTER EQUALS
 2691:      08F6 21 21          	AJMP	ISTAX1		;SAVE THE CHARACTER
 2692:                          	;
 2693:                          	;**************************************
 2694:                          	;
 2695:                          	;INTERPERT THE STATEMENT POINTED TO BY 
 2696:                          	;
 2697:                          	;**************************************

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 50



 Line    I  Addr Code           Source

 2698:                          	;
 2699:      08F8 D1 CD          ISTAT:	ACALL	GC		;GET THR FIRST CHARACTE
 2700:      08FA 30 2D 0E       	JNB	XBIT,IAT	;TRAP TO EXTERNAL RUN PACK
 2701:      08FD B4 20 00       	CJNE	A,#20H,ISTAT1
 2702:      0900 50 09          ISTAT1: JNC	IAT
 2703:      0902 12 20 70       	LCALL	2070H		;LET THE USER SET UP THE D
 2704:      0905 D1 D7          	ACALL	GCI1
 2705:      0907 54 0F          	ANL	A,#0FH		;STRIP OFF BIAS
 2706:      0909 80 51          	SJMP	ISTA1
 2707:                          	;
 2708:      090B B4 C3 00       IAT:	CJNE	A,#T_XTAL,IAT1
 2709:      090E 50 D5          IAT1:	JNC	T_TRAP
 2710:      0910 30 E7 5B       	JNB	ACC.7,SLET	;IMPLIED LET IF BIT 7 NO
 2711:      0913 B4 BC 06       	CJNE	A,#T_UOP+12,ISTAX	;DBYTE TOKEN
 2712:      0916 31 D9          	ACALL	SPEOP		;EVALUATE SPECIAL OPERATOR
 2713:      0918 31 D5          	ACALL	R3CK		;CHECK LOCATION
 2714:      091A F7             	MOV	@R1,A		;SAVE IT
 2715:      091B 22             	RET
 2716:                          	;
 2717:      091C B4 BD 06       ISTAX:	CJNE	A,#T_UOP+13,ISTAY	;XBYTE TOK
 2718:      091F 31 D9          	ACALL	SPEOP
 2719:                          	;
 2720:      0921 8B A0          ISTAX1: MOV	P2,R3
 2721:      0923 F3             	MOVX	@R1,A
 2722:      0924 22             	RET
 2723:                          	;
 2724:      0925 B4 AB 00       ISTAY:	CJNE	A,#T_CR+1,ISTAY1;TRAP NEW OP
 2725:      0928 40 09          ISTAY1: JC	I_S
 2726:      092A B4 B0 00       	CJNE	A,#0B0H,ISTAY2	;SEE IF TOO BIG
 2727:      092D 50 09          ISTAY2: JNC	INTERX
 2728:      092F 24 F9          	ADD	A,#0F9H 	;BIAS FOR LOOKUP TABLE
 2729:      0931 80 1D          	SJMP	ISTA0		;DO THE OPERATION
 2730:                          	;
 2731:      0933 B4 A4 00       I_S:	CJNE	A,#T_LAST,I_S1	;MAKE SURE AN I
 2732:      0936 40 03          I_S1:	JC	INTERX1 	;ERROR IF NOT
 2733:                          	;
 2734:      0938 02 18 85       INTERX: LJMP	E1XX		;SYNTAX ERROR
 2735:                          	;
 2736:      093B 30 2F 12       INTERX1:JNB	DIRF,ISTA0	;EXECUTE ALL STAT
 2737:      093E B4 90 00       	CJNE	A,#T_DIR,INTERX2;SEE IF ON TOKEN
 2738:      0941 40 0D          INTERX2:JC	ISTA0		;OK IF DIRECT
 2739:      0943 B4 A0 02       	CJNE	A,#T_GOSB+1,INTERX3;SEE IF FOR
 2740:      0946 80 08          	SJMP	ISTA0		;FOR IS OK
 2741:      0948 B4 97 02       INTERX3:CJNE	A,#T_REM+1,INTERX4	;NEXT IS
 2742:      094B 80 03          	SJMP	ISTA0
 2743:      094D B4 96 E8       INTERX4:CJNE	A,#T_STOP+6,INTERX	;SO IS R
 2744:                          	;
 2745:      0950 D1 D7          ISTA0:	ACALL	GCI1		;ADVANCE THE TEXT POI
 2746:      0952 90 01 23       	MOV	DPTR,#STATD	;POINT DPTR TO LOOKUP T
 2747:      0955 B4 80 02       	CJNE	A,#T_GOTO-3,ISTA01;SEE IF LET TOKE
 2748:      0958 80 9E          	SJMP	ISTAT		;WASTE LET TOKEN
 2749:      095A 54 3F          ISTA01: ANL	A,#3FH		;STRIP OFF THE GARBA
 2750:                          	;
 2751:      095C 23             ISTA1:	RL	A		;ROTATE FOR OFFSET
 2752:      095D 25 82          	ADD	A,DPL		;BUMP
 2753:      095F F5 82          	MOV	DPL,A		;SAVE IT

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 51



 Line    I  Addr Code           Source

 2754:      0961 E4             	CLR	A
 2755:      0962 93             	MOVC	A,@A+DPTR	;GET HIGH BYTE
 2756:      0963 C0 E0          	PUSH	ACC		;SAVE IT
 2757:      0965 A3             	INC	DPTR
 2758:      0966 E4             	CLR	A
 2759:      0967 93             	MOVC	A,@A+DPTR	;GET LOW BYTE
 2760:      0968 D0 83          	POP	DPH
 2761:      096A F5 82          	MOV	DPL,A
 2762:                          	;
 2763:      096C E4             AC1:	CLR	A
 2764:      096D 73             	JMP	@A+DPTR 	;GO DO IT
 2765:                          	;
 2766:                          	;**************************************
 2767:                          	;
 2768:                          	; The statement action routine - LET
 2769:                          	;
 2770:                          	;**************************************
 2771:                          	;
 2772:      096E D1 BF          SLET:	ACALL	S_C		;CHECK FOR POSSIBLE STR
 2773:      0970 40 50          	JC	SLET0		;NO STRING
 2774:      0972 C2 15          	CLR	LINEB		;USED STRINGS
 2775:                          	;
 2776:      0974 12 05 79       	CALL	X31DP		;PUT ADDRESS IN DPTR
 2777:      0977 7F EA          	MOV	R7,#T_EQU	;WASTE =
 2778:      0979 91 E5          	ACALL	EATC
 2779:      097B D1 CD          	ACALL	GC		;GET THE NEXT CHARACTER
 2780:      097D B4 22 11       	CJNE	A,#'"',S_3      ;CHECK FOR A "
 2781:      0980 AF 3F          	MOV	R7,S_LEN	;GET THE STRING LENGTH
 2782:                          	;
 2783:      0982 D1 D7          S_0:	ACALL	GCI1		;BUMP PAST "
 2784:      0984 D1 E1          	ACALL	DELTST		;CHECK FOR DELIMITER
 2785:      0986 60 B0          	JZ	INTERX		;EXIT IF CARRIAGE RETURN
 2786:      0988 F0             	MOVX	@DPTR,A 	;SAVE THE CHARACTER
 2787:      0989 B4 22 26       	CJNE	A,#'"',S_1      ;SEE IF DONE
 2788:                          	;
 2789:      098C 74 0D          S_E:	MOV	A,#CR		;PUT A CR IN A
 2790:      098E F0             	MOVX	@DPTR,A 	;SAVE CR
 2791:      098F C1 D7          	AJMP	GCI1
 2792:                          	;
 2793:      0991 C0 83          S_3:	PUSH	DPH
 2794:      0993 C0 82          	PUSH	DPL		;SAVE DESTINATION
 2795:      0995 D1 BF          	ACALL	S_C		;CALCULATE SOURCE
 2796:      0997 40 9F          	JC	INTERX		;ERROR IF CARRY
 2797:      0999 D0 00          	POP	R0B0		;GET DESTINATION BACK
 2798:      099B D0 02          	POP	R2B0
 2799:                          	;
 2800:      099D AF 3F          SSOOP:	MOV	R7,S_LEN	;SET UP COUNTER
 2801:                          	;
 2802:      099F 12 15 96       S_4:	CALL	TBYTE		;TRANSFER THE BYTE
 2803:      09A2 B4 0D 01       	CJNE	A,#CR,S_41	;EXIT IF A CR
 2804:      09A5 22             	RET
 2805:      09A6 DF 05          S_41:	DJNZ	R7,S_5		;BUMP COUNTER
 2806:      09A8 74 0D          	MOV	A,#CR		;SAVE A CR
 2807:      09AA F2             	MOVX	@R0,A
 2808:      09AB C1 4E          	AJMP	EIGP		;PRINT EXTRA IGNORED
 2809:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 52



 Line    I  Addr Code           Source

 2810:                          	;
 2811:      09AD 12 15 76       S_5:	CALL	INC3210 	;BUMP POINTERS
 2812:      09B0 80 ED          	SJMP	S_4		;LOOP
 2813:                          	;
 2814:      09B2 DF 06          S_1:	DJNZ	R7,S_11 	;SEE IF DONE
 2815:      09B4 31 8C          	ACALL	S_E
 2816:      09B6 D1 4E          	ACALL	EIGP		;PRINT EXTRA IGNORED
 2817:      09B8 C1 EC          	AJMP	FINDCR		;GO FIND THE END
 2818:      09BA A3             S_11:	INC	DPTR		;BUMP THE STORE POINTER
 2819:      09BB 80 C5          	SJMP	S_0		;CONTINUE TO LOOP
 2820:                          	;
 2821:      09BD 90 18 28       E3XX:	MOV	DPTR,#E3X	;BAD ARG ERROR
 2822:      09C0 81 0E          	AJMP	EK
 2823:                          	;
 2824:      09C2 31 C6          SLET0:	ACALL	SLET1
 2825:      09C4 E1 D3          	AJMP	POPAS		;COPY EXPRESSION TO VARIABL
 2826:                          	;
 2827:      09C6 F1 01          SLET1:	ACALL	VAR_ER		;CHECK FOR A"VARIAB
 2828:                          	;
 2829:      09C8 C0 02          SLET2:	PUSH	R2B0		;SAVE THE VARIABLE ADD
 2830:      09CA C0 00          	PUSH	R0B0
 2831:      09CC 7F EA          	MOV	R7,#T_EQU	;GET EQUAL TOKEN
 2832:      09CE F1 41          	ACALL	WE
 2833:      09D0 D0 01          	POP	R1B0		;POP VARIABLE TO R3:R1
 2834:      09D2 D0 03          	POP	R3B0
 2835:      09D4 22             	RET			;EXIT
 2836:                          	;
 2837:      09D5 BB 00 E5       R3CK:	CJNE	R3,#00H,E3XX	;CHECK TO SEE IF
 2838:      09D8 22             	RET
 2839:                          	;
 2840:      09D9 D1 D7          SPEOP:	ACALL	GCI1		;BUMP TXA
 2841:      09DB 91 DF          	ACALL	P_E		;EVALUATE PAREN
 2842:      09DD 31 C8          SPEOP1: ACALL	SLET2		;EVALUATE AFTER =
 2843:      09DF 12 14 A1       	CALL	TWOL		;R7:R6 GETS VALUE, R3:R1 GET
 2844:      09E2 EE             	MOV	A,R6		;SAVE THE VALUE
 2845:                          	;
 2846:      09E3 BF 00 D7       	CJNE	R7,#00H,E3XX	;R2 MUST BE = 0
 2847:      09E6 22             	RET
 2848:                          	;
 2849:                          	;**************************************
 2850:                          	;
 2851:                          	; ST_CAL - Calculate string Address
 2852:                          	;
 2853:                          	;**************************************
 2854:                          	;
 2855:                          IST_CAL:;
 2856:                          	;
 2857:      09E7 D1 95          	ACALL	I_PI		;BUMP TEXT, THEN EVALUATE
 2858:      09E9 31 D5          	ACALL	R3CK		;ERROR IF R3 <> 0
 2859:      09EB 09             	INC	R1		;BUMP FOR OFFSET
 2860:      09EC E9             	MOV	A,R1		;ERROR IF R1 = 255
 2861:      09ED 60 CE          	JZ	E3XX
 2862:      09EF 90 01 04       	MOV	DPTR,#VARTOP	;GET TOP OF VARIABLE S
 2863:      09F2 85 3F F0       	MOV	B,S_LEN 	;MULTIPLY FOR LOCATION
 2864:      09F5 51 10          	ACALL	VARD		;CALCULATE THE LOCATION
 2865:      09F7 90 01 0A       	MOV	DPTR,#MEMTOP	;SEE IF BLEW IT

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 53



 Line    I  Addr Code           Source

 2866:      09FA 12 15 B0       	CALL	FUL1
 2867:      09FD 85 3F 82       	MOV	DPL,S_LEN	;GET STRING LENGTH, DPH =
 2868:      0A00 15 83          	DEC	DPH		;DPH = 0
 2869:                          	;
 2870:      0A02 C3             DUBSUB: CLR	C
 2871:      0A03 E9             	MOV	A,R1
 2872:      0A04 95 82          	SUBB	A,DPL
 2873:      0A06 F9             	MOV	R1,A
 2874:      0A07 EB             	MOV	A,R3
 2875:      0A08 95 83          	SUBB	A,DPH
 2876:      0A0A FB             	MOV	R3,A
 2877:      0A0B 49             	ORL	A,R1
 2878:      0A0C 22             	RET
 2879:                          	;
 2880:                          	;**************************************
 2881:                          	;
 2882:                          	;VARD - Calculate the offset base
 2883:                          	;
 2884:                          	;**************************************
 2885:                          	;
 2886:      0A0D 75 F0 06       VARB:	MOV	B,#FPSIZ	;SET UP FOR OPERATION
 2887:                          	;
 2888:      0A10 12 05 B0       VARD:	CALL	LDPTRI		;LOAD DPTR
 2889:      0A13 E9             	MOV	A,R1		;MULTIPLY BASE
 2890:      0A14 A4             	MUL	AB
 2891:      0A15 25 82          	ADD	A,DPL
 2892:      0A17 F9             	MOV	R1,A
 2893:      0A18 E5 F0          	MOV	A,B
 2894:      0A1A 35 83          	ADDC	A,DPH
 2895:      0A1C FB             	MOV	R3,A
 2896:      0A1D 22             	RET
 2897:                          	;
 2898:                          	;**************************************
 2899:                          	;
 2900:                          CSY:	; Calculate a biased string address
 2901:                          	;
 2902:                          	;**************************************
 2903:                          	;
 2904:      0A1E 31 E7          	ACALL	IST_CAL 	;CALCULATE IT
 2905:      0A20 C0 03          	PUSH	R3B0		;SAVE IT
 2906:      0A22 C0 01          	PUSH	R1B0
 2907:      0A24 7F 2C          	MOV	R7,#','         ;WASTE THE COMMA
 2908:      0A26 91 E5          	ACALL	EATC
 2909:      0A28 D1 8E          	ACALL	ONE		;GET THE NEXT EXPRESSION
 2910:      0A2A E9             	MOV	A,R1		;CHECK FOR BOUNDS
 2911:      0A2B B5 3F 00       	CJNE	A,S_LEN,CSY1
 2912:      0A2E 50 8D          CSY1:	JNC	E3XX		;MUST HAVE A CARRY
 2913:      0A30 19             	DEC	R1		;BIAS THE POINTER
 2914:      0A31 D0 E0          	POP	ACC		;GET VALUE LOW
 2915:      0A33 29             	ADD	A,R1		;ADD IT TO BASE
 2916:      0A34 F9             	MOV	R1,A		;SAVE IT
 2917:      0A35 D0 03          	POP	R3B0		;GET HIGH ADDRESS
 2918:      0A37 50 01          	JNC	CSY2		;PROPAGATE THE CARRY
 2919:      0A39 0B             	INC	R3
 2920:      0A3A 81 E3          CSY2:	AJMP	ERPAR		;WASTE THE RIGHT PAREN
 2921:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 54



 Line    I  Addr Code           Source

 2922:                          	;**************************************
 2923:                          	;
 2924:                          	; The statement action routine FOR
 2925:                          	;
 2926:                          	;**************************************
 2927:                          	;
 2928:      0A3C 31 C6          SFOR:	ACALL	SLET1		;SET UP CONTROL VARIA
 2929:      0A3E C0 03          	PUSH	R3B0		;SAVE THE CONTROL VARIABLE L
 2930:      0A40 C0 01          	PUSH	R1B0
 2931:      0A42 F1 D3          	ACALL	POPAS		;POP ARG STACK AND COPY CO
 2932:      0A44 7F A6          	MOV	R7,#T_TO	;GET TO TOKEN
 2933:      0A46 F1 41          	ACALL	WE
 2934:      0A48 D1 CD          	ACALL	GC		;GET NEXT CHARACTER
 2935:      0A4A B4 A7 06       	CJNE	A,#T_STEP,SF2
 2936:      0A4D D1 D7          	ACALL	GCI1		;EAT THE TOKEN
 2937:      0A4F F1 43          	ACALL	EXPRB		;EVALUATE EXPRESSION
 2938:      0A51 80 03          	SJMP	SF21		;JUMP OVER
 2939:                          	;
 2940:      0A53 12 14 43       SF2:	LCALL	PUSH_ONE	;PUT ONE ON THE STAC
 2941:                          	;
 2942:      0A56 74 EF          SF21:	MOV	A,#-FSIZE	;ALLOCATE FSIZE BYTE
 2943:      0A58 71 B1          	ACALL	PUSHCS		;GET CS IN R0
 2944:      0A5A 71 BD          	ACALL	CSC		;CHECK CONTROL STACK
 2945:      0A5C 7B 00          	MOV	R3,#CSTKAH	;IN CONTROL STACK
 2946:      0A5E A9 00          	MOV	R1,R0B0 	;STACK ADDRESS
 2947:      0A60 F1 D3          	ACALL	POPAS		;PUT STEP ON STACK
 2948:      0A62 F1 D3          	ACALL	POPAS		;PUT LIMIT ON STACK
 2949:      0A64 D1 A2          	ACALL	DP_T		;DPTR GETS TEXT
 2950:      0A66 A8 01          	MOV	R0,R1B0 	;GET THE POINTER
 2951:      0A68 71 39          	ACALL	T_X_S		;SAVE THE TEXT
 2952:      0A6A D0 08          	POP	TXAL		;GET CONTROL VARIABLE
 2953:      0A6C D0 0A          	POP	TXAH
 2954:      0A6E 7C 01          	MOV	R4,#FTYPE	;AND THE TYPE
 2955:      0A70 71 39          	ACALL	T_X_S		;SAVE IT
 2956:                          	;
 2957:      0A72 D1 B8          SF3:	ACALL	T_DP		;GET THE TEXT POINTER
 2958:      0A74 01 13          	AJMP	ILOOP		;CONTINUE TO PROCESS
 2959:                          	;
 2960:                          	;**************************************
 2961:                          	;
 2962:                          	; The statement action routines - PUSH 
 2963:                          	;
 2964:                          	;**************************************
 2965:                          	;
 2966:      0A76 F1 43          SPUSH:	ACALL	EXPRB		;PUT EXPRESSION ON S
 2967:      0A78 D1 C6          	ACALL	C_TST		;SEE IF MORE TO DO
 2968:      0A7A 50 FA          	JNC	SPUSH		;IF A COMMA PUSH ANOTHER
 2969:      0A7C 22             	RET
 2970:                          	;
 2971:                          	;
 2972:      0A7D F1 01          SPOP:	ACALL	VAR_ER		;GET VARIABLE
 2973:      0A7F F1 D1          	ACALL	XPOP		;FLIP THE REGISTERS FOR POP
 2974:      0A81 D1 C6          	ACALL	C_TST		;SEE IF MORE TO DO
 2975:      0A83 50 F8          	JNC	SPOP
 2976:                          	;
 2977:      0A85 22             SPOP1:	RET

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 55



 Line    I  Addr Code           Source

 2978:                          	;
 2979:                          	;**************************************
 2980:                          	;
 2981:                          	; The statement action routine - IF
 2982:                          	;
 2983:                          	;**************************************
 2984:                          	;
 2985:      0A86 51 C7          SIF:	ACALL	RTST		;EVALUATE THE EXPRESSIO
 2986:      0A88 F9             	MOV	R1,A		;SAVE THE RESULT
 2987:      0A89 D1 CD          	ACALL	GC		;GET THE CHARACTER AFTER EXPR
 2988:      0A8B B4 A5 02       	CJNE	A,#T_THEN,SIF1	;SEE IF THEN TOKEN
 2989:      0A8E D1 D7          	ACALL	GCI1		;WASTE THEN TOKEN
 2990:      0A90 B9 00 0B       SIF1:	CJNE	R1,#0,T_F1	;CHECK R_OP RESULT
 2991:                          	;
 2992:      0A93 7F A8          E_FIND: MOV	R7,#T_ELSE	;FIND ELSE TOKEN
 2993:      0A95 D1 EE          	ACALL	FINDC
 2994:      0A97 60 EC          	JZ	SPOP1		;EXIT IF A CR
 2995:      0A99 D1 D7          	ACALL	GCI1		;BUMP PAST TOKEN
 2996:      0A9B B4 A8 F5       	CJNE	A,#T_ELSE,E_FIND;WASTE IF NO ELSE
 2997:                          	;
 2998:      0A9E F1 35          T_F1:	ACALL	INTGER		;SEE IF NUMBER
 2999:      0AA0 50 56          	JNC	D_L1		;EXECUTE LINE NUMBER
 3000:      0AA2 01 F8          	AJMP	ISTAT		;EXECUTE STATEMENT IN NOT
 3001:                          	;
 3002:      0AA4 E0             B_C:	MOVX	A,@DPTR
 3003:      0AA5 14             	DEC	A
 3004:      0AA6 20 E7 2E       	JB	ACC.7,FL11
 3005:      0AA9 22             	RET
 3006:                          	;
 3007:                          	;**************************************
 3008:                          	;
 3009:                          	; The statement action routine - GOTO
 3010:                          	;
 3011:                          	;**************************************
 3012:                          	;
 3013:      0AAA 51 F2          SGOTO:	ACALL	RLINE		;R2:R0 AND DPTR GET 
 3014:                          	;
 3015:      0AAC D1 B8          SGT1:	ACALL	T_DP		;TEXT POINTER GETS DPT
 3016:                          	;
 3017:      0AAE 10 25 08       	JBC	RETBIT,SGT2	;SEE IF RETI EXECUTED
 3018:                          	;
 3019:      0AB1 30 15 03       	JNB	LINEB,SGT11	;SEE IF A LINE WAS EDIT
 3020:      0AB4 12 06 62       	LCALL	CNEW1		;CLEAR THE MEMORY IF SET
 3021:      0AB7 01 11          SGT11:	AJMP	CILOOP1 	;CLEAR DIRF AND LOO
 3022:                          	;
 3023:      0AB9 10 14 05       SGT2:	JBC	OTI,SGT21	;SEE IF TIMER INTERR
 3024:      0ABC 53 22 BD       	ANL	34,#10111101B	;CLEAR INTERRUPTS
 3025:      0ABF 01 13          	AJMP	ILOOP		;EXECUTE
 3026:      0AC1 A2 2B          SGT21:	MOV	C,ISAV
 3027:      0AC3 92 11          	MOV	INPROG,C
 3028:      0AC5 01 13          	AJMP	ILOOP		;RESTORE INTERRUPTS AND RET
 3029:                          	;
 3030:                          	;
 3031:                          	;**************************************
 3032:                          	;
 3033:                          RTST:	; Test for ZERO

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 56



 Line    I  Addr Code           Source

 3034:                          	;
 3035:                          	;**************************************
 3036:                          	;
 3037:      0AC7 F1 43          	ACALL	EXPRB		;EVALUATE EXPRESSION
 3038:      0AC9 12 12 4F       	CALL	INC_ASTKA	;BUMP ARG STACK
 3039:      0ACC 60 02          	JZ	RTST1		;EXIT WITH ZERO OR 0FFH
 3040:      0ACE 74 FF          	MOV	A,#0FFH
 3041:      0AD0 22             RTST1:	RET
 3042:                          	;
 3043:                          	;
 3044:                          	;**************************************
 3045:                          	;
 3046:                          	; GLN - get the line number in R2:R0, r
 3047:                          	;
 3048:                          	;**************************************
 3049:                          	;
 3050:      0AD1 D1 9B          GLN:	ACALL	DP_B		;GET THE BEGINNING ADDR
 3051:                          	;
 3052:      0AD3 E0             FL1:	MOVX	A,@DPTR 	;GET THE LENGTH
 3053:      0AD4 FF             	MOV	R7,A		;SAVE THE LENGTH
 3054:      0AD5 DF 05          	DJNZ	R7,FL3		;SEE IF END OF FILE
 3055:                          	;
 3056:      0AD7 90 1F B5       FL11:	MOV	DPTR,#E10X	;NO LINE NUMBER
 3057:      0ADA 81 0E          	AJMP	EK		;HANDLE THE ERROR
 3058:                          	;
 3059:      0ADC 20 E7 F8       FL3:	JB	ACC.7,FL11	;CHECK FOR BIT 7
 3060:      0ADF A3             	INC	DPTR		;POINT AT HIGH BYTE
 3061:      0AE0 E0             	MOVX	A,@DPTR 	;GET HIGH BYTE
 3062:      0AE1 B5 02 08       	CJNE	A,R2B0,FL2	;SEE IF MATCH
 3063:      0AE4 A3             	INC	DPTR		;BUMP TO LOW BYTE
 3064:      0AE5 1F             	DEC	R7		;ADJUST AGAIN
 3065:      0AE6 E0             	MOVX	A,@DPTR 	;GET THE LOW BYTE
 3066:      0AE7 B5 00 02       	CJNE	A,R0B0,FL2	;SEE IF LOW BYTE MATCH
 3067:      0AEA A3             	INC	DPTR		;POINT AT FIRST CHARACTER
 3068:      0AEB 22             	RET			;FOUND IT
 3069:                          	;
 3070:      0AEC EF             FL2:	MOV	A,R7		;GET THE LENGTH COUNTER
 3071:      0AED 12 05 DE       	CALL	ADDPTR		;ADD A TO DATA POINTER
 3072:      0AF0 80 E1          	SJMP	FL1		;LOOP
 3073:                          	;
 3074:                          	;
 3075:                          	;**************************************
 3076:                          	;
 3077:                          	;RLINE - Read in ASCII string, get line
 3078:                          	;
 3079:                          	;**************************************
 3080:                          	;
 3081:      0AF2 F1 30          RLINE:	ACALL	INTERR		;GET THE INTEGER
 3082:                          	;
 3083:      0AF4 51 D1          RL1:	ACALL	GLN
 3084:      0AF6 E1 17          	AJMP	CLN_UP
 3085:                          	;
 3086:                          	;
 3087:      0AF8 51 D1          D_L1:	ACALL	GLN		;GET THE LINE
 3088:      0AFA 41 AC          	AJMP	SGT1		;EXECUTE THE LINE
 3089:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 57



 Line    I  Addr Code           Source

 3090:                          	;**************************************
 3091:                          	;
 3092:                          	; The statement action routines WHILE a
 3093:                          	;
 3094:                          	;**************************************
 3095:                          	;
 3096:      0AFC 51 C7          SWHILE: ACALL	RTST		;EVALUATE RELATIONAL
 3097:      0AFE F4             	CPL	A
 3098:      0AFF 80 02          	SJMP	S_WU
 3099:                          	;
 3100:      0B01 51 C7          SUNTIL: ACALL	RTST		;EVALUATE RELATIONAL
 3101:                          	;
 3102:      0B03 7C 03          S_WU:	MOV	R4,#DTYPE	;DO EXPECTED
 3103:      0B05 FD             	MOV	R5,A		;SAVE R_OP RESULT
 3104:      0B06 80 0C          	SJMP	SR0		;GO PROCESS
 3105:                          	;
 3106:                          	;
 3107:                          	;**************************************
 3108:                          	;
 3109:                          CNULL:	; The Command Action Routine - NU
 3110:                          	;
 3111:                          	;**************************************
 3112:                          	;
 3113:      0B08 F1 30          	ACALL	INTERR		;GET AN INTEGER FOLLOWING
 3114:      0B0A 88 15          	MOV	NULLCT,R0	;SAVE THE NULLCOUNT
 3115:      0B0C 01 55          	AJMP	CMNDLK		;JUMP TO COMMAND MODE
 3116:                          	;
 3117:                          	;**************************************
 3118:                          	;
 3119:                          	; The statement action routine - RETI
 3120:                          	;
 3121:                          	;**************************************
 3122:                          	;
 3123:      0B0E D2 25          SRETI:	SETB	RETBIT		;SAYS THAT RETI HAS 
 3124:                          	;
 3125:                          	;**************************************
 3126:                          	;
 3127:                          	; The statement action routine - RETURN
 3128:                          	;
 3129:                          	;**************************************
 3130:                          	;
 3131:      0B10 7C 02          SRETRN: MOV	R4,#GTYPE	;MAKE SURE OF GOSU
 3132:      0B12 7D 55          	MOV	R5,#55H 	;TYPE RETURN TYPE
 3133:                          	;
 3134:      0B14 71 4B          SR0:	ACALL	CSETUP		;SET UP CONTROL STACK
 3135:      0B16 E2             	MOVX	A,@R0		;GET RETURN TEXT ADDRESS
 3136:      0B17 F5 83          	MOV	DPH,A
 3137:      0B19 08             	INC	R0
 3138:      0B1A E2             	MOVX	A,@R0
 3139:      0B1B F5 82          	MOV	DPL,A
 3140:      0B1D 08             	INC	R0		;POP CONTROL STACK
 3141:      0B1E E0             	MOVX	A,@DPTR 	;SEE IF GOSUB WAS THE LAS
 3142:      0B1F B4 01 02       	CJNE	A,#EOF,SR01
 3143:      0B22 01 55          	AJMP	CMNDLK
 3144:      0B24 ED             SR01:	MOV	A,R5		;GET TYPE
 3145:      0B25 60 85          	JZ	SGT1		;EXIT IF ZERO

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 58



 Line    I  Addr Code           Source

 3146:      0B27 88 11          	MOV	CSTKA,R0	;POP THE STACK
 3147:      0B29 F4             	CPL	A		;OPTION TEST, 00H, 55H, 0FFH, NO
 3148:      0B2A 70 80          	JNZ	SGT1		;MUST BE GOSUB
 3149:      0B2C 22             	RET			;NORMAL FALL THRU EXIT FOR NO MAT
 3150:                          	;
 3151:                          	;**************************************
 3152:                          	;
 3153:                          	; The statement action routine - GOSUB
 3154:                          	;
 3155:                          	;**************************************
 3156:                          	;
 3157:      0B2D 51 F2          SGOSUB: ACALL	RLINE		;NEW TXA IN DPTR
 3158:                          	;
 3159:      0B2F 7C 02          SGS0:	MOV	R4,#GTYPE
 3160:      0B31 71 35          	ACALL	SGS1		;SET EVERYTHING UP
 3161:      0B33 41 72          	AJMP	SF3		;EXIT
 3162:                          	;
 3163:      0B35 74 FD          SGS1:	MOV	A,#-3		;ALLOCATE 3 BYTES ON CO
 3164:      0B37 71 B1          	ACALL	PUSHCS
 3165:                          	;
 3166:      0B39 75 A0 00       T_X_S:	MOV	P2,#CSTKAH	;SET UP PORT FOR C
 3167:      0B3C E5 08          	MOV	A,TXAL		;GET RETURN ADDRESS AND SAV
 3168:      0B3E F2             	MOVX	@R0,A
 3169:      0B3F 18             	DEC	R0
 3170:      0B40 E5 0A          	MOV	A,TXAH
 3171:      0B42 F2             	MOVX	@R0,A
 3172:      0B43 18             	DEC	R0
 3173:      0B44 EC             	MOV	A,R4		;GET TYPE
 3174:      0B45 F2             	MOVX	@R0,A		;SAVE TYPE
 3175:      0B46 22             	RET			;EXIT
 3176:                          	;
 3177:                          	;
 3178:      0B47 74 03          CS1:	MOV	A,#3		;POP 3 BYTES
 3179:      0B49 71 B1          	ACALL	PUSHCS
 3180:                          	;
 3181:      0B4B A8 11          CSETUP: MOV	R0,CSTKA	;GET CONTROL STACK
 3182:      0B4D 75 A0 00       	MOV	P2,#CSTKAH
 3183:      0B50 E2             	MOVX	A,@R0		;GET BYTE
 3184:      0B51 B5 04 02       	CJNE	A,R4B0,CSETUP1	;SEE IF TYPE MATCH
 3185:      0B54 08             	INC	R0
 3186:      0B55 22             	RET
 3187:      0B56 60 69          CSETUP1:JZ	E4XX		;EXIT IF STACK UNDERFLO
 3188:      0B58 B4 01 EC       	CJNE	A,#FTYPE,CS1	;SEE IF FOR TYPE
 3189:      0B5B 71 AF          	ACALL	XXI3		;WASTE THE FOR TYPE
 3190:      0B5D 80 EC          	SJMP	CSETUP		;LOOP
 3191:                          	;
 3192:                          	;**************************************
 3193:                          	;
 3194:                          	; The statement action routine - NEXT
 3195:                          	;
 3196:                          	;**************************************
 3197:                          	;
 3198:      0B5F 7C 01          SNEXT:	MOV	R4,#FTYPE	;FOR TYPE
 3199:      0B61 71 4B          	ACALL	CSETUP		;SETUP CONTROL STACK
 3200:      0B63 88 0F          	MOV	TEMP5,R0	;SAVE CONTROL VARIABLE ADD
 3201:      0B65 79 0B          	MOV	R1,#TEMP1	;SAVE VAR + RETURN IN TEM

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 59



 Line    I  Addr Code           Source

 3202:                          	;
 3203:      0B67 E2             XXI:	MOVX	A,@R0		;LOOP UNTIL DONE
 3204:      0B68 F7             	MOV	@R1,A
 3205:      0B69 09             	INC	R1
 3206:      0B6A 08             	INC	R0
 3207:      0B6B B9 0F F9       	CJNE	R1,#TEMP5,XXI
 3208:                          	;
 3209:      0B6E B1 65          	ACALL	VAR		;SEE IF THE USER HAS A VARIA
 3210:      0B70 50 04          	JNC	XXI1
 3211:      0B72 AA 0B          	MOV	R2,TEMP1
 3212:      0B74 A8 0C          	MOV	R0,TEMP2
 3213:      0B76 EA             XXI1:	MOV	A,R2		;SEE IF VAR'S AGREE
 3214:      0B77 B5 0B 47       	CJNE	A,TEMP1,E4XX
 3215:      0B7A E8             	MOV	A,R0
 3216:      0B7B B5 0C 43       	CJNE	A,TEMP2,E4XX
 3217:      0B7E F1 DD          	ACALL	PUSHAS		;PUT CONTROL VARIABLE ON 
 3218:      0B80 74 0E          	MOV	A,#FPSIZ+FPSIZ+2;COMPUTE ADDRESS TO
 3219:      0B82 25 0F          	ADD	A,TEMP5 	;ADD IT TO BASE OF STACK
 3220:      0B84 F8             	MOV	R0,A		;SAVE IN R0
 3221:      0B85 7A 00          	MOV	R2,#CSTKAH	;SET UP TO PUSH STEP VAL
 3222:      0B87 8A A0          	MOV	P2,R2		;SET UP PORT
 3223:      0B89 E2             	MOVX	A,@R0		;GET SIGN
 3224:      0B8A 08             	INC	R0		;BACK TO EXPONENT
 3225:      0B8B C0 E0          	PUSH	ACC		;SAVE SIGN OF STEP
 3226:      0B8D F1 DD          	ACALL	PUSHAS		;PUT STEP VALUE ON STACK
 3227:      0B8F C0 00          	PUSH	R0B0		;SAVE LIMIT VALUE LOCATION
 3228:      0B91 12 17 41       	CALL	AADD		;ADD STEP VALUE TO VARIABLE
 3229:      0B94 12 14 2C       	CALL	CSTAKA		;COPY STACK
 3230:      0B97 AB 0B          	MOV	R3,TEMP1	;GET CONTROL VARIABLE
 3231:      0B99 A9 0C          	MOV	R1,TEMP2
 3232:      0B9B F1 D3          	ACALL	POPAS		;SAVE THE RESULT
 3233:      0B9D 7A 00          	MOV	R2,#CSTKAH	;RESTORE LIMIT LOCATION
 3234:      0B9F D0 00          	POP	R0B0
 3235:      0BA1 F1 DD          	ACALL	PUSHAS		;PUT LIMIT ON STACK
 3236:      0BA3 12 19 73       	CALL	FP_BASE2	;DO THE COMPARE
 3237:      0BA6 D0 E0          	POP	ACC		;GET LIMIT SIGN BACK
 3238:      0BA8 60 01          	JZ	XXI2		;IF SIGN NEGATIVE, TEST "BACKW
 3239:      0BAA B3             	CPL	C
 3240:      0BAB 72 D5          XXI2:	ORL	C,F0		;SEE IF EQUAL
 3241:      0BAD 40 17          	JC	N4		;STILL SMALLER THAN LIMIT?
 3242:      0BAF 74 11          XXI3:	MOV	A,#FSIZE	;REMOVE CONTROL STACK
 3243:                          	;
 3244:                          	; Fall thru to PUSHCS
 3245:                          	;
 3246:                          	;**************************************
 3247:                          	;
 3248:                          	; PUSHCS - push frame onto control stac
 3249:                          	;	   acc has - number of bytes, also te
 3250:                          	;
 3251:                          	;**************************************
 3252:                          	;
 3253:      0BB1 25 11          PUSHCS: ADD	A,CSTKA 	;BUMP CONTROL STACK
 3254:      0BB3 B4 61 00       	CJNE	A,#CONVT+17,PUSHCS1 ;SEE IF OVERFL
 3255:      0BB6 40 09          PUSHCS1:JC	E4XX		;EXIT IF STACK OVERFLOW
 3256:      0BB8 C5 11          	XCH	A,CSTKA 	;STORE NEW CONTROL STACK V
 3257:      0BBA 14             	DEC	A		;BUMP OLD VALUE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 60



 Line    I  Addr Code           Source

 3258:      0BBB F8             	MOV	R0,A		;PUT OLD-1 IN R0
 3259:                          	;
 3260:      0BBC 22             PUSHCS2:RET			;EXIT
 3261:                          	;
 3262:      0BBD F1 17          CSC:	ACALL	CLN_UP		;FINISH OFF THE LINE
 3263:      0BBF 50 FB          	JNC	PUSHCS2 	;EXIT IF NO TERMINATOR
 3264:                          	;
 3265:      0BC1 90 03 83       E4XX:	MOV	DPTR,#EXC	;CONTROL STACK ERROR
 3266:      0BC4 81 0E          	AJMP	EK		;STACK ERROR
 3267:                          	;
 3268:      0BC6 85 0D 0A       N4:	MOV	TXAH,TEMP3	;GET TEXT POINTER
 3269:      0BC9 85 0E 08       	MOV	TXAL,TEMP4
 3270:      0BCC 01 13          	AJMP	ILOOP		;EXIT
 3271:                          	;
 3272:                          	;**************************************
 3273:                          	;
 3274:                          	; The statement action routine - RESTOR
 3275:                          	;
 3276:                          	;**************************************
 3277:                          	;
 3278:      0BCE 71 D6          SRESTR: ACALL	X_TR		;SWAP POINTERS
 3279:      0BD0 D1 9B          SRESTR1:ACALL	DP_B		;GET THE STARTING AD
 3280:      0BD2 D1 B8          	ACALL	T_DP		;PUT STARTING ADDRESS IN TE
 3281:      0BD4 F1 23          	ACALL	B_TXA		;BUMP TXA
 3282:                          	;
 3283:                          	; Fall thru
 3284:                          	;
 3285:                          X_TR:	;swap txa and rtxa
 3286:                          	;
 3287:      0BD6 C5 0A          	XCH	A,TXAH
 3288:      0BD8 C5 12          	XCH	A,RTXAH
 3289:      0BDA C5 0A          	XCH	A,TXAH
 3290:      0BDC C5 08          	XCH	A,TXAL
 3291:      0BDE C5 10          	XCH	A,RTXAL
 3292:      0BE0 C5 08          	XCH	A,TXAL
 3293:      0BE2 22             	RET			;EXIT
 3294:                          	;
 3295:                          	;**************************************
 3296:                          	;
 3297:                          	; The statement action routine - READ
 3298:                          	;
 3299:                          	;**************************************
 3300:                          	;
 3301:      0BE3 71 D6          SREAD:	ACALL	X_TR		;SWAP POINTERS
 3302:                          	;
 3303:      0BE5 D1 C6          SRD0:	ACALL	C_TST		;CHECK FOR COMMA
 3304:      0BE7 40 16          	JC	SRD4		;SEE WHAT IT IS
 3305:                          	;
 3306:      0BE9 F1 43          SRD:	ACALL	EXPRB		;EVALUATE THE EXPRESSI
 3307:      0BEB D1 CD          	ACALL	GC		;GET THE CHARACTER AFTER EXPR
 3308:      0BED B4 2C 02       	CJNE	A,#',',SRD1     ;SEE IF MORE DATA
 3309:      0BF0 80 02          	SJMP	SRD2		;BYBASS CLEAN UP IF A COMMA
 3310:                          	;
 3311:      0BF2 F1 17          SRD1:	ACALL	CLN_UP		;FINISH OFF THE LINE
 3312:                          	;
 3313:      0BF4 71 D6          SRD2:	ACALL	X_TR		;RESTORE POINTERS

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 61



 Line    I  Addr Code           Source

 3314:      0BF6 F1 01          	ACALL	VAR_ER		;GET VARIABLE ADDRESS
 3315:      0BF8 F1 D1          	ACALL	XPOP		;FLIP THE REGISTERS FOR POP
 3316:      0BFA D1 C6          	ACALL	C_TST		;SEE IF A COMMA
 3317:      0BFC 50 E5          	JNC	SREAD		;READ AGAIN IF A COMMA
 3318:      0BFE 22             SRD21:	RET			;EXIT IF NOT
 3319:                          	;
 3320:      0BFF B4 9C 04       SRD4:	CJNE	A,#T_DATA,SRD5	;SEE IF DATA
 3321:      0C02 D1 D7          	ACALL	GCI1		;BUMP POINTER
 3322:      0C04 80 E3          	SJMP	SRD
 3323:                          	;
 3324:      0C06 B4 01 08       SRD5:	CJNE	A,#EOF,SRD6	;SEE IF YOU BLEW 
 3325:      0C09 71 D6          SRD51:	ACALL	X_TR		;GET THE TEXT POINTER
 3326:      0C0B 90 1F 81       	MOV	DPTR,#E14X	;READ ERROR
 3327:                          	;
 3328:      0C0E 02 18 8F       EK:	LJMP	ERROR
 3329:                          	;
 3330:      0C11 D1 EC          SRD6:	ACALL	FINDCR		;WASTE THIS LINE
 3331:      0C13 F1 17          	ACALL	CLN_UP		;CLEAN IT UP
 3332:      0C15 40 F2          	JC	SRD51		;ERROR IF AT END
 3333:      0C17 80 CC          	SJMP	SRD0
 3334:                          	;
 3335:      0C19 D1 CD          NUMC:	ACALL	GC		;GET A CHARACTER
 3336:      0C1B B4 23 04       	CJNE	A,#'#',NUMC1    ;SEE IF A #
 3337:      0C1E D2 1B          	SETB	COB		;VALID LINE PRINT
 3338:      0C20 C1 CB          	AJMP	IGC		;BUMP THE TEXT POINTER
 3339:                          	;
 3340:      0C22 B4 40 D9       NUMC1:	CJNE	A,#'@',SRD21    ;EXIT IF NO 
 3341:      0C25 D2 19          	SETB	LPB
 3342:      0C27 C1 CB          	AJMP	IGC
 3343:                          	;
 3344:                          	;**************************************
 3345:                          	;
 3346:                          	; The statement action routine - PRINT
 3347:                          	;
 3348:                          	;**************************************
 3349:                          	;
 3350:      0C29 D2 36          SPH0:	SETB	ZSURP		;NO ZEROS
 3351:                          	;
 3352:      0C2B D2 37          SPH1:	SETB	HMODE		;HEX MODE
 3353:                          	;
 3354:      0C2D 91 19          SPRINT: ACALL	NUMC		;TEST FOR A LINE PRI
 3355:      0C2F 91 38          	ACALL	SPRINT2 	;PROCEED
 3356:      0C31 53 23 F5       SPRINT1:ANL	35,#11110101B	;CLEAR COB AND
 3357:      0C34 53 26 3F       	ANL	38,#00111111B	;NO HEX MODE
 3358:                          	;
 3359:      0C37 22             	RET
 3360:                          	;
 3361:      0C38 D1 E1          SPRINT2:ACALL	DELTST		;CHECK FOR A DELIM
 3362:      0C3A 40 07          	JC	SP1
 3363:                          	;
 3364:      0C3C 02 06 A5       SP0:	JMP	CRLF		;EXIT WITH A CR IF SO
 3365:                          	;
 3366:      0C3F D1 C6          SP2:	ACALL	C_TST		;CHECK FOR A COMMA
 3367:      0C41 40 F9          	JC	SP0		;EXIT IF NO COMMA
 3368:                          	;
 3369:      0C43 D1 A9          SP1:	ACALL	CPS		;SEE IF A STRING TO PRIN

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 62



 Line    I  Addr Code           Source

 3370:      0C45 50 F8          	JNC	SP2		;IF A STRING, CHECK FOR A COMM
 3371:                          	;
 3372:      0C47 B4 A4 08       SP4:	CJNE	A,#T_TAB,SP6
 3373:      0C4A D1 95          	ACALL	I_PI		;ALWAYS CLEARS CARRY
 3374:      0C4C 95 16          	SUBB	A,PHEAD 	;TAKE DELTA BETWEEN TAB A
 3375:      0C4E 40 EF          	JC	SP2		;EXIT IF PHEAD > TAB
 3376:      0C50 80 05          	SJMP	SP7		;OUTPUT SPACES
 3377:                          	;
 3378:      0C52 B4 A9 0A       SP6:	CJNE	A,#T_SPC,SM
 3379:      0C55 D1 95          	ACALL	I_PI		;SET UP PAREN VALUE
 3380:                          	;
 3381:      0C57 60 E6          SP7:	JZ	SP2
 3382:      0C59 12 07 0F       	LCALL	STEROT		;OUTPUT A SPACE
 3383:      0C5C 14             	DEC	A		;DECREMENT COUNTER
 3384:      0C5D 80 F8          	SJMP	SP7		;LOOP
 3385:                          	;
 3386:      0C5F B4 D3 13       SM:	CJNE	A,#T_CHR,SP8
 3387:      0C62 D1 CB          	ACALL	IGC
 3388:      0C64 B4 24 06       	CJNE	A,#'$',SM01
 3389:      0C67 F1 F9          	ACALL	CNX		;PUT THE CHARACTER ON THE ST
 3390:      0C69 D1 90          	ACALL	IFIXL		;PUT THE CHARACTER IN R1
 3391:      0C6B 80 04          	SJMP	SM02
 3392:      0C6D D1 8E          SM01:	ACALL	ONE		;EVALUATE THE EXPRESSIO
 3393:      0C6F 91 E3          	ACALL	ERPAR
 3394:      0C71 AD 01          SM02:	MOV	R5,R1B0 	;BYTE TO OUTPUT
 3395:      0C73 80 07          	SJMP	SQ
 3396:                          	;
 3397:      0C75 B4 AA 09       SP8:	CJNE	A,#T_CR,SX
 3398:      0C78 D1 D7          	ACALL	GCI1		;EAT THE TOKEN
 3399:      0C7A 7D 0D          	MOV	R5,#CR
 3400:                          	;
 3401:      0C7C 12 07 11       SQ:	CALL	TEROT
 3402:      0C7F 80 BE          	SJMP	SP2		;OUTPUT A CR AND DO IT AGAIN
 3403:                          	;
 3404:      0C81 B4 D2 53       SX:	CJNE	A,#T_USE,SP9	;USING TOKEN
 3405:      0C84 D1 CB          	ACALL	IGC		;GE THE CHARACTER AFTER THE 
 3406:      0C86 B4 46 16       	CJNE	A,#'F',U4       ;SEE IF FLOATING
 3407:      0C89 75 17 F0       	MOV	FORMAT,#0F0H	;SET FLOATING
 3408:      0C8C D1 CB          	ACALL	IGC		;BUMP THE POINTER AND GET TH
 3409:      0C8E D1 D7          	ACALL	GCI1		;BUMP IT AGAIN
 3410:      0C90 54 0F          	ANL	A,#0FH		;STRIP OFF ASCII BIAS
 3411:      0C92 60 07          	JZ	U3		;EXIT IF ZERO
 3412:      0C94 B4 03 00       	CJNE	A,#3,SX1	;SEE IF AT LEAST A THREE
 3413:      0C97 50 02          SX1:	JNC	U3		;FORCE A THREE IF NOT A THR
 3414:      0C99 74 03          	MOV	A,#3
 3415:                          	;
 3416:      0C9B 42 17          U3:	ORL	FORMAT,A	;PUT DIGIT IN FORMAT
 3417:      0C9D 80 2A          	SJMP	U8		;CLEAN UP END
 3418:                          	;
 3419:      0C9F B4 30 07       U4:	CJNE	A,#'0',U5
 3420:      0CA2 75 17 00       	MOV	FORMAT,#0	;FREE FORMAT
 3421:      0CA5 D1 D7          	ACALL	GCI1		;BUMP THE POINTER
 3422:      0CA7 80 20          	SJMP	U8
 3423:                          	;
 3424:      0CA9 B4 23 1D       U5:	CJNE	A,#'#',U8       ;SEE IF INTGER 
 3425:      0CAC 91 CD          	ACALL	U6

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 63



 Line    I  Addr Code           Source

 3426:      0CAE 8F 17          	MOV	FORMAT,R7	;SAVE THE FORMAT
 3427:      0CB0 B4 2E 11       	CJNE	A,#'.',U8A      ;SEE IF TERMINATOR
 3428:      0CB3 D1 CB          	ACALL	IGC		;BUMP PAST .
 3429:      0CB5 91 CD          	ACALL	U6		;LOOP AGAIN
 3430:      0CB7 EF             	MOV	A,R7		;GET COUNT
 3431:      0CB8 25 17          	ADD	A,FORMAT	;SEE IF TOO BIG
 3432:      0CBA 24 F7          	ADD	A,#0F7H
 3433:      0CBC 50 02          	JNC	U5A
 3434:                          	;
 3435:      0CBE 21 38          SE0:	AJMP	INTERX		;ERROR, BAD SYNTAX
 3436:                          	;
 3437:      0CC0 EF             U5A:	MOV	A,R7		;GET THE COUNT BACK
 3438:      0CC1 C4             	SWAP	A		;ADJUST
 3439:      0CC2 42 17          	ORL	FORMAT,A	;GET THE COUNT
 3440:                          	;
 3441:      0CC4 E5 17          U8A:	MOV	A,FORMAT
 3442:                          	;
 3443:      0CC6 C4             U8B:	SWAP	A		;GET THE FORMAT RIGHT
 3444:      0CC7 F5 17          	MOV	FORMAT,A
 3445:                          	;
 3446:      0CC9 91 E3          U8:	ACALL	ERPAR
 3447:      0CCB 81 3F          	AJMP	SP2		;DONE
 3448:                          	;
 3449:      0CCD 7F 00          U6:	MOV	R7,#0		;SET COUNTER
 3450:                          	;
 3451:      0CCF B4 23 0C       U7:	CJNE	A,#'#',SP9A     ;EXIT IF NOT A 
 3452:      0CD2 0F             	INC	R7		;BUMP COUNTER
 3453:      0CD3 D1 CB          	ACALL	IGC		;GET THE NEXT CHARACTER
 3454:      0CD5 80 F8          	SJMP	U7		;LOOP
 3455:                          	;
 3456:      0CD7 D1 E3          SP9:	ACALL	DELTST1 	;CHECK FOR DELIMITER
 3457:      0CD9 50 03          	JNC	SP9A		;EXIT IF A DELIMITER
 3458:                          	;
 3459:      0CDB B4 A8 34       	CJNE	A,#T_ELSE,SS
 3460:                          	;
 3461:      0CDE 22             SP9A:	RET			;EXIT IF ELSE TOKEN
 3462:                          	;
 3463:                          	;**************************************
 3464:                          	;
 3465:                          	; P_E - Evaluate an expression in paren
 3466:                          	;
 3467:                          	;**************************************
 3468:                          	;
 3469:      0CDF 7F E0          P_E:	MOV	R7,#T_LPAR
 3470:      0CE1 F1 41          	ACALL	WE
 3471:                          	;
 3472:      0CE3 7F 29          ERPAR:	MOV	R7,#')'         ;EAT A RIGHT 
 3473:                          	;
 3474:      0CE5 D1 D5          EATC:	ACALL	GCI		;GET THE CHARACTER
 3475:      0CE7 B5 07 D4       	CJNE	A,R7B0,SE0	;ERROR IF NOT THE SAME
 3476:      0CEA 22             	RET
 3477:                          	;
 3478:                          	;**************************************
 3479:                          	;
 3480:                          S_ON:	; ON Statement
 3481:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 64



 Line    I  Addr Code           Source

 3482:                          	;**************************************
 3483:                          	;
 3484:      0CEB D1 8E          	ACALL	ONE		;GET THE EXPRESSION
 3485:      0CED D1 D5          	ACALL	GCI		;GET THE NEXT CHARACTER
 3486:      0CEF B4 83 04       	CJNE	A,#T_GOTO,C0
 3487:      0CF2 91 FD          	ACALL	C1		;EAT THE COMMAS
 3488:      0CF4 41 72          	AJMP	SF3		;DO GOTO
 3489:                          	;
 3490:      0CF6 B4 9F C5       C0:	CJNE	A,#T_GOSB,SE0
 3491:      0CF9 91 FD          	ACALL	C1
 3492:      0CFB 61 2F          	AJMP	SGS0		;DO GOSUB
 3493:                          	;
 3494:      0CFD B9 00 06       C1:	CJNE	R1,#0,C2
 3495:      0D00 F1 30          	ACALL	INTERR		;GET THE LINE NUMBER
 3496:      0D02 D1 EC          	ACALL	FINDCR
 3497:      0D04 41 F4          	AJMP	RL1		;FINISH UP THIS LINE
 3498:                          	;
 3499:      0D06 7F 2C          C2:	MOV	R7,#','
 3500:      0D08 D1 EE          	ACALL	FINDC
 3501:      0D0A B4 2C B1       	CJNE	A,#',',SE0      ;ERROR IF NOT A CO
 3502:      0D0D 19             	DEC	R1
 3503:      0D0E D1 D7          	ACALL	GCI1		;BUMP PAST COMMA
 3504:      0D10 80 EB          	SJMP	C1
 3505:                          	;
 3506:      0D12 D1 BF          SS:	ACALL	S_C		;SEE IF A STRING
 3507:      0D14 40 05          	JC	SA		;NO STRING IF CARRY IS SET
 3508:      0D16 12 06 BF       	LCALL	UPRNT		;PUT POINTER IN DPTR
 3509:      0D19 81 3F          	AJMP	SP2		;SEE IF MORE
 3510:                          	;
 3511:      0D1B F1 43          SA:	ACALL	EXPRB		;MUST BE AN EXPRESSION
 3512:      0D1D 74 48          	MOV	A,#72
 3513:      0D1F B5 16 00       	CJNE	A,PHEAD,SA1	;CHECK PHEAD POSITION
 3514:      0D22 50 02          SA1:	JNC	SA2
 3515:      0D24 91 3C          	ACALL	SP0		;FORCE A CRLF
 3516:      0D26 30 37 14       SA2:	JNB	HMODE,S13	;HEX MODE?
 3517:      0D29 12 12 02       	CALL	FCMP		;SEE IF TOS IS < 0FFFH
 3518:      0D2C 40 0F          	JC	S13		;EXIT IF GREATER
 3519:      0D2E 12 13 8F       	CALL	AABS		;GET THE SIGN
 3520:      0D31 70 07          	JNZ	OOPS		;WASTE IF NEGATIVE
 3521:      0D33 D1 90          	ACALL	IFIXL
 3522:      0D35 12 19 85       	CALL	FP_BASE11	;PRINT HEXMODE
 3523:      0D38 81 3F          	AJMP	SP2
 3524:      0D3A 12 13 A1       OOPS:	CALL	ANEG		;MAKE IT NEGATIVE
 3525:                          	;
 3526:      0D3D 12 19 7D       S13:	CALL	FP_BASE7	;DO FP OUTPUT
 3527:      0D40 74 01          	MOV	A,#1		;OUTPUT A SPACE
 3528:      0D42 81 57          	AJMP	SP7
 3529:                          	;
 3530:                          	;**************************************
 3531:                          	;
 3532:                          	; ANU -  Get variable name from text - 
 3533:                          	;	 if succeeds returns variable in R7:R
 3534:                          	;	 R6 = 0 if no digit in name
 3535:                          	;
 3536:                          	;**************************************
 3537:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 65



 Line    I  Addr Code           Source

 3538:      0D44 D1 CB          ANU:	ACALL	IGC		;INCREMENT AND GET CHARA
 3539:      0D46 12 1F ED       	LCALL	DIGIT_CHECK	;CHECK FOR DIGIT
 3540:      0D49 40 0C          	JC	AL2		;EXIT IF VALID DIGIT
 3541:      0D4B B4 5F 01       	CJNE	A,#'_',AL       ;SEE IF A _
 3542:      0D4E 22             	RET
 3543:                          	;
 3544:      0D4F B4 41 00       AL:	CJNE	A,#'A',AL1      ;IS IT AN ASCII
 3545:      0D52 40 04          AL1:	JC	AL3		;EXIT IF CARRY IS SET
 3546:      0D54 B4 5B 00       	CJNE	A,#'Z'+1,AL2    ;IS IT LESS THAN A
 3547:      0D57 B3             AL2:	CPL	C		;FLIP CARRY
 3548:      0D58 22             AL3:	RET
 3549:                          	;
 3550:      0D59 30 D5 3E       SD01:	JNB	F0,VAR2
 3551:                          	;
 3552:      0D5C 90 17 61       SD0:	MOV	DPTR,#E6X
 3553:      0D5F 81 0E          	AJMP	EK
 3554:                          	;
 3555:      0D61 D2 D5          SDIMX:	SETB	F0		;SAYS DOING A DIMENSION
 3556:      0D63 80 02          	SJMP	VAR1
 3557:                          	;
 3558:      0D65 C2 D5          VAR:	CLR	F0		;SAYS DOING A VARIABLE
 3559:                          	;
 3560:      0D67 D1 CD          VAR1:	ACALL	GC		;GET THE CHARACTER
 3561:      0D69 B1 4F          	ACALL	AL		;CHECK FOR ALPHA
 3562:      0D6B 50 04          	JNC	VAR11		;ERROR IF IN DIM
 3563:      0D6D 20 D5 EC       	JB	F0,SD0
 3564:      0D70 22             	RET
 3565:      0D71 FF             VAR11:	MOV	R7,A		;SAVE ALPHA CHARACTER
 3566:      0D72 E4             	CLR	A		;ZERO IN CASE OF FAILURE
 3567:      0D73 FD             	MOV	R5,A		;SAVE IT
 3568:                          	;
 3569:      0D74 FE             VY:	MOV	R6,A
 3570:      0D75 B1 44          	ACALL	ANU		;CHECK FOR ALPHA OR NUMBER
 3571:      0D77 40 07          	JC	VX		;EXIT IF NO ALPHA OR NUM
 3572:                          	;
 3573:      0D79 CF             	XCH	A,R7
 3574:      0D7A 2D             	ADD	A,R5		;NUMBER OF CHARACTERS IN ALPH
 3575:      0D7B CF             	XCH	A,R7		;PUT IT BACK
 3576:      0D7C 7D 1A          	MOV	R5,#26		;FOR THE SECOND TIME AROUND
 3577:      0D7E 80 F4          	SJMP	VY
 3578:                          	;
 3579:      0D80 C2 15          VX:	CLR	LINEB		;TELL EDITOR A VARIABLE I
 3580:      0D82 B4 E0 2F       	CJNE	A,#T_LPAR,V4	;SEE IF A LEFT PAREN
 3581:                          	;
 3582:      0D85 43 06 80       	ORL	R6B0,#80H	;SET BIT 7 TO SIGINIFY MA
 3583:      0D88 12 06 19       	CALL	F_VAR		;FIND THE VARIABLE
 3584:      0D8B C0 02          	PUSH	R2B0		;SAVE THE LOCATION
 3585:      0D8D C0 00          	PUSH	R0B0
 3586:      0D8F 50 C8          	JNC	SD01		;DEFAULT IF NOT IN TABLE
 3587:      0D91 20 D5 28       	JB	F0,SDI		;NO DEFAULT FOR DIMENSION
 3588:      0D94 79 0A          	MOV	R1,#10
 3589:      0D96 7B 00          	MOV	R3,#0
 3590:      0D98 B1 CC          	ACALL	D_CHK
 3591:                          	;
 3592:      0D9A D1 97          VAR2:	ACALL	PAREN_INT	;EVALUATE INTEGER 
 3593:      0D9C BB 00 BD       	CJNE	R3,#0,SD0	;ERROR IF R3<>0

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 66



 Line    I  Addr Code           Source

 3594:      0D9F D0 82          	POP	DPL		;GET VAR FOR LOOKUP
 3595:      0DA1 D0 83          	POP	DPH
 3596:      0DA3 E0             	MOVX	A,@DPTR 	;GET DIMENSION
 3597:      0DA4 14             	DEC	A		;BUMP OFFSET
 3598:      0DA5 99             	SUBB	A,R1		;A MUST BE > R1
 3599:      0DA6 40 B4          	JC	SD0
 3600:      0DA8 12 05 C0       	LCALL	DECDP2		;BUMP POINTER TWICE
 3601:      0DAB 51 0D          	ACALL	VARB		;CALCULATE THE BASE
 3602:                          	;
 3603:      0DAD C9             X3120:	XCH	A,R1		;SWAP R2:R0, R3:R1
 3604:      0DAE C8             	XCH	A,R0
 3605:      0DAF C9             	XCH	A,R1
 3606:      0DB0 CB             	XCH	A,R3
 3607:      0DB1 CA             	XCH	A,R2
 3608:      0DB2 CB             	XCH	A,R3
 3609:      0DB3 22             	RET
 3610:                          	;
 3611:      0DB4 20 D5 A5       V4:	JB	F0,SD0		;ERROR IF NO LPAR FOR DIM
 3612:      0DB7 12 06 19       	LCALL	F_VAR		;GET SCALAR VARIABLE
 3613:      0DBA C3             	CLR	C
 3614:      0DBB 22             	RET
 3615:                          	;
 3616:      0DBC D1 97          SDI:	ACALL	PAREN_INT	;EVALUATE PAREN EXP
 3617:      0DBE BB 00 9B       	CJNE	R3,#0,SD0	;ERROR IF NOT ZERO
 3618:      0DC1 D0 00          	POP	R0B0		;SET UP R2:R0
 3619:      0DC3 D0 02          	POP	R2B0
 3620:      0DC5 B1 CC          	ACALL	D_CHK		;DO DIM
 3621:      0DC7 D1 C6          	ACALL	C_TST		;CHECK FOR COMMA
 3622:      0DC9 50 96          	JNC	SDIMX		;LOOP IF COMMA
 3623:      0DCB 22             	RET			;RETURN IF NO COMMA
 3624:                          	;
 3625:      0DCC 09             D_CHK:	INC	R1		;BUMP FOR TABLE LOOKUP
 3626:      0DCD E9             	MOV	A,R1
 3627:      0DCE 60 8C          	JZ	SD0		;ERROR IF 0FFFFH
 3628:      0DD0 FC             	MOV	R4,A		;SAVE FOR LATER
 3629:      0DD1 90 01 08       	MOV	DPTR,#MT_ALL	;GET MATRIX ALLOCATION
 3630:      0DD4 51 0D          	ACALL	VARB		;DO THE CALCULATION
 3631:      0DD6 AF 83          	MOV	R7,DPH		;SAVE MATRIX ALLOCATION
 3632:      0DD8 AE 82          	MOV	R6,DPL
 3633:      0DDA 90 01 06       	MOV	DPTR,#ST_ALL	;SEE IF TOO MUCH MEMOR
 3634:      0DDD 12 15 B0       	CALL	FUL1		;ST_ALL SHOULD BE > R3:R1
 3635:      0DE0 90 01 08       	MOV	DPTR,#MT_ALL	;SAVE THE NEW MATRIX P
 3636:      0DE3 12 06 05       	CALL	S31DP
 3637:      0DE6 88 82          	MOV	DPL,R0		;GET VARIABLE ADDRESS
 3638:      0DE8 8A 83          	MOV	DPH,R2
 3639:      0DEA EC             	MOV	A,R4		;DIMENSION SIZE
 3640:      0DEB F0             	MOVX	@DPTR,A 	;SAVE IT
 3641:      0DEC 12 05 C0       	CALL	DECDP2		;SAVE TARGET ADDRESS
 3642:                          	;
 3643:      0DEF EF             R76S:	MOV	A,R7
 3644:      0DF0 F0             	MOVX	@DPTR,A
 3645:      0DF1 A3             	INC	DPTR
 3646:      0DF2 EE             	MOV	A,R6		;ELEMENT SIZE
 3647:      0DF3 F0             	MOVX	@DPTR,A
 3648:      0DF4 22             	RET			;R2:R0 STILL HAS SYMBOL TABLE ADD
 3649:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 67



 Line    I  Addr Code           Source

 3650:                          	;**************************************
 3651:                          	;
 3652:                          	; The statement action routine - INPUT
 3653:                          	;
 3654:                          	;**************************************
 3655:                          	;
 3656:      0DF5 D1 A9          SINPUT: ACALL	CPS		;PRINT STRING IF THER
 3657:                          	;
 3658:      0DF7 D1 C6          	ACALL	C_TST		;CHECK FOR A COMMA
 3659:      0DF9 50 07          	JNC	IN2A		;NO CRLF
 3660:      0DFB 91 3C          	ACALL	SP0		;DO A CRLF
 3661:                          	;
 3662:      0DFD 7D 3F          IN2:	MOV	R5,#'?'         ;OUTPUT A ?
 3663:      0DFF 12 07 11       	CALL	TEROT
 3664:                          	;
 3665:      0E02 D2 22          IN2A:	SETB	INP_B		;DOING INPUT
 3666:      0E04 12 06 D8       	CALL	INLINE		;INPUT THE LINE
 3667:      0E07 C2 22          	CLR	INP_B
 3668:      0E09 75 0F 00       	MOV	TEMP5,#HIGH IBUF
 3669:      0E0C 75 0E 07       	MOV	TEMP4,#LOW IBUF
 3670:                          	;
 3671:      0E0F D1 BF          IN3:	ACALL	S_C		;SEE IF A STRING
 3672:      0E11 40 0D          	JC	IN3A		;IF CARRY IS SET, NO STRING
 3673:      0E13 B1 AD          	ACALL	X3120		;FLIP THE ADDRESSES
 3674:      0E15 AB 0F          	MOV	R3,TEMP5
 3675:      0E17 A9 0E          	MOV	R1,TEMP4
 3676:      0E19 31 9D          	ACALL	SSOOP
 3677:      0E1B D1 C6          	ACALL	C_TST		;SEE IF MORE TO DO
 3678:      0E1D 50 DE          	JNC	IN2
 3679:      0E1F 22             	RET
 3680:                          	;
 3681:      0E20 12 18 4D       IN3A:	CALL	DTEMP		;GET THE USER LOCATION
 3682:      0E23 12 19 57       	CALL	GET_NUM 	;GET THE USER SUPPLIED NU
 3683:      0E26 70 18          	JNZ	IN5		;ERROR IF NOT ZERO
 3684:      0E28 12 18 54       	CALL	TEMPD		;SAVE THE DATA POINTER
 3685:      0E2B F1 01          	ACALL	VAR_ER		;GET THE VARIABLE
 3686:      0E2D F1 D1          	ACALL	XPOP		;SAVE THE VARIABLE
 3687:      0E2F 12 18 4D       	CALL	DTEMP		;GET DPTR BACK FROM VAR_ER
 3688:      0E32 D1 C6          	ACALL	C_TST		;SEE IF MORE TO DO
 3689:      0E34 40 13          	JC	IN6		;EXIT IF NO COMMA
 3690:      0E36 E0             	MOVX	A,@DPTR 	;GET INPUT TERMINATOR
 3691:      0E37 B4 2C 06       	CJNE	A,#',',IN5      ;IF NOT A COMMA DO
 3692:      0E3A A3             	INC	DPTR		;BUMP PAST COMMA AND READ NEX
 3693:      0E3B 12 18 54       	CALL	TEMPD
 3694:      0E3E 80 CF          	SJMP	IN3
 3695:                          	;
 3696:      0E40 90 00 F3       IN5:	MOV	DPTR,#IAN	;PRINT INPUT A NUMBER
 3697:      0E43 12 06 AD       	CALL	CRP		;DO A CR, THEN, PRINT FROM RO
 3698:      0E46 02 18 44       	LJMP	CC1		;TRY IT AGAIN
 3699:                          	;
 3700:      0E49 E0             IN6:	MOVX	A,@DPTR
 3701:      0E4A B4 0D 01       	CJNE	A,#CR,EIGP
 3702:      0E4D 22             	RET
 3703:                          	;
 3704:      0E4E 90 03 6D       EIGP:	MOV	DPTR,#EIG
 3705:      0E51 12 06 AD       	CALL	CRP		;PRINT THE MESSAGE AND EXIT

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 68



 Line    I  Addr Code           Source

 3706:      0E54 81 3C          	AJMP	SP0		;EXIT WITH A CRLF
 3707:                          	;
 3708:                          	;**************************************
 3709:                          	;
 3710:                          SOT:	; On timer interrupt
 3711:                          	;
 3712:                          	;**************************************
 3713:                          	;
 3714:      0E56 D1 85          	ACALL	TWO		;GET THE NUMBERS
 3715:      0E58 8B 4B          	MOV	SP_H,R3
 3716:      0E5A 89 4C          	MOV	SP_L,R1
 3717:      0E5C 90 01 26       	MOV	DPTR,#TIV	;SAVE THE NUMBER
 3718:      0E5F D2 10          	SETB	OTS
 3719:      0E61 A1 EF          	AJMP	R76S		;EXIT
 3720:                          	;
 3721:                          	;
 3722:                          	;**************************************
 3723:                          	;
 3724:                          SCALL:	; Call a user rountine
 3725:                          	;
 3726:                          	;**************************************
 3727:                          	;
 3728:      0E63 F1 30          	ACALL	INTERR		;CONVERT INTEGER
 3729:      0E65 BA 00 0A       	CJNE	R2,#0,S_C_1	;SEE IF TRAP
 3730:      0E68 E8             	MOV	A,R0
 3731:      0E69 20 E7 06       	JB	ACC.7,S_C_1
 3732:      0E6C 28             	ADD	A,R0
 3733:      0E6D 90 41 00       	MOV	DPTR,#4100H
 3734:      0E70 F5 82          	MOV	DPL,A
 3735:                          	;
 3736:      0E72 31 6C          S_C_1:	ACALL	AC1		;JUMP TO USER PROGRAM
 3737:      0E74 53 D0 E7       	ANL	PSW,#11100111B	;BACK TO BANK 0
 3738:      0E77 22             	RET			;EXIT
 3739:                          	;
 3740:                          	;**************************************
 3741:                          	;
 3742:                          THREE:	; Save value for timer function
 3743:                          	;
 3744:                          	;**************************************
 3745:                          	;
 3746:      0E78 D1 8E          	ACALL	ONE		;GET THE FIRST INTEGER
 3747:      0E7A 12 16 7B       	CALL	CBIAS		;BIAS FOR TIMER LOAD
 3748:      0E7D 8B 40          	MOV	T_HH,R3
 3749:      0E7F 89 41          	MOV	T_LL,R1
 3750:      0E81 7F 2C          	MOV	R7,#','         ;WASTE A COMMA
 3751:      0E83 91 E5          	ACALL	EATC		;FALL THRU TO TWO
 3752:                          	;
 3753:                          	;**************************************
 3754:                          	;
 3755:                          TWO:	; Get two values seperated by a com
 3756:                          	;
 3757:                          	;**************************************
 3758:                          	;
 3759:      0E85 F1 43          	ACALL	EXPRB
 3760:      0E87 7F 2C          	MOV	R7,#','         ;WASTE THE COMMA
 3761:      0E89 F1 41          	ACALL	WE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 69



 Line    I  Addr Code           Source

 3762:      0E8B 02 14 A1       	JMP	TWOL		;EXIT
 3763:                          	;
 3764:                          	;**************************************
 3765:                          	;
 3766:                          ONE:	; Evaluate an expression and get an
 3767:                          	;
 3768:                          	;**************************************
 3769:                          	;
 3770:      0E8E F1 43          	ACALL	EXPRB		;EVALUATE EXPERSSION
 3771:                          	;
 3772:      0E90 12 12 23       IFIXL:	CALL	IFIX		;INTEGERS IN R3:R1
 3773:      0E93 E9             	MOV	A,R1
 3774:      0E94 22             	RET
 3775:                          	;
 3776:                          	;
 3777:                          	;**************************************
 3778:                          	;
 3779:                          I_PI:	; Increment text pointer then get 
 3780:                          	;
 3781:                          	;**************************************
 3782:                          	;
 3783:      0E95 D1 D7          	ACALL	GCI1		;BUMP TEXT, THEN GET INTEGE
 3784:                          	;
 3785:                          PAREN_INT:; Get an integer in parens ( )
 3786:                          	;
 3787:      0E97 91 DF          	ACALL	P_E
 3788:      0E99 80 F5          	SJMP	IFIXL
 3789:                          	;
 3790:      0E9B 85 13 83       DP_B:	MOV	DPH,BOFAH
 3791:      0E9E 85 14 82       	MOV	DPL,BOFAL
 3792:      0EA1 22             	RET
 3793:                          	;
 3794:      0EA2 85 0A 83       DP_T:	MOV	DPH,TXAH
 3795:      0EA5 85 08 82       	MOV	DPL,TXAL
 3796:      0EA8 22             	RET
 3797:                          	;
 3798:      0EA9 D1 CD          CPS:	ACALL	GC		;GET THE CHARACTER
 3799:      0EAB B4 22 73       	CJNE	A,#'"',NOPASS   ;EXIT IF NO STRING
 3800:      0EAE D1 A2          	ACALL	DP_T		;GET TEXT POINTER
 3801:      0EB0 A3             	INC	DPTR		;BUMP PAST "
 3802:      0EB1 7C 22          	MOV	R4,#'"'
 3803:      0EB3 12 06 C3       	CALL	PN0		;DO THE PRINT
 3804:      0EB6 A3             	INC	DPTR		;GO PAST QUOTE
 3805:      0EB7 C3             	CLR	C		;PASSED TEST
 3806:                          	;
 3807:      0EB8 85 83 0A       T_DP:	MOV	TXAH,DPH	;TEXT POINTER GETS DP
 3808:      0EBB 85 82 08       	MOV	TXAL,DPL
 3809:      0EBE 22             	RET
 3810:                          	;
 3811:                          	;**************************************
 3812:                          	;
 3813:                          S_C:	; Check for a string
 3814:                          	;
 3815:                          	;**************************************
 3816:                          	;
 3817:      0EBF D1 CD          	ACALL	GC		;GET THE CHARACTER

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 70



 Line    I  Addr Code           Source

 3818:      0EC1 B4 24 5D       	CJNE	A,#'$',NOPASS   ;SET CARRY IF NOT 
 3819:      0EC4 21 E7          	AJMP	IST_CAL 	;CLEAR CARRY, CALCULATE O
 3820:                          	;
 3821:                          	;
 3822:                          	;
 3823:                          	;**************************************
 3824:                          	;
 3825:      0EC6 D1 CD          C_TST:	ACALL	GC		;GET A CHARACTER
 3826:      0EC8 B4 2C 56       	CJNE	A,#',',NOPASS   ;SEE IF A COMMA
 3827:                          	;
 3828:                          	;**************************************
 3829:                          	;
 3830:                          	;GC AND GCI - GET A CHARACTER FROM TEXT
 3831:                          	;	      PUT CHARACTER IN THE ACC
 3832:                          	;
 3833:                          	;**************************************
 3834:                          	;
 3835:      0ECB D1 D7          IGC:	ACALL	GCI1		;BUMP POINTER, THEN GET
 3836:                          	;
 3837:      0ECD D2 D3          GC:	SETB	RS0		;USE BANK 1
 3838:      0ECF 8A A0          	MOV	P2,R2		;SET UP PORT 2
 3839:      0ED1 E2             	MOVX	A,@R0		;GET EXTERNAL BYTE
 3840:      0ED2 C2 D3          	CLR	RS0		;BACK TO BANK 0
 3841:      0ED4 22             	RET			;EXIT
 3842:                          	;
 3843:      0ED5 D1 CD          GCI:	ACALL	GC
 3844:                          	;
 3845:                          	; This routine bumps txa by one and alw
 3846:                          	;
 3847:      0ED7 D2 D3          GCI1:	SETB	RS0		;BANK 1
 3848:      0ED9 08             	INC	R0		;BUMP TXA
 3849:      0EDA B8 00 01       	CJNE	R0,#0,GCI11
 3850:      0EDD 0A             	INC	R2
 3851:      0EDE C2 D3          GCI11:	CLR	RS0
 3852:      0EE0 22             	RET			;EXIT
 3853:                          	;
 3854:                          	;**************************************
 3855:                          	;
 3856:                          	; Check delimiters
 3857:                          	;
 3858:                          	;**************************************
 3859:                          	;
 3860:      0EE1 D1 CD          DELTST: ACALL	GC		;GET A CHARACTER
 3861:      0EE3 B4 0D 02       DELTST1:CJNE	A,#CR,DT1	;SEE IF A CR
 3862:      0EE6 E4             	CLR	A
 3863:      0EE7 22             	RET
 3864:                          	;
 3865:      0EE8 B4 3A 36       DT1:	CJNE	A,#':',NOPASS   ;SET CARRY IF 
 3866:                          	;
 3867:      0EEB 22             L_RET:	RET
 3868:                          	;
 3869:                          	;
 3870:                          	;**************************************
 3871:                          	;
 3872:                          	; FINDC - Find the character in R7, upd
 3873:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 71



 Line    I  Addr Code           Source

 3874:                          	;**************************************
 3875:                          	;
 3876:      0EEC 7F 0D          FINDCR: MOV	R7,#CR		;KILL A STATEMENT LI
 3877:                          	;
 3878:      0EEE D1 E1          FINDC:	ACALL	DELTST
 3879:      0EF0 50 F9          	JNC	L_RET
 3880:                          	;
 3881:      0EF2 B5 07 01       	CJNE	A,R7B0,FNDCL2	;MATCH?
 3882:      0EF5 22             	RET
 3883:                          	;
 3884:      0EF6 D1 D7          FNDCL2: ACALL	GCI1
 3885:      0EF8 80 F4          	SJMP	FINDC		;LOOP
 3886:                          	;
 3887:      0EFA D1 D7          FNDCL3: ACALL	GCI1
 3888:                          	;
 3889:      0EFC D1 E1          WCR:	ACALL	DELTST		;WASTE UNTIL A "REAL"
 3890:      0EFE 70 FA          	JNZ	FNDCL3
 3891:      0F00 22             	RET
 3892:                          	;
 3893:                          	;**************************************
 3894:                          	;
 3895:                          	; VAR_ER - Check for a variable, exit i
 3896:                          	;
 3897:                          	;**************************************
 3898:                          	;
 3899:      0F01 B1 65          VAR_ER: ACALL	VAR
 3900:      0F03 80 2D          	SJMP	INTERR1
 3901:                          	;
 3902:                          	;
 3903:                          	;**************************************
 3904:                          	;
 3905:                          	; S_D0 - The Statement Action Routine D
 3906:                          	;
 3907:                          	;**************************************
 3908:                          	;
 3909:      0F05 71 BD          S_DO:	ACALL	CSC		;FINISH UP THE LINE
 3910:      0F07 7C 03          	MOV	R4,#DTYPE	;TYPE FOR STACK
 3911:      0F09 71 35          	ACALL	SGS1		;SAVE ON STACK
 3912:      0F0B 01 13          	AJMP	ILOOP		;EXIT
 3913:                          	;
 3914:                          	;**************************************
 3915:                          	;
 3916:                          	; CLN_UP - Clean up the end of a statem
 3917:                          	;	   file, eat character and line count
 3918:                          	;
 3919:                          	;**************************************
 3920:                          	;
 3921:      0F0D B4 3A 02       C_2:	CJNE	A,#':',C_1      ;SEE IF A TERM
 3922:      0F10 C1 D7          	AJMP	GCI1		;BUMP POINTER AND EXIT, IF S
 3923:                          	;
 3924:      0F12 B4 A8 6D       C_1:	CJNE	A,#T_ELSE,EP5
 3925:      0F15 D1 FC          	ACALL	WCR		;WASTE UNTIL A CR
 3926:                          	;
 3927:      0F17 D1 CD          CLN_UP: ACALL	GC		;GET THE CHARACTER
 3928:      0F19 B4 0D F1       	CJNE	A,#CR,C_2	;SEE IF A CR
 3929:      0F1C D1 CB          	ACALL	IGC		;GET THE NEXT CHARACTER

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 72



 Line    I  Addr Code           Source

 3930:      0F1E B4 01 02       	CJNE	A,#EOF,B_TXA	;SEE IF TERMINATOR
 3931:                          	;
 3932:      0F21 D3             NOPASS: SETB	C
 3933:      0F22 22             	RET
 3934:                          	;
 3935:      0F23 C5 08          B_TXA:	XCH	A,TXAL		;BUMP TXA BY THREE
 3936:      0F25 24 03          	ADD	A,#3
 3937:      0F27 C5 08          	XCH	A,TXAL
 3938:      0F29 10 D7 01       	JBC	CY,B_TXA1
 3939:      0F2C 22             	RET
 3940:      0F2D 05 0A          B_TXA1: INC	TXAH
 3941:      0F2F 22             	RET
 3942:                          	;
 3943:                          	;**************************************
 3944:                          	;
 3945:                          	;	  Get an INTEGER from the text
 3946:                          	;	  sets CARRY if not found
 3947:                          	;	  returns the INTGER value in DPTR an
 3948:                          	;	  returns the terminator in ACC
 3949:                          	;
 3950:                          	;**************************************
 3951:                          	;
 3952:      0F30 F1 35          INTERR: ACALL	INTGER		;GET THE INTEGER
 3953:      0F32 40 4E          INTERR1:JC	EP5		;ERROR IF NOT FOUND
 3954:      0F34 22             	RET			;EXIT IF FOUND
 3955:                          	;
 3956:      0F35 D1 A2          INTGER: ACALL	DP_T
 3957:      0F37 12 19 81       	CALL	FP_BASE9	;CONVERT THE INTEGER
 3958:      0F3A D1 B8          	ACALL	T_DP
 3959:      0F3C 8A 83          	MOV	DPH,R2		;PUT THE RETURNED VALUE IN 
 3960:      0F3E 88 82          	MOV	DPL,R0
 3961:                          	;
 3962:      0F40 22             ITRET:	RET			;EXIT
 3963:                          	;
 3964:                          	;
 3965:      0F41 91 E5          WE:	ACALL	EATC		;WASTE THE CHARACTER
 3966:                          	;
 3967:                          	; Fall thru to evaluate the expression
 3968:                          	;
 3969:                          	;**************************************
 3970:                          	;
 3971:                          	; EXPRB - Evaluate an expression
 3972:                          	;
 3973:                          	;**************************************
 3974:                          	;
 3975:      0F43 7A CF          EXPRB:	MOV	R2,#LOW OPBOL	;BASE PRECEDENC
 3976:                          	;
 3977:      0F45 C0 02          EP1:	PUSH	R2B0		;SAVE OPERATOR PRECEDENC
 3978:      0F47 C2 24          	CLR	ARGF		;RESET STACK DESIGNATOR
 3979:                          	;
 3980:      0F49 E5 81          EP2:	MOV	A,SP		;GET THE STACK POINTER
 3981:      0F4B 24 0C          	ADD	A,#12		;NEED AT LEAST 12 BYTES
 3982:      0F4D 50 03          	JNC	EP21
 3983:      0F4F 02 18 8C       	LJMP	E1XX2
 3984:      0F52 E5 09          EP21:	MOV	A,ASTKA 	;GET THE ARG STACK
 3985:      0F54 94 38          	SUBB	A,#LOW TM_TOP+12;NEED 12 BYTES ALS

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 73



 Line    I  Addr Code           Source

 3986:      0F56 50 03          	JNC	EP22
 3987:      0F58 02 12 1A       	LJMP	E4YY
 3988:      0F5B 20 24 13       EP22:	JB	ARGF,EP4	;MUST BE AN OPERATOR, 
 3989:      0F5E B1 65          	ACALL	VAR		;IS THE VALUE A VARIABLE?
 3990:      0F60 50 0D          	JNC	EP3		;PUT VARIABLE ON STACK
 3991:                          	;
 3992:      0F62 F1 EF          	ACALL	CONST		;IS THE VALUE A NUMERIC CO
 3993:      0F64 50 0B          	JNC	EP4		;IF SO, CONTINUE, IF NOT, SEE 
 3994:      0F66 D1 CD          	CALL	GC		;GET THE CHARACTER
 3995:      0F68 B4 E0 06       	CJNE	A,#T_LPAR,EP4	;SEE IF A LEFT PAREN
 3996:      0F6B 74 D0          	MOV	A,#(LOW OPBOL+1)
 3997:      0F6D 80 55          	SJMP	XLPAR		;PROCESS THE LEFT PAREN
 3998:                          	;
 3999:      0F6F F1 DD          EP3:	ACALL	PUSHAS		;SAVE VAR ON STACK
 4000:                          	;
 4001:      0F71 D1 CD          EP4:	ACALL	GC		;GET THE OPERATOR
 4002:                          	;
 4003:      0F73 B4 E0 00       	CJNE	A,#T_LPAR,EP41	;IS IT AN OPERATOR
 4004:      0F76 50 0E          EP41:	JNC	XOP		;PROCESS OPERATOR
 4005:      0F78 B4 B0 00       	CJNE	A,#T_UOP,EP42	;IS IT A UNARY OPERA
 4006:      0F7B 50 3B          EP42:	JNC	XBILT		;PROCESS UNARY (BUILT I
 4007:      0F7D D0 02          	POP	R2B0		;GET BACK PREVIOUS OPERATOR P
 4008:      0F7F 20 24 BE       	JB	ARGF,ITRET	;OK IF ARG FLAG IS SET
 4009:                          	;
 4010:      0F82 C3             EP5:	CLR	C		;NO RECOVERY
 4011:      0F83 02 18 87       	LJMP	E1XX1
 4012:                          	;
 4013:                          	; Process the operator
 4014:                          	;
 4015:      0F86 54 1F          XOP:	ANL	A,#1FH		;STRIP OFF THE TOKE BIT
 4016:      0F88 20 24 05       	JB	ARGF,XOP1	;IF ARG FLAG IS SET, PROCE
 4017:      0F8B B4 05 3C       	CJNE	A,#T_SUB-T_LPAR,XOP3
 4018:      0F8E 74 09          	MOV	A,#T_NEG-T_LPAR
 4019:                          	;
 4020:      0F90 24 D0          XOP1:	ADD	A,#LOW OPBOL+1	;BIAS THE TABLE
 4021:      0F92 FA             	MOV	R2,A
 4022:      0F93 90 00 00       	MOV	DPTR,#00H
 4023:      0F96 93             	MOVC	A,@A+DPTR	;GET THE CURRENT PRECEDE
 4024:      0F97 FC             	MOV	R4,A
 4025:      0F98 D0 E0          	POP	ACC		;GET THE PREVIOUS PRECEDENCE
 4026:      0F9A FD             	MOV	R5,A		;SAVE THE PREVIOUS PRECEDENCE
 4027:      0F9B 93             	MOVC	A,@A+DPTR	;GET IT
 4028:      0F9C B5 04 04       	CJNE	A,R4B0,XOP11	;SEE WHICH HAS HIGHER
 4029:      0F9F B4 0C 9E       	CJNE	A,#12,ITRET	;SEE IF ANEG
 4030:      0FA2 D3             	SETB	C
 4031:      0FA3 50 9B          XOP11:	JNC	ITRET		;PROCESS NON-INCREASIN
 4032:                          	;
 4033:                          	; Save increasing precedence
 4034:                          	;
 4035:      0FA5 C0 05          	PUSH	R5B0		;SAVE OLD PRECEDENCE ADDRESS
 4036:      0FA7 C0 02          	PUSH	R2B0		;SAVE NEW PRECEDENCE ADDRESS
 4037:      0FA9 D1 D7          	ACALL	GCI1		;EAT THE OPERATOR
 4038:      0FAB F1 45          	ACALL	EP1		;EVALUATE REMAINING EXPRESSI
 4039:      0FAD D0 E0          XOP12:	POP	ACC
 4040:                          	;
 4041:                          	; R2 has the action address, now setup 

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 74



 Line    I  Addr Code           Source

 4042:                          	;
 4043:      0FAF 90 00 57       XOP2:	MOV	DPTR,#OPTAB
 4044:      0FB2 24 30          	ADD	A,#LOW (NOT OPBOL)
 4045:      0FB4 31 5C          	CALL	ISTA1		;SET UP TO RETURN TO EP2
 4046:      0FB6 E1 49          	AJMP	EP2		;JUMP TO EVALUATE EXPRESSION
 4047:                          	;
 4048:                          	; Built-in operator processing
 4049:                          	;
 4050:      0FB8 D1 D7          XBILT:	ACALL	GCI1		;EAT THE TOKEN
 4051:      0FBA 24 30          	ADD	A,#LOW (50H+LOW UOPBOL)
 4052:      0FBC 20 24 C3       	JB	ARGF,EP5	;XBILT MUST COME AFTER AN O
 4053:      0FBF B4 EE 00       	CJNE	A,#STP,XBILT1
 4054:      0FC2 50 EB          XBILT1: JNC	XOP2
 4055:                          	;
 4056:      0FC4 C0 E0          XLPAR:	PUSH	ACC		;PUT ADDRESS ON THE STA
 4057:      0FC6 91 DF          	ACALL	P_E
 4058:      0FC8 80 E3          	SJMP	XOP12		;PERFORM OPERATION
 4059:                          	;
 4060:      0FCA B4 03 B5       XOP3:	CJNE	A,#T_ADD-T_LPAR,EP5
 4061:      0FCD D1 D7          	ACALL	GCI1
 4062:      0FCF E1 49          	AJMP	EP2		;WASTE + SIGN
 4063:                          	;
 4064:      0FD1 B1 AD          XPOP:	ACALL	X3120		;FLIP ARGS THEN POP
 4065:                          	;
 4066:                          	;**************************************
 4067:                          	;
 4068:                          	; POPAS - Pop arg stack and copy variab
 4069:                          	;
 4070:                          	;**************************************
 4071:                          	;
 4072:      0FD3 12 12 4F       POPAS:	LCALL	INC_ASTKA
 4073:      0FD6 02 14 72       	JMP	VARCOP		;COPY THE VARIABLE
 4074:                          	;
 4075:      0FD9 7A 01          AXTAL:	MOV	R2,#HIGH CXTAL
 4076:      0FDB 78 13          	MOV	R0,#LOW CXTAL
 4077:                          	;
 4078:                          	; fall thru
 4079:                          	;
 4080:                          	;**************************************
 4081:                          	;
 4082:                          PUSHAS: ; Push the Value addressed by R2
 4083:                          	;
 4084:                          	;**************************************
 4085:                          	;
 4086:      0FDD 12 12 0B       	CALL	DEC_ASTKA
 4087:      0FE0 D2 24          	SETB	ARGF		;SAYS THAT SOMTHING IS ON TH
 4088:      0FE2 02 14 72       	LJMP	VARCOP
 4089:                          	;
 4090:                          	;
 4091:                          	;**************************************
 4092:                          	;
 4093:                          ST_A:	; Store at expression
 4094:                          	;
 4095:                          	;**************************************
 4096:                          	;
 4097:      0FE5 D1 8E          	ACALL	ONE		;GET THE EXPRESSION

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 75



 Line    I  Addr Code           Source

 4098:      0FE7 80 EA          	SJMP	POPAS		;SAVE IT
 4099:                          	;
 4100:                          	;
 4101:                          	;**************************************
 4102:                          	;
 4103:                          LD_A:	; Load at expression
 4104:                          	;
 4105:                          	;**************************************
 4106:                          	;
 4107:      0FE9 D1 8E          	ACALL	ONE		;GET THE EXPRESSION
 4108:      0FEB B1 AD          	ACALL	X3120		;FLIP ARGS
 4109:      0FED 80 EE          	SJMP	PUSHAS
 4110:                          	;
 4111:                          	;**************************************
 4112:                          	;
 4113:                          CONST:	; Get a constant fron the text
 4114:                          	;
 4115:                          	;**************************************
 4116:                          	;
 4117:      0FEF D1 CD          	CALL	GC		;FIRST SEE IF LITERAL
 4118:      0FF1 B4 D1 31       	CJNE	A,#T_ASC,C0C	;SEE IF ASCII TOKEN
 4119:      0FF4 D1 CB          	CALL	IGC		;GET THE CHARACTER AFTER TOKE
 4120:      0FF6 B4 24 05       	CJNE	A,#'$',CN0      ;SEE IF A STRING
 4121:                          	;
 4122:      0FF9 51 1E          CNX:	CALL	CSY		;CALCULATE IT
 4123:      0FFB 02 13 C0       	JMP	AXBYTE1 	;SAVE IT ON THE STACK
 4124:                          ;
 4125:                          ;***************************************
 4126:                          ;****** Correct ASC(x) bug *************
 4127:                          ;****** Wulf 5 *************************
 4128:                          ;
 4129:                          ;
 4130:      0FFE 30 E7 1B       CN0:	jnb	acc.7,cn0t	;jump if possibly as
 4131:      1001 90 01 75       	mov	dptr,#toktab
 4132:      1004 FE             	mov	r6,a		;save search token
 4133:      1005 F4             cn0t1:	cpl	a
 4134:      1006 60 13          	jz	cn0t4		;jump if EOT
 4135:      1008 E4             	clr	a
 4136:      1009 93             	movc	a,@a+dptr	;read token from token t
 4137:      100A A3             	inc	dptr
 4138:      100B B5 06 F7       	cjne	a,r6b0,cn0t1	;jump if wrong entry
 4139:                          	;
 4140:      100E FD             	mov	r5,a		;save search token
 4141:      100F E4             	clr	a
 4142:      1010 93             cn0t2:	movc	a,@a+dptr
 4143:      1011 FE             	mov	r6,a		;save first ascii of token te
 4144:                          	;
 4145:      1012 E4             cn0t3:	clr	a
 4146:      1013 93             	movc	a,@a+dptr
 4147:      1014 A3             	inc	dptr
 4148:      1015 30 E7 FA       	jnb	acc.7,cn0t3	;jump if possibly ascii
 4149:                          	;
 4150:      1018 6D             	xrl	a,r5
 4151:      1019 60 F5          	jz	cn0t2		;jump if same search token ag
 4152:                          	;
 4153:      101B EE             cn0t4:	mov	a,r6		;get saved ascii

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 76



 Line    I  Addr Code           Source

 4154:      101C 12 14 B1       CN0t:	CALL	TWO_R2		;PUT IT ON THE STACK
 4155:                          ;
 4156:                          ;****** continue with original code: ***
 4157:                          ;
 4158:      101F 12 0E D7       	CALL	GCI1		;BUMP THE POINTER
 4159:      1022 02 0C E3       	JMP	ERPAR		;WASTE THE RIGHT PAREN
 4160:                          	;
 4161:      1025 12 0E A2       C0C:	CALL	DP_T		;GET THE TEXT POINTER
 4162:      1028 12 19 57       	CALL	GET_NUM 	;GET THE NUMBER
 4163:      102B B4 FF 02       	CJNE	A,#0FFH,C1C	;SEE IF NO NUMBER
 4164:      102E D3             	SETB	C
 4165:      102F 22             C2C:	RET
 4166:                          	;
 4167:      1030 70 06          C1C:	JNZ	FPTST
 4168:      1032 C3             	CLR	C
 4169:      1033 D2 24          	SETB	ARGF
 4170:                          	;
 4171:      1035 02 0E B8       C3C:	JMP	T_DP
 4172:                          	;
 4173:      1038 54 0B          FPTST:	ANL	A,#00001011B	;CHECK FOR ERROR
 4174:      103A 60 F3          	JZ	C2C		;EXIT IF ZERO
 4175:                          	;
 4176:                          	; Handle the error condition
 4177:                          	;
 4178:      103C 90 17 51       	MOV	DPTR,#E2X	;DIVIDE BY ZERO
 4179:      103F 30 E0 03       	JNB	ACC.0,FPTST1	;UNDERFLOW
 4180:      1042 90 18 04       	MOV	DPTR,#E7X
 4181:      1045 30 E1 03       FPTST1: JNB	ACC.1,FPTS	;OVERFLOW
 4182:      1048 90 1F 89       	MOV	DPTR,#E11X
 4183:                          	;
 4184:      104B 02 18 8F       FPTS:	JMP	ERROR
 4185:                          	;
 4186:                          	;**************************************
 4187:                          	;
 4188:                          	; The Command action routine - LIST
 4189:                          	;
 4190:                          	;**************************************
 4191:                          	;
 4192:      104E 12 0C 19       CLIST:	CALL	NUMC		;SEE IF TO LINE PORT
 4193:      1051 71 CB          	ACALL	FSTK		;PUT 0FFFFH ON THE STACK
 4194:      1053 12 0F 35       	CALL	INTGER		;SEE IF USER SUPPLIES LN
 4195:      1056 E4             	CLR	A		;LN = 0 TO START
 4196:      1057 FB             	MOV	R3,A
 4197:      1058 F9             	MOV	R1,A
 4198:      1059 40 14          	JC	CL1		;START FROM ZERO
 4199:                          	;
 4200:      105B 12 18 54       	CALL	TEMPD		;SAVE THE START ADDTESS
 4201:      105E 12 0E D5       	CALL	GCI		;GET THE CHARACTER AFTER LIST
 4202:      1061 B4 E5 07       	CJNE	A,#T_SUB,CLIST1 ;CHECK FOR TERMINA
 4203:      1064 51 4F          	ACALL	INC_ASTKA	;WASTE 0FFFFH
 4204:      1066 12 0F 30       	LCALL	INTERR		;GET TERMINATION ADDRESS
 4205:      1069 91 B4          	ACALL	TWO_EY		;PUT TERMINATION ON THE A
 4206:      106B AB 0F          CLIST1: MOV	R3,TEMP5	;GET THE START ADDT
 4207:      106D A9 0E          	MOV	R1,TEMP4
 4208:                          	;
 4209:      106F 12 05 8C       CL1:	CALL	GETLIN		;GET THE LINE NO IN R3

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 77



 Line    I  Addr Code           Source

 4210:      1072 60 1E          	JZ	CL3		;RET IF AT END
 4211:                          	;
 4212:      1074 11 35          CL2:	ACALL	C3C		;SAVE THE ADDRESS
 4213:      1076 A3             	INC	DPTR		;POINT TO LINE NUMBER
 4214:      1077 D1 52          	ACALL	PMTOP1		;PUT LINE NUMBER ON THE S
 4215:      1079 51 08          	ACALL	CMPLK		;COMPARE LN TO END ADDRESS
 4216:      107B 40 15          	JC	CL3		;EXIT IF GREATER
 4217:      107D 12 07 8D       	CALL	BCK		;CHECK FOR A CONTROL C
 4218:      1080 51 0B          	ACALL	DEC_ASTKA	;SAVE THE COMPARE ADDRE
 4219:      1082 12 0E A2       	CALL	DP_T		;RESTORE ADDRESS
 4220:      1085 11 A3          	ACALL	UPPL		;UN-PROCESS THE LINE
 4221:      1087 11 35          	ACALL	C3C		;SAVE THE CR ADDRESS
 4222:      1089 11 94          	ACALL	CL6		;PRINT IT
 4223:      108B A3             	INC	DPTR		;BUMP POINTER TO NEXT LINE
 4224:      108C E0             	MOVX	A,@DPTR 	;GET LIN LENGTH
 4225:      108D D5 E0 E4       	DJNZ	ACC,CL2 	;LOOP
 4226:      1090 51 4F          	ACALL	INC_ASTKA	;WASTE THE COMPARE BYTE
 4227:                          	;
 4228:      1092 E1 87          CL3:	AJMP	CMND1		;BACK TO COMMAND PROCES
 4229:                          	;
 4230:      1094 90 00 07       CL6:	MOV	DPTR,#IBUF	;PRINT IBUF
 4231:      1097 12 06 C1       	CALL	PRNTCR		;PRINT IT
 4232:      109A 12 0E A2       	CALL	DP_T
 4233:                          	;
 4234:      109D 02 06 A5       CL7:	JMP	CRLF
 4235:                          	;
 4236:      10A0 12 05 79       UPPL0:	LCALL	X31DP
 4237:                          	;
 4238:                          	;**************************************
 4239:                          	;
 4240:                          	;UPPL - UN PREPROCESS A LINE ADDRESSED 
 4241:                          	;	RETURN SOURCE ADDRESS OF CR IN DPTR O
 4242:                          	;
 4243:                          	;**************************************
 4244:                          	;
 4245:      10A3 7B 00          UPPL:	MOV	R3,#HIGH IBUF	;POINT R3 AT HIG
 4246:      10A5 79 07          	MOV	R1,#LOW IBUF	;POINT R1 AT IBUF
 4247:      10A7 A3             	INC	DPTR		;SKIP OVER LINE LENGTH
 4248:                          ;
 4249:                          ;***************************************
 4250:                          ;****** Elektor 1 Patch ****************
 4251:                          ;
 4252:                          ;	ACALL	C3C		;SAVE THE DPTR (DP_T)
 4253:                          ;	CALL	L20DPI		;PUT LINE NUMBER IN R2:R0
 4254:                          ;	CALL	FP_BASE8	;CONVERT R2:R0 TO INTEGE
 4255:                          ;	CALL	DP_T
 4256:                          ;	INC	DPTR		;BUMP DPTR PAST THE LINE NUM
 4257:                          ;
 4258:                          ;****** Proper code starts here: *******
 4259:                          ;
 4260:      10A8 12 05 73       	lcall	L20DPI		;PUT LINE NUMBER IN R2:R0
 4261:      10AB 12 19 7F       	lcall	FP_BASE8	;CONVERT R2:R0 TO INTEGE
 4262:                          ;
 4263:                          ;****** continue with original code: ***
 4264:                          ;
 4265:      10AE B9 0D 00       UPP0:	CJNE	R1,#LOW IBUF+6,UPP01

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 78



 Line    I  Addr Code           Source

 4266:      10B1 40 22          UPP01:	JC	UPP91		;PUT SPACES IN TEXT
 4267:      10B3 A3             	INC	DPTR		;BUMP PAST LN HIGH
 4268:      10B4 E0             	MOVX	A,@DPTR 	;GET USER TEXT
 4269:      10B5 FE             	MOV	R6,A		;SAVE A IN R6 FOR TOKE COMPAR
 4270:      10B6 20 E7 24       	JB	ACC.7,UPP1	;IF TOKEN, PROCESS
 4271:      10B9 B4 20 00       	CJNE	A,#20H,UPP02	;TRAP THE USER TOKENS
 4272:      10BC 50 03          UPP02:	JNC	UPP03
 4273:      10BE B4 0D 1C       	CJNE	A,#CR,UPP1	;DO IT IF NOT A CR
 4274:      10C1 B4 22 09       UPP03:	CJNE	A,#'"',UPP9     ;SEE IF STRI
 4275:      10C4 31 21          	ACALL	UPP7		;SAVE IT
 4276:      10C6 31 23          UPP04:	ACALL	UPP8		;GET THE NEXT CHARACT
 4277:      10C8 B4 22 FB       	CJNE	A,#'"',UPP04    ;LOOP ON QUOTES
 4278:      10CB 80 E1          	SJMP	UPP0
 4279:                          	;
 4280:      10CD B4 3A 09       UPP9:	CJNE	A,#':',UPP1A    ;PUT A SPACE 
 4281:      10D0 31 1F          	ACALL	UPP7A
 4282:      10D2 EE             	MOV	A,R6
 4283:      10D3 31 21          	ACALL	UPP7
 4284:      10D5 31 1F          UPP91:	ACALL	UPP7A
 4285:      10D7 80 D5          	SJMP	UPP0
 4286:                          	;
 4287:      10D9 31 25          UPP1A:	ACALL	UPP81		;SAVE THE CHARACTER,
 4288:      10DB 80 D1          	SJMP	UPP0		;EXIT IF A CR, ELSE LOOP
 4289:                          	;
 4290:      10DD 11 35          UPP1:	ACALL	C3C		;SAVE THE TEXT POINTER
 4291:      10DF A2 2D          	MOV	C,XBIT
 4292:      10E1 92 D5          	MOV	F0,C		;SAVE XBIT IN F0
 4293:      10E3 90 01 75       UPP11:	MOV	DPTR,#TOKTAB	;POINT AT TOKEN 
 4294:      10E6 30 D5 03       	JNB	F0,UPP2
 4295:      10E9 12 20 78       	LCALL	2078H		;SET UP DPTR FOR LOOKUP
 4296:                          	;
 4297:      10EC E4             UPP2:	CLR	A		;ZERO A FOR LOOKUP
 4298:      10ED 93             	MOVC	A,@A+DPTR	;GET TOKEN
 4299:      10EE A3             	INC	DPTR		;ADVANCE THE TOKEN POINTER
 4300:      10EF B4 FF 05       	CJNE	A,#0FFH,UP_2	;SEE IF DONE
 4301:      10F2 10 D5 EE       	JBC	F0,UPP11	;NOW DO NORMAL TABLE
 4302:      10F5 E1 87          	AJMP	CMND1		;EXIT IF NOT FOUND
 4303:                          	;
 4304:      10F7 B5 06 F2       UP_2:	CJNE	A,R6B0,UPP2	;LOOP UNTIL THE S
 4305:                          	;
 4306:      10FA B4 B0 00       UP_3:	CJNE	A,#T_UOP,UP_4
 4307:      10FD 50 02          UP_4:	JNC	UPP3
 4308:      10FF 31 1F          	ACALL	UPP7A		;PRINT THE SPACE IF OK
 4309:                          	;
 4310:      1101 E4             UPP3:	CLR	A		;DO LOOKUP
 4311:      1102 93             	MOVC	A,@A+DPTR
 4312:      1103 20 E7 07       	JB	ACC.7,UPP4	;EXIT IF DONE, ELSE SAVE
 4313:      1106 60 05          	JZ	UPP4		;DONE IF ZERO
 4314:      1108 31 21          	ACALL	UPP7		;SAVE THE CHARACTER
 4315:      110A A3             	INC	DPTR
 4316:      110B 80 F4          	SJMP	UPP3		;LOOP
 4317:                          	;
 4318:      110D 12 0E A2       UPP4:	CALL	DP_T		;GET IT BACK
 4319:      1110 EE             	MOV	A,R6		;SEE IF A REM TOKEN
 4320:      1111 64 96          	XRL	A,#T_REM
 4321:      1113 70 04          	JNZ	UPP42

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 79



 Line    I  Addr Code           Source

 4322:      1115 31 23          UPP41:	ACALL	UPP8
 4323:      1117 80 FC          	SJMP	UPP41
 4324:      1119 50 93          UPP42:	JNC	UPP0		;START OVER AGAIN IF NO
 4325:      111B 31 1F          	ACALL	UPP7A		;PRINT THE SPACE IF OK
 4326:      111D 80 8F          	SJMP	UPP0		;DONE
 4327:                          	;
 4328:      111F 74 20          UPP7A:	MOV	A,#' '          ;OUTPUT A SPA
 4329:                          	;
 4330:      1121 C1 44          UPP7:	AJMP	PPL91		;SAVE A
 4331:                          	;
 4332:      1123 A3             UPP8:	INC	DPTR
 4333:      1124 E0             	MOVX	A,@DPTR
 4334:      1125 B4 0D F9       UPP81:	CJNE	A,#CR,UPP7
 4335:      1128 C1 30          	AJMP	PPL71
 4336:                          	;
 4337:                          	;**************************************
 4338:                          	;
 4339:                          	; This table contains all of the floati
 4340:                          	;
 4341:                          	; The constants in ROM are stored "back
 4342:                          	; basic normally treats floating point 
 4343:                          	; loading from the exponent and decreme
 4344:                          	; ROM constants pointers load from the 
 4345:                          	; digits and increment the pointers. Th
 4346:                          	; arg stack loading faster and 2) compe
 4347:                          	; no decrement data pointer instruction
 4348:                          	;
 4349:                          	; The numbers are stored as follows:
 4350:                          	;
 4351:                          	; BYTE X+5    = MOST SIGNIFICANT DIGITS
 4352:                          	; BYTE X+4    = NEXT MOST SIGNIFICANT D
 4353:                          	; BYTE X+3    = NEXT LEAST SIGNIFICANT 
 4354:                          	; BYTE X+2    = LEAST SIGNIFICANT DIGIT
 4355:                          	; BYTE X+1    = SIGN OF THE ABOVE MANTI
 4356:                          	; BYTE X      = EXPONENT IN TWO'S COMPL
 4357:                          	;		ZERO EXPONENT = THE NUMBER ZERO
 4358:                          	;
 4359:                          	;**************************************
 4360:                          	;
 4361:      112A 7E             ATTAB:	DB	128-2		; ARCTAN LOOKUP
 4362:      112B 00             	DB	00H
 4363:      112C 57             	DB	57H
 4364:      112D 22             	DB	22H
 4365:      112E 66             	DB	66H
 4366:      112F 28             	DB	28H
 4367:                          	;
 4368:      1130 7F             	DB	128-1
 4369:      1131 01             	DB	01H
 4370:      1132 37             	DB	37H
 4371:      1133 57             	DB	57H
 4372:      1134 16             	DB	16H
 4373:      1135 16             	DB	16H
 4374:                          	;
 4375:      1136 7F             	DB	128-1
 4376:      1137 00             	DB	00H
 4377:      1138 14             	DB	14H

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 80



 Line    I  Addr Code           Source

 4378:      1139 96             	DB	96H
 4379:      113A 90             	DB	90H
 4380:      113B 42             	DB	42H
 4381:                          	;
 4382:      113C 7F             	DB	128-1
 4383:      113D 01             	DB	01H
 4384:      113E 40             	DB	40H
 4385:      113F 96             	DB	96H
 4386:      1140 28             	DB	28H
 4387:      1141 75             	DB	75H
 4388:                          	;
 4389:      1142 80             	DB	128
 4390:      1143 00             	DB	00H
 4391:      1144 64             	DB	64H
 4392:      1145 62             	DB	62H
 4393:      1146 65             	DB	65H
 4394:      1147 10             	DB	10H
 4395:                          	;
 4396:      1148 80             	DB	128
 4397:      1149 01             	DB	01H
 4398:      114A 99             	DB	99H
 4399:      114B 88             	DB	88H
 4400:      114C 20             	DB	20H
 4401:      114D 14             	DB	14H
 4402:                          	;
 4403:      114E 80             	DB	128
 4404:      114F 00             	DB	00H
 4405:      1150 51             	DB	51H
 4406:      1151 35             	DB	35H
 4407:      1152 99             	DB	99H
 4408:      1153 19             	DB	19H
 4409:                          	;
 4410:      1154 80             	DB	128
 4411:      1155 01             	DB	01H
 4412:      1156 45             	DB	45H
 4413:      1157 31             	DB	31H
 4414:      1158 33             	DB	33H
 4415:      1159 33             	DB	33H
 4416:                          	;
 4417:      115A 81             	DB	129
 4418:      115B 00             	DB	00H
 4419:      115C 00             	DB	00H
 4420:      115D 00             	DB	00H
 4421:      115E 00             	DB	00H
 4422:      115F 10             	DB	10H
 4423:                          	;
 4424:      1160 FF             	DB	0FFH		;END OF TABLE
 4425:                          	;
 4426:      1161 81             NTWO:	DB	129
 4427:      1162 00             	DB	0
 4428:      1163 00             	DB	0
 4429:      1164 00             	DB	0
 4430:      1165 00             	DB	0
 4431:      1166 20             	DB	20H
 4432:                          ;
 4433:                          ;***************************************

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 81



 Line    I  Addr Code           Source

 4434:                          ;****** Use XTAL up to 47 MHz **********
 4435:                          ;****** Wulf 2 *************************
 4436:                          ;
 4437:                          ;TTIME: DB	128-4		; CLOCK CALCULATION
 4438:                          ;	DB	00H
 4439:                          ;	DB	00H
 4440:                          ;	DB	00H
 4441:                          ;	DB	04H
 4442:                          ;	DB	13H
 4443:                          ;
 4444:      1167 7B             ttime:	db	128-5		;New clock calculation 
 4445:      1168 00             	db	00H		;16 bit mode
 4446:      1169 42             	db	42H
 4447:      116A 60             	db	60H
 4448:      116B 27             	db	27H
 4449:      116C 16             	db	16H
 4450:                          ;
 4451:                          ;***************************************
 4452:                          ;
 4453:                          	;**************************************
 4454:                          	;
 4455:                          	; COSINE - Add pi/2 to stack, then fall
 4456:                          	;
 4457:                          	;**************************************
 4458:                          	;
 4459:      116D 31 92          ACOS:	ACALL	POTWO		;PUT PI/2 ON THE STAC
 4460:      116F F1 41          	ACALL	AADD		;TOS = TOS+PI/2
 4461:                          	;
 4462:                          	;**************************************
 4463:                          	;
 4464:                          	; SINE - use taylor series to calculate
 4465:                          	;
 4466:                          	;**************************************
 4467:                          	;
 4468:      1171 91 7F          ASIN:	ACALL	PIPI		;PUT PI ON THE STACK
 4469:      1173 31 B5          	ACALL	RV		;REDUCE THE VALUE
 4470:      1175 E5 46          	MOV	A,MT2		;CALCULATE THE SIGN
 4471:      1177 54 01          	ANL	A,#01H		;SAVE LSB
 4472:      1179 62 45          	XRL	MT1,A		;SAVE SIGN IN MT1
 4473:      117B 91 2C          	ACALL	CSTAKA		;NOW CONVERT TO ONE QUADR
 4474:      117D 31 92          	ACALL	POTWO
 4475:      117F 51 08          	ACALL	CMPLK		;DO COMPARE
 4476:      1181 40 04          	JC	ASIN1
 4477:      1183 91 7F          	ACALL	PIPI
 4478:      1185 F1 1C          	ACALL	ASUB
 4479:      1187 71 8F          ASIN1:	ACALL	AABS
 4480:      1189 90 16 CE       	MOV	DPTR,#SINTAB	;SET UP LOOKUP TABLE
 4481:      118C 31 9B          	ACALL	POLYC		;CALCULATE THE POLY
 4482:      118E 31 DA          	ACALL	STRIP
 4483:      1190 21 FC          	AJMP	SIN0
 4484:                          	;
 4485:                          	; Put PI/2 on the stack
 4486:                          	;
 4487:      1192 91 7F          POTWO:	ACALL	PIPI		;PUT PI ON THE STACK,
 4488:                          	;
 4489:      1194 90 11 61       DBTWO:	MOV	DPTR,#NTWO

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 82



 Line    I  Addr Code           Source

 4490:      1197 91 33          	ACALL	PUSHC
 4491:                          	;MOV	A,#2		;BY TWO
 4492:                          	;ACALL	TWO_R2
 4493:      1199 81 0A          	AJMP	ADIV
 4494:                          	;
 4495:                          	;**************************************
 4496:                          	;
 4497:                          POLYC:	; Expand a power series to calcul
 4498:                          	;
 4499:                          	;**************************************
 4500:                          	;
 4501:      119B 91 2A          	ACALL	CSTAKA2 	;COPY THE STACK
 4502:      119D 31 B0          	ACALL	AMUL		;SQUARE THE STACK
 4503:      119F 91 48          	ACALL	POP_T1		;SAVE X*X
 4504:      11A1 91 33          	ACALL	PUSHC		;PUT CONSTANT ON STACK
 4505:                          	;
 4506:      11A3 91 4F          POLY1:	ACALL	PUSH_T1 	;PUT COMPUTED VALU
 4507:      11A5 31 B0          	ACALL	AMUL		;MULTIPLY CONSTANT AND COMP
 4508:      11A7 91 33          	ACALL	PUSHC		;PUT NEXT CONSTANT ON STAC
 4509:      11A9 F1 41          	ACALL	AADD		;ADD IT TO THE OLD VALUE
 4510:      11AB E4             	CLR	A		;CHECK TO SEE IF DONE
 4511:      11AC 93             	MOVC	A,@A+DPTR
 4512:      11AD B4 FF F3       	CJNE	A,#0FFH,POLY1	;LOOP UNTIL DONE
 4513:                          	;
 4514:      11B0 12 19 75       AMUL:	LCALL	FP_BASE3
 4515:      11B3 01 38          	AJMP	FPTST
 4516:                          	;
 4517:                          	;**************************************
 4518:                          	;
 4519:                          RV:	; Reduce a value for Trig and A**X f
 4520:                          	;
 4521:                          	; value = (value/x - INT(value/x)) * x
 4522:                          	;
 4523:                          	;**************************************
 4524:                          	;
 4525:      11B5 91 6C          	ACALL	C2_T2		;COPY TOS TO T2
 4526:      11B7 91 0A          	ACALL	ADIV		;TOS = TOS/TEMP2
 4527:      11B9 71 8F          	ACALL	AABS		;MAKE THE TOS A POSITIVE NU
 4528:      11BB F5 45          	MOV	MT1,A		;SAVE THE SIGN
 4529:      11BD 91 2A          	ACALL	CSTAKA2 	;COPY THE STACK TWICE
 4530:      11BF 51 23          	ACALL	IFIX		;PUT THE NUMBER IN R3:R1
 4531:      11C1 C0 03          	PUSH	R3B0		;SAVE R3
 4532:      11C3 89 46          	MOV	MT2,R1		;SAVE THE LS BYTE IN MT2
 4533:      11C5 71 6D          	ACALL	AINT		;MAKE THE TOS AN INTEGER
 4534:      11C7 F1 1C          	ACALL	ASUB		;TOS = TOS/T2 - INT(TOS/T2)
 4535:      11C9 91 56          	ACALL	P_T2		;TOS = T2
 4536:      11CB 31 B0          	ACALL	AMUL		;TOS = T2*(TOS/T2 - INT(TOS
 4537:      11CD D0 03          	POP	R3B0		;RESTORE R3
 4538:      11CF 22             	RET			;EXIT
 4539:                          	;
 4540:                          	;**************************************
 4541:                          	;
 4542:                          	; TAN
 4543:                          	;
 4544:                          	;**************************************
 4545:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 83



 Line    I  Addr Code           Source

 4546:      11D0 91 2C          ATAN:	ACALL	CSTAKA		;DUPLACATE STACK
 4547:      11D2 31 71          	ACALL	ASIN		;TOS = SIN(X)
 4548:      11D4 91 5A          	ACALL	SWAP_ASTKA	;TOS = X
 4549:      11D6 31 6D          	ACALL	ACOS		;TOS = COS(X)
 4550:      11D8 81 0A          	AJMP	ADIV		;TOS = SIN(X)/COS(X)
 4551:                          	;
 4552:      11DA 51 53          STRIP:	ACALL	SETREG		;SETUP R0
 4553:      11DC 7B 01          	MOV	R3,#1		;LOOP COUNT
 4554:      11DE 61 81          	AJMP	AI11		;WASTE THE LSB
 4555:                          	;
 4556:                          	;**************************************
 4557:                          	;
 4558:                          	; ARC TAN
 4559:                          	;
 4560:                          	;**************************************
 4561:                          	;
 4562:      11E0 71 8F          AATAN:	ACALL	AABS
 4563:      11E2 F5 45          	MOV	MT1,A		;SAVE THE SIGN
 4564:      11E4 51 53          	ACALL	SETREG		;GET THE EXPONENT
 4565:      11E6 24 7F          	ADD	A,#7FH		;BIAS THE EXPONENT
 4566:      11E8 92 2A          	MOV	UBIT,C		;SAVE CARRY STATUS
 4567:      11EA 50 02          	JNC	AATAN1		;SEE IF > 1
 4568:      11EC 51 7C          	ACALL	RECIP		;IF > 1, TAKE RECIP
 4569:      11EE 90 11 2A       AATAN1: MOV	DPTR,#ATTAB	;SET UP TO CALCU
 4570:      11F1 31 9B          	ACALL	POLYC		;CALCULATE THE POLY
 4571:      11F3 30 2A 06       	JNB	UBIT,SIN0	;JUMP IF NOT SET
 4572:      11F6 71 A1          	ACALL	ANEG		;MAKE X POLY NEGATIVE
 4573:      11F8 31 92          	ACALL	POTWO		;SUBTRACT PI/2
 4574:      11FA F1 41          	ACALL	AADD
 4575:                          	;
 4576:      11FC E5 45          SIN0:	MOV	A,MT1		;GET THE SIGN
 4577:      11FE 60 19          	JZ	SRT
 4578:      1200 61 A1          	AJMP	ANEG
 4579:                          	;
 4580:                          	;**************************************
 4581:                          	;
 4582:                          	; FCOMP - COMPARE 0FFFFH TO TOS
 4583:                          	;
 4584:                          	;**************************************
 4585:                          	;
 4586:      1202 91 2C          FCMP:	ACALL	CSTAKA		;COPY THE STACK
 4587:      1204 71 CB          	ACALL	FSTK		;MAKE THE TOS = 0FFFFH
 4588:      1206 91 5A          	ACALL	SWAP_ASTKA	;NOW COMPARE IS 0FFFFH
 4589:                          	;
 4590:      1208 02 19 73       CMPLK:	JMP	FP_BASE2	;DO THE COMPARE
 4591:                          	;
 4592:                          	;**************************************
 4593:                          	;
 4594:                          DEC_ASTKA:	;Push ARG STACK and check for
 4595:                          	;
 4596:                          	;**************************************
 4597:                          	;
 4598:      120B 74 FA          	MOV	A,#-FPSIZ
 4599:      120D 25 09          	ADD	A,ASTKA
 4600:      120F B4 32 00       	CJNE	A,#LOW TM_TOP+6,DEC_ASTKA1
 4601:                          DEC_ASTKA1:

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 84



 Line    I  Addr Code           Source

 4602:      1212 40 06          	JC	E4YY
 4603:      1214 F5 09          	MOV	ASTKA,A
 4604:      1216 F9             	MOV	R1,A
 4605:      1217 7B 01          	MOV	R3,#ASTKAH
 4606:                          	;
 4607:      1219 22             SRT:	RET
 4608:                          	;
 4609:      121A 90 03 7B       E4YY:	MOV	DPTR,#EXA
 4610:      121D 01 4B          	AJMP	FPTS		;ARG STACK ERROR
 4611:                          	;
 4612:                          	;
 4613:      121F 91 33          AXTAL3: ACALL	PUSHC		;PUSH CONSTANT, THE
 4614:      1221 31 B0          	ACALL	AMUL
 4615:                          	;
 4616:                          	; Fall thru to IFIX
 4617:                          	;
 4618:                          	;**************************************
 4619:                          	;
 4620:                          IFIX:	; Convert a floating point number 
 4621:                          	;
 4622:                          	;**************************************
 4623:                          	;
 4624:      1223 E4             	CLR	A		;RESET THE START
 4625:      1224 FB             	MOV	R3,A
 4626:      1225 F9             	MOV	R1,A
 4627:      1226 A8 09          	MOV	R0,ASTKA	;GET THE ARG STACK
 4628:      1228 75 A0 01       	MOV	P2,#ASTKAH
 4629:      122B E2             	MOVX	A,@R0		;READ EXPONENT
 4630:      122C C3             	CLR	C
 4631:      122D 94 81          	SUBB	A,#81H		;BASE EXPONENT
 4632:      122F FC             	MOV	R4,A		;SAVE IT
 4633:      1230 18             	DEC	R0		;POINT AT SIGN
 4634:      1231 E2             	MOVX	A,@R0		;GET THE SIGN
 4635:      1232 70 56          	JNZ	SQ_ERR		;ERROR IF NEGATIVE
 4636:      1234 40 19          	JC	INC_ASTKA	;EXIT IF EXPONENT IS < 81H
 4637:      1236 0C             	INC	R4		;ADJUST LOOP COUNTER
 4638:      1237 E8             	MOV	A,R0		;BUMP THE POINTER REGISTER
 4639:      1238 94 05          	SUBB	A,#FPSIZ-1
 4640:      123A F8             	MOV	R0,A
 4641:                          	;
 4642:      123B 08             I2:	INC	R0		;POINT AT DIGIT
 4643:      123C E2             	MOVX	A,@R0		;GET DIGIT
 4644:      123D C4             	SWAP	A		;FLIP
 4645:      123E 12 19 83       	CALL	FP_BASE10	;ACCUMULATE
 4646:      1241 40 47          	JC	SQ_ERR
 4647:      1243 DC 02          	DJNZ	R4,I21
 4648:      1245 80 08          	SJMP	INC_ASTKA
 4649:      1247 E2             I21:	MOVX	A,@R0		;GET DIGIT
 4650:      1248 12 19 83       	CALL	FP_BASE10
 4651:      124B 40 3D          	JC	SQ_ERR
 4652:      124D DC EC          	DJNZ	R4,I2
 4653:                          	;
 4654:                          	;**************************************
 4655:                          	;
 4656:                          INC_ASTKA:	; Pop the ARG STACK and check
 4657:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 85



 Line    I  Addr Code           Source

 4658:                          	;**************************************
 4659:                          	;
 4660:      124F 74 06          	MOV	A,#FPSIZ	;NUMBER TO POP
 4661:      1251 80 01          	SJMP	SETREG1
 4662:                          	;
 4663:      1253 E4             SETREG: CLR	A		;DON'T POP ANYTHING
 4664:      1254 A8 09          SETREG1:MOV	R0,ASTKA
 4665:      1256 7A 01          	MOV	R2,#ASTKAH
 4666:      1258 8A A0          	MOV	P2,R2
 4667:      125A 28             	ADD	A,R0
 4668:      125B 40 BD          	JC	E4YY
 4669:      125D F5 09          	MOV	ASTKA,A
 4670:      125F E2             	MOVX	A,@R0
 4671:      1260 22             A_D:	RET
 4672:                          	;
 4673:                          	;**************************************
 4674:                          	;
 4675:                          	; EBIAS - Bias a number for E to the X 
 4676:                          	;
 4677:                          	;**************************************
 4678:                          	;
 4679:      1261 91 43          EBIAS:	ACALL	PUSH_ONE
 4680:      1263 31 B5          	ACALL	RV
 4681:      1265 BB 00 22       	CJNE	R3,#00H,SQ_ERR	;ERROR IF R3 <> 0
 4682:      1268 91 6C          	ACALL	C2_T2		;TEMP 2 GETS FRACTIONS
 4683:      126A 51 4F          	ACALL	INC_ASTKA
 4684:      126C 91 48          	ACALL	POP_T1
 4685:      126E 91 43          	ACALL	PUSH_ONE
 4686:                          	;
 4687:      1270 E5 46          AELP:	MOV	A,MT2
 4688:      1272 70 0E          	JNZ	AEL1
 4689:                          	;
 4690:      1274 E5 45          	MOV	A,MT1
 4691:      1276 60 E8          	JZ	A_D
 4692:      1278 90 01 1E       	MOV	DPTR,#FPT2-1
 4693:      127B F0             	MOVX	@DPTR,A 	;MAKE THE FRACTIONS NEGAT
 4694:                          	;
 4695:      127C 91 43          RECIP:	ACALL	PUSH_ONE
 4696:      127E 91 5A          	ACALL	SWAP_ASTKA
 4697:      1280 81 0A          	AJMP	ADIV
 4698:                          	;
 4699:      1282 15 46          AEL1:	DEC	MT2
 4700:      1284 91 4F          	ACALL	PUSH_T1
 4701:      1286 31 B0          	ACALL	AMUL
 4702:      1288 80 E6          	SJMP	AELP
 4703:                          	;
 4704:      128A 02 09 BD       SQ_ERR: LJMP	E3XX		;LINK TO BAD ARG
 4705:                          	;
 4706:                          	;**************************************
 4707:                          	;
 4708:                          	; SQUARE ROOT
 4709:                          	;
 4710:                          	;**************************************
 4711:                          	;
 4712:      128D 71 8F          ASQR:	ACALL	AABS		;GET THE SIGN
 4713:      128F 70 F9          	JNZ	SQ_ERR		;ERROR IF NEGATIVE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 86



 Line    I  Addr Code           Source

 4714:      1291 91 6C          	ACALL	C2_T2		;COPY VARIABLE TO T2
 4715:      1293 91 48          	ACALL	POP_T1		;SAVE IT IN T1
 4716:      1295 78 19          	MOV	R0,#LOW FPT1
 4717:      1297 E2             	MOVX	A,@R0		;GET EXPONENT
 4718:      1298 60 24          	JZ	SQR41		;EXIT IF ZERO
 4719:      129A 24 80          	ADD	A,#128		;BIAS THE EXPONENT
 4720:      129C 50 05          	JNC	SQR1		;SEE IF < 80H
 4721:      129E 03             	RR	A
 4722:      129F 54 7F          	ANL	A,#127
 4723:      12A1 80 07          	SJMP	SQR2
 4724:                          	;
 4725:      12A3 F4             SQR1:	CPL	A		;FLIP BITS
 4726:      12A4 04             	INC	A
 4727:      12A5 03             	RR	A
 4728:      12A6 54 7F          	ANL	A,#127		;STRIP MSB
 4729:      12A8 F4             	CPL	A
 4730:      12A9 04             	INC	A
 4731:                          	;
 4732:      12AA 24 80          SQR2:	ADD	A,#128		;BIAS EXPONENT
 4733:      12AC F2             	MOVX	@R0,A		;SAVE IT
 4734:                          	;
 4735:                          	; NEWGUESS = ( X/OLDGUESS + OLDGUESS) /
 4736:                          	;
 4737:      12AD 91 56          SQR4:	ACALL	P_T2		;TOS = X
 4738:      12AF 91 4F          	ACALL	PUSH_T1 	;PUT NUMBER ON STACK
 4739:      12B1 91 0A          	ACALL	ADIV		;TOS = X/GUESS
 4740:      12B3 91 4F          	ACALL	PUSH_T1 	;PUT ON AGAIN
 4741:      12B5 F1 41          	ACALL	AADD		;TOS = X/GUESS + GUESS
 4742:      12B7 31 94          	ACALL	DBTWO		;TOS = ( X/GUESS + GUESS )
 4743:      12B9 71 1C          	ACALL	TEMP_COMP	;SEE IF DONE
 4744:      12BB 30 D5 EF       	JNB	F0,SQR4
 4745:                          	;
 4746:      12BE 81 4F          SQR41:	AJMP	PUSH_T1 	;PUT THE ANSWER ON 
 4747:                          	;
 4748:                          	;**************************************
 4749:                          	;
 4750:                          	; NATURAL LOG
 4751:                          	;
 4752:                          	;**************************************
 4753:                          	;
 4754:      12C0 71 8F          ALN:	ACALL	AABS		;MAKE SURE THAT NUM IS 
 4755:      12C2 70 C6          	JNZ	SQ_ERR		;ERROR IF NOT
 4756:      12C4 F5 46          	MOV	MT2,A		;CLEAR FOR LOOP
 4757:      12C6 08             	INC	R0		;POINT AT EXPONENT
 4758:      12C7 E2             	MOVX	A,@R0		;READ THE EXPONENT
 4759:      12C8 60 C0          	JZ	SQ_ERR		;ERROR IF EXPONENT IS ZERO
 4760:      12CA B4 81 00       	CJNE	A,#81H,ALN1	;SEE IF NUM >= 1
 4761:      12CD 92 2A          ALN1:	MOV	UBIT,C		;SAVE CARRY STATUS
 4762:      12CF 40 02          	JC	ALNL		;TAKE RECIP IF >= 1
 4763:      12D1 51 7C          	ACALL	RECIP
 4764:                          	;
 4765:                          	; Loop to reduce
 4766:                          	;
 4767:      12D3 91 2C          ALNL:	ACALL	CSTAKA		;COPY THE STACK FOR 
 4768:      12D5 91 43          	ACALL	PUSH_ONE	;COMPARE NUM TO ONE
 4769:      12D7 51 08          	ACALL	CMPLK

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 87



 Line    I  Addr Code           Source

 4770:      12D9 50 1D          	JNC	ALNO		;EXIT IF DONE
 4771:      12DB 51 53          	ACALL	SETREG		;GET THE EXPONENT
 4772:      12DD 24 85          	ADD	A,#85H		;SEE HOW BIG IT IS
 4773:      12DF 50 0E          	JNC	ALN11		;BUMP BY EXP(11) IF TOO SMAL
 4774:      12E1 91 30          	ACALL	PLNEXP		;PUT EXP(1) ON STACK
 4775:      12E3 74 01          	MOV	A,#1		;BUMP COUNT
 4776:                          	;
 4777:      12E5 25 46          ALNE:	ADD	A,MT2
 4778:      12E7 40 A1          	JC	SQ_ERR
 4779:      12E9 F5 46          	MOV	MT2,A
 4780:      12EB 31 B0          	ACALL	AMUL		;BIAS THE NUMBER
 4781:      12ED 80 E4          	SJMP	ALNL
 4782:                          	;
 4783:      12EF 90 17 F2       ALN11:	MOV	DPTR,#EXP11	;PUT EXP(11) ON S
 4784:      12F2 91 33          	ACALL	PUSHC
 4785:      12F4 74 0B          	MOV	A,#11
 4786:      12F6 80 ED          	SJMP	ALNE
 4787:                          	;
 4788:      12F8 91 6C          ALNO:	ACALL	C2_T2		;PUT NUM IN TEMP 2
 4789:      12FA 91 43          	ACALL	PUSH_ONE	;TOS = 1
 4790:      12FC F1 1C          	ACALL	ASUB		;TOS = X - 1
 4791:      12FE 91 56          	ACALL	P_T2		;TOS = X
 4792:      1300 91 43          	ACALL	PUSH_ONE	;TOS = 1
 4793:      1302 F1 41          	ACALL	AADD		;TOS = X + 1
 4794:      1304 91 0A          	ACALL	ADIV		;TOS = (X-1)/(X+1)
 4795:      1306 90 16 A9       	MOV	DPTR,#LNTAB	;LOG TABLE
 4796:      1309 31 9B          	ACALL	POLYC
 4797:      130B A3             	INC	DPTR		;POINT AT LN(10)
 4798:      130C 91 33          	ACALL	PUSHC
 4799:      130E 31 B0          	ACALL	AMUL
 4800:      1310 E5 46          	MOV	A,MT2		;GET THE COUNT
 4801:      1312 91 B1          	ACALL	TWO_R2		;PUT IT ON THE STACK
 4802:      1314 F1 1C          	ACALL	ASUB		;INT - POLY
 4803:      1316 31 DA          	ACALL	STRIP
 4804:      1318 30 2A 74       	JNB	UBIT,AABS
 4805:                          	;
 4806:      131B 22             LN_D:	RET
 4807:                          	;
 4808:                          	;**************************************
 4809:                          	;
 4810:                          TEMP_COMP:	; Compare FPTEMP1 to TOS, FPT
 4811:                          	;
 4812:                          	;**************************************
 4813:                          	;
 4814:      131C 91 4F          	ACALL	PUSH_T1 	;SAVE THE TEMP
 4815:      131E 91 5A          	ACALL	SWAP_ASTKA	;TRADE WITH THE NEXT N
 4816:      1320 91 2C          	ACALL	CSTAKA		;COPY THE STACK
 4817:      1322 91 48          	ACALL	POP_T1		;SAVE THE NEW NUMBER
 4818:      1324 02 19 73       	JMP	FP_BASE2	;DO THE COMPARE
 4819:                          	;
 4820:      1327 91 30          AETOX:	ACALL	PLNEXP		;EXP(1) ON TOS
 4821:      1329 91 5A          	ACALL	SWAP_ASTKA	;X ON TOS
 4822:                          	;
 4823:                          AEXP:	;EXPONENTIATION
 4824:                          	;
 4825:      132B 51 61          	ACALL	EBIAS		;T1=BASE,T2=FRACTIONS,TOS=

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 88



 Line    I  Addr Code           Source

 4826:      132D 90 01 1F       	MOV	DPTR,#FPT2	;POINT AT FRACTIONS
 4827:      1330 E0             	MOVX	A,@DPTR 	;READ THE EXP OF THE FRAC
 4828:      1331 60 E8          	JZ	LN_D		;EXIT IF ZERO
 4829:      1333 91 56          	ACALL	P_T2		;TOS = FRACTIONS
 4830:      1335 91 4F          	ACALL	PUSH_T1 	;TOS = BASE
 4831:      1337 51 53          	ACALL	SETREG		;SEE IF BASE IS ZERO
 4832:      1339 60 02          	JZ	AEXP1
 4833:      133B 51 C0          	ACALL	ALN		;TOS = LN(BASE)
 4834:      133D 31 B0          AEXP1:	ACALL	AMUL		;TOS = FRACTIONS * LN
 4835:      133F 91 30          	ACALL	PLNEXP		;TOS = EXP(1)
 4836:      1341 91 5A          	ACALL	SWAP_ASTKA	;TOS = FRACTIONS * LN(
 4837:      1343 51 61          	ACALL	EBIAS		;T2 = FRACTIONS, TOS = INT
 4838:      1345 75 46 00       	MOV	MT2,#00H	;NOW CALCULATE E**X
 4839:      1348 91 43          	ACALL	PUSH_ONE
 4840:      134A 91 2C          	ACALL	CSTAKA
 4841:      134C 91 48          	ACALL	POP_T1		;T1 = 1
 4842:                          	;
 4843:      134E 91 56          AEXL:	ACALL	P_T2		;TOS = FRACTIONS
 4844:      1350 31 B0          	ACALL	AMUL		;TOS = FRACTIONS * ACCUMLAT
 4845:      1352 05 46          	INC	MT2		;DO THE DEMONIATOR
 4846:      1354 E5 46          	MOV	A,MT2
 4847:      1356 91 B1          	ACALL	TWO_R2
 4848:      1358 91 0A          	ACALL	ADIV
 4849:      135A 91 2C          	ACALL	CSTAKA		;SAVE THE ITERATION
 4850:      135C 91 4F          	ACALL	PUSH_T1 	;NOW ACCUMLATE
 4851:      135E F1 41          	ACALL	AADD		;ADD ACCUMLATION
 4852:      1360 71 1C          	ACALL	TEMP_COMP
 4853:      1362 30 D5 E9       	JNB	F0,AEXL 	;LOOP UNTIL DONE
 4854:                          	;
 4855:      1365 51 4F          	ACALL	INC_ASTKA
 4856:      1367 91 4F          	ACALL	PUSH_T1
 4857:      1369 31 B0          	ACALL	AMUL		;LAST INT MULTIPLIED
 4858:                          	;
 4859:      136B 21 B0          MU1:	AJMP	AMUL		;FIRST INT MULTIPLIED
 4860:                          	;
 4861:                          	;**************************************
 4862:                          	;
 4863:                          	; integer operator - INT
 4864:                          	;
 4865:                          	;**************************************
 4866:                          	;
 4867:      136D 51 53          AINT:	ACALL	SETREG		;SET UP THE REGISTER
 4868:      136F 94 81          	SUBB	A,#129		;SUBTRACT EXPONENT BIAS
 4869:      1371 50 07          	JNC	AI1		;JUMP IF ACC > 81H
 4870:                          	;
 4871:                          	; Force the number to be a zero
 4872:                          	;
 4873:      1373 51 4F          	ACALL	INC_ASTKA	;BUMP THE STACK
 4874:                          	;
 4875:      1375 90 04 E0       P_Z:	MOV	DPTR,#ZRO	;PUT ZERO ON THE STAC
 4876:      1378 81 33          	AJMP	PUSHC
 4877:                          	;
 4878:      137A 94 07          AI1:	SUBB	A,#7
 4879:      137C 50 10          	JNC	AI3
 4880:      137E F4             	CPL	A
 4881:      137F 04             	INC	A

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 89



 Line    I  Addr Code           Source

 4882:      1380 FB             	MOV	R3,A
 4883:      1381 18             AI11:	DEC	R0		;POINT AT SIGN
 4884:                          	;
 4885:      1382 18             AI2:	DEC	R0		;NOW AT LSB'S
 4886:      1383 E2             	MOVX	A,@R0		;READ BYTE
 4887:      1384 54 F0          	ANL	A,#0F0H 	;STRIP NIBBLE
 4888:      1386 F2             	MOVX	@R0,A		;WRITE BYTE
 4889:      1387 DB 01          	DJNZ	R3,AI21
 4890:      1389 22             	RET
 4891:      138A E4             AI21:	CLR	A
 4892:      138B F2             	MOVX	@R0,A		;CLEAR THE LOCATION
 4893:      138C DB F4          	DJNZ	R3,AI2
 4894:                          	;
 4895:      138E 22             AI3:	RET			;EXIT
 4896:                          	;
 4897:                          	;**************************************
 4898:                          	;
 4899:                          AABS:	; Absolute value - Make sign of nu
 4900:                          	;		   return sign in ACC
 4901:                          	;
 4902:                          	;**************************************
 4903:                          	;
 4904:      138F 71 A1          	ACALL	ANEG		;CHECK TO SEE IF + OR -
 4905:      1391 70 19          	JNZ	ALPAR		;EXIT IF NON ZERO, BECAUSE T
 4906:      1393 F2             	MOVX	@R0,A		;MAKE A POSITIVE SIGN
 4907:      1394 22             	RET
 4908:                          	;
 4909:                          	;**************************************
 4910:                          	;
 4911:                          ASGN:	; Returns the sign of the number 1
 4912:                          	;
 4913:                          	;**************************************
 4914:                          	;
 4915:      1395 51 4F          	ACALL	INC_ASTKA	;POP STACK, GET EXPONEN
 4916:      1397 60 DC          	JZ	P_Z		;EXIT IF ZERO
 4917:      1399 18             	DEC	R0		;BUMP TO SIGN
 4918:      139A E2             	MOVX	A,@R0		;GET THE SIGN
 4919:      139B FF             	MOV	R7,A		;SAVE THE SIGN
 4920:      139C 91 43          	ACALL	PUSH_ONE	;PUT A ONE ON THE STACK
 4921:      139E EF             	MOV	A,R7		;GET THE SIGN
 4922:      139F 60 0B          	JZ	ALPAR		;EXIT IF ZERO
 4923:                          	;
 4924:                          	; Fall thru to ANEG
 4925:                          	;
 4926:                          	;**************************************
 4927:                          	;
 4928:                          ANEG:	; Flip the sign of the number on t
 4929:                          	;
 4930:                          	;**************************************
 4931:                          	;
 4932:      13A1 51 53          	ACALL	SETREG
 4933:      13A3 18             	DEC	R0		;POINT AT THE SIGN OF THE NUMBE
 4934:      13A4 60 06          	JZ	ALPAR		;EXIT IF ZERO
 4935:      13A6 E2             	MOVX	A,@R0
 4936:      13A7 64 01          	XRL	A,#01H		;FLIP THE SIGN
 4937:      13A9 F2             	MOVX	@R0,A

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 90



 Line    I  Addr Code           Source

 4938:      13AA 64 01          	XRL	A,#01H		;RESTORE THE SIGN
 4939:                          	;
 4940:      13AC 22             ALPAR:	RET
 4941:                          	;
 4942:                          	;**************************************
 4943:                          	;
 4944:                          ACBYTE: ; Read the ROM
 4945:                          	;
 4946:                          	;**************************************
 4947:                          	;
 4948:      13AD 51 23          	ACALL	IFIX		;GET EXPRESSION
 4949:      13AF 12 05 79       	CALL	X31DP		;PUT R3:R1 INTO THE DP
 4950:      13B2 E4             	CLR	A
 4951:      13B3 93             	MOVC	A,@A+DPTR
 4952:      13B4 81 B1          	AJMP	TWO_R2
 4953:                          	;
 4954:                          	;**************************************
 4955:                          	;
 4956:                          ADBYTE: ; Read internal memory
 4957:                          	;
 4958:                          	;**************************************
 4959:                          	;
 4960:      13B6 51 23          	ACALL	IFIX		;GET THE EXPRESSION
 4961:      13B8 12 09 D5       	CALL	R3CK		;MAKE SURE R3 = 0
 4962:      13BB E7             	MOV	A,@R1
 4963:      13BC 81 B1          	AJMP	TWO_R2
 4964:                          	;
 4965:                          	;**************************************
 4966:                          	;
 4967:                          AXBYTE: ; Read external memory
 4968:                          	;
 4969:                          	;**************************************
 4970:                          	;
 4971:      13BE 51 23          	ACALL	IFIX		;GET THE EXPRESSION
 4972:      13C0 8B A0          AXBYTE1:MOV	P2,R3
 4973:      13C2 E3             	MOVX	A,@R1
 4974:      13C3 81 B1          	AJMP	TWO_R2
 4975:                          	;
 4976:                          	;**************************************
 4977:                          	;
 4978:                          	; The relational operators - EQUAL			  
 4979:                          	;			     GREATER THAN		  (>)
 4980:                          	;			     LESS THAN			  (<)
 4981:                          	;			     GREATER THAN OR EQUAL	  (>=)
 4982:                          	;			     LESS THAN OR EQUAL 	  (<=)
 4983:                          	;			     NOT EQUAL			  (<>)
 4984:                          	;
 4985:                          	;**************************************
 4986:                          	;
 4987:      13C5 51 08          AGT:	ACALL	CMPLK
 4988:      13C7 72 D5          	ORL	C,F0		;SEE IF EITHER IS A ONE
 4989:      13C9 40 AA          AGT1:	JC	P_Z
 4990:                          	;
 4991:      13CB 90 13 D0       FSTK:	MOV	DPTR,#FS
 4992:      13CE 81 33          	AJMP	PUSHC
 4993:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 91



 Line    I  Addr Code           Source

 4994:      13D0 85             FS:	DB	85H
 4995:      13D1 00             	DB	00H
 4996:      13D2 00             	DB	00H
 4997:      13D3 50             	DB	50H
 4998:      13D4 53             	DB	53H
 4999:      13D5 65             	DB	65H
 5000:                          	;
 5001:      13D6 51 08          ALT:	ACALL	CMPLK
 5002:      13D8 B3             ALT1:	CPL	C
 5003:      13D9 80 EE          	SJMP	AGT1
 5004:                          	;
 5005:      13DB 51 08          AEQ:	ACALL	CMPLK
 5006:      13DD A2 D5          AEQ1:	MOV	C,F0
 5007:      13DF 80 F7          	SJMP	ALT1
 5008:                          	;
 5009:      13E1 51 08          ANE:	ACALL	CMPLK
 5010:      13E3 B2 D5          	CPL	F0
 5011:      13E5 80 F6          	SJMP	AEQ1
 5012:                          	;
 5013:      13E7 51 08          AGE:	ACALL	CMPLK
 5014:      13E9 80 DE          	SJMP	AGT1
 5015:                          	;
 5016:      13EB 51 08          ALE:	ACALL	CMPLK
 5017:      13ED 72 D5          	ORL	C,F0
 5018:      13EF 80 E7          	SJMP	ALT1
 5019:                          	;
 5020:                          	;**************************************
 5021:                          	;
 5022:                          ARND:	; Generate a random number
 5023:                          	;
 5024:                          	;**************************************
 5025:                          	;
 5026:      13F1 90 01 0C       	MOV	DPTR,#RCELL	;GET THE BINARY SEED
 5027:      13F4 12 05 BA       	CALL	L31DPI
 5028:      13F7 E9             	MOV	A,R1
 5029:      13F8 C3             	CLR	C
 5030:      13F9 13             	RRC	A
 5031:      13FA F8             	MOV	R0,A
 5032:      13FB 74 06          	MOV	A,#6
 5033:      13FD 13             	RRC	A
 5034:      13FE 29             	ADD	A,R1
 5035:      13FF C8             	XCH	A,R0
 5036:      1400 3B             	ADDC	A,R3
 5037:      1401 FA             	MOV	R2,A
 5038:      1402 15 82          	DEC	DPL		;SAVE THE NEW SEED
 5039:      1404 91 24          	ACALL	S20DP
 5040:      1406 91 B4          	ACALL	TWO_EY
 5041:      1408 71 CB          	ACALL	FSTK
 5042:                          	;
 5043:      140A 12 19 77       ADIV:	LCALL	FP_BASE4
 5044:      140D 01 38          	AJMP	FPTST
 5045:                          	;
 5046:                          	;**************************************
 5047:                          	;
 5048:                          SONERR: ; ON ERROR Statement
 5049:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 92



 Line    I  Addr Code           Source

 5050:                          	;**************************************
 5051:                          	;
 5052:      140F 12 0F 30       	LCALL	INTERR		;GET THE LINE NUMBER
 5053:      1412 D2 13          	SETB	ON_ERR
 5054:      1414 90 01 02       	MOV	DPTR,#ERRNUM	;POINT AT THR ERROR LO
 5055:      1417 80 0B          	SJMP	S20DP
 5056:                          	;
 5057:                          	;
 5058:                          	;**************************************
 5059:                          	;
 5060:                          SONEXT: ; ON EXT1 Statement
 5061:                          	;
 5062:                          	;**************************************
 5063:                          	;
 5064:      1419 12 0F 30       	LCALL	INTERR
 5065:      141C D2 12          	SETB	INTBIT
 5066:      141E 43 A8 84       	ORL	IE,#10000100B	;ENABLE INTERRUPTS
 5067:      1421 90 01 20       	MOV	DPTR,#INTLOC
 5068:                          	;
 5069:      1424 EA             S20DP:	MOV	A,R2		;SAVE R2:R0 @DPTR
 5070:      1425 F0             	MOVX	@DPTR,A
 5071:      1426 A3             	INC	DPTR
 5072:      1427 E8             	MOV	A,R0
 5073:      1428 F0             	MOVX	@DPTR,A
 5074:      1429 22             	RET
 5075:                          	;
 5076:                          	;**************************************
 5077:                          	;
 5078:                          	; CASTAK - Copy and push another top of
 5079:                          	;
 5080:                          	;**************************************
 5081:                          	;
 5082:      142A 91 2C          CSTAKA2:ACALL	CSTAKA		;COPY STACK TWICE
 5083:                          	;
 5084:      142C 51 53          CSTAKA: ACALL	SETREG		;SET UP R2:R0
 5085:      142E 80 23          	SJMP	PUSH_T12
 5086:                          	;
 5087:      1430 90 17 F8       PLNEXP: MOV	DPTR,#EXP1
 5088:                          	;
 5089:                          	;**************************************
 5090:                          	;
 5091:                          	; PUSHC - Push constant on to the arg s
 5092:                          	;
 5093:                          	;**************************************
 5094:                          	;
 5095:      1433 51 0B          PUSHC:	ACALL	DEC_ASTKA
 5096:      1435 8B A0          	MOV	P2,R3
 5097:      1437 7B 06          	MOV	R3,#FPSIZ	;LOOP COUNTER
 5098:                          	;
 5099:      1439 E4             PCL:	CLR	A		;SET UP A
 5100:      143A 93             	MOVC	A,@A+DPTR	;LOAD IT
 5101:      143B F3             	MOVX	@R1,A		;SAVE IT
 5102:      143C A3             	INC	DPTR		;BUMP POINTERS
 5103:      143D 19             	DEC	R1
 5104:      143E DB F9          	DJNZ	R3,PCL		;LOOP
 5105:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 93



 Line    I  Addr Code           Source

 5106:      1440 D2 24          	SETB	ARGF
 5107:      1442 22             	RET			;EXIT
 5108:                          	;
 5109:                          PUSH_ONE:;
 5110:                          	;
 5111:      1443 90 16 F2       	MOV	DPTR,#FPONE
 5112:      1446 81 33          	AJMP	PUSHC
 5113:                          	;
 5114:                          POP_T1:
 5115:                          	;
 5116:      1448 7B 01          	MOV	R3,#HIGH FPT1
 5117:      144A 79 19          	MOV	R1,#LOW FPT1
 5118:      144C 02 0F D3       	JMP	POPAS
 5119:                          	;
 5120:                          PUSH_T1:
 5121:                          	;
 5122:      144F 78 19          	MOV	R0,#LOW FPT1
 5123:                          PUSH_T11:
 5124:      1451 7A 01          	MOV	R2,#HIGH FPT1
 5125:                          PUSH_T12:
 5126:      1453 02 0F DD       	LJMP	PUSHAS
 5127:                          	;
 5128:      1456 78 1F          P_T2:	MOV	R0,#LOW FPT2
 5129:      1458 80 F7          	SJMP	PUSH_T11		;JUMP TO PUSHAS
 5130:                          	;
 5131:                          	;**************************************
 5132:                          	;
 5133:                          SWAP_ASTKA:	; SWAP TOS<>TOS-1
 5134:                          	;
 5135:                          	;**************************************
 5136:                          	;
 5137:      145A 51 53          	ACALL	SETREG		;SET UP R2:R0 AND P2
 5138:      145C 74 06          	MOV	A,#FPSIZ	;PUT TOS+1 IN R1
 5139:      145E FA             	MOV	R2,A
 5140:      145F 28             	ADD	A,R0
 5141:      1460 F9             	MOV	R1,A
 5142:                          	;
 5143:      1461 E2             S_L:	MOVX	A,@R0
 5144:      1462 FB             	MOV	R3,A
 5145:      1463 E3             	MOVX	A,@R1
 5146:      1464 F2             	MOVX	@R0,A
 5147:      1465 EB             	MOV	A,R3
 5148:      1466 F3             	MOVX	@R1,A
 5149:      1467 19             	DEC	R1
 5150:      1468 18             	DEC	R0
 5151:      1469 DA F6          	DJNZ	R2,S_L
 5152:      146B 22             	RET
 5153:                          	;
 5154:      146C 51 53          C2_T2:	ACALL	SETREG		;SET UP R2:R0
 5155:      146E 7B 01          	MOV	R3,#HIGH FPT2
 5156:      1470 79 1F          	MOV	R1,#LOW FPT2	;TEMP VALUE
 5157:                          	;
 5158:                          	; Fall thru
 5159:                          	;
 5160:                          	;**************************************
 5161:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 94



 Line    I  Addr Code           Source

 5162:                          	; VARCOP - Copy a variable from R2:R0 t
 5163:                          	;
 5164:                          	;**************************************
 5165:                          	;
 5166:      1472 7C 06          VARCOP: MOV	R4,#FPSIZ	;LOAD THE LOOP COU
 5167:                          	;
 5168:      1474 8A A0          V_C:	MOV	P2,R2		;SET UP THE PORTS
 5169:      1476 E2             	MOVX	A,@R0		;READ THE VALUE
 5170:      1477 8B A0          	MOV	P2,R3		;PORT TIME AGAIN
 5171:      1479 F3             	MOVX	@R1,A		;SAVE IT
 5172:      147A B1 8B          	ACALL	DEC3210 	;BUMP POINTERS
 5173:      147C DC F6          	DJNZ	R4,V_C		;LOOP
 5174:      147E 22             	RET			;EXIT
 5175:                          	;
 5176:      147F 90 17 FE       PIPI:	MOV	DPTR,#PIE
 5177:      1482 81 33          	AJMP	PUSHC
 5178:                          	;
 5179:                          	;**************************************
 5180:                          	;
 5181:                          	; The logical operators ANL, ORL, XRL, 
 5182:                          	;
 5183:                          	;**************************************
 5184:                          	;
 5185:      1484 91 A1          AANL:	ACALL	TWOL		;GET THE EXPRESSIONS
 5186:      1486 EB             	MOV	A,R3		;DO THE AND
 5187:      1487 5F             	ANL	A,R7
 5188:      1488 FA             	MOV	R2,A
 5189:      1489 E9             	MOV	A,R1
 5190:      148A 5E             	ANL	A,R6
 5191:      148B 80 26          	SJMP	TWO_EX
 5192:                          	;
 5193:      148D 91 A1          AORL:	ACALL	TWOL		;SAME THING FOR OR
 5194:      148F EB             	MOV	A,R3
 5195:      1490 4F             	ORL	A,R7
 5196:      1491 FA             	MOV	R2,A
 5197:      1492 E9             	MOV	A,R1
 5198:      1493 4E             	ORL	A,R6
 5199:      1494 80 1D          	SJMP	TWO_EX
 5200:                          	;
 5201:      1496 71 CB          ANOT:	ACALL	FSTK		;PUT 0FFFFH ON THE STA
 5202:                          	;
 5203:      1498 91 A1          AXRL:	ACALL	TWOL
 5204:      149A EB             	MOV	A,R3
 5205:      149B 6F             	XRL	A,R7
 5206:      149C FA             	MOV	R2,A
 5207:      149D E9             	MOV	A,R1
 5208:      149E 6E             	XRL	A,R6
 5209:      149F 80 12          	SJMP	TWO_EX
 5210:                          	;
 5211:      14A1 51 23          TWOL:	ACALL	IFIX
 5212:      14A3 AF 03          	MOV	R7,R3B0
 5213:      14A5 AE 01          	MOV	R6,R1B0
 5214:      14A7 41 23          	AJMP	IFIX
 5215:                          	;
 5216:                          	;**************************************
 5217:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 95



 Line    I  Addr Code           Source

 5218:                          AGET:	; READ THE BREAK BYTE AND PUT IT O
 5219:                          	;
 5220:                          	;**************************************
 5221:                          	;
 5222:      14A9 90 01 00       	MOV	DPTR,#GTB	;GET THE BREAK BYTE
 5223:      14AC E0             	MOVX	A,@DPTR
 5224:      14AD 10 18 01       	JBC	GTRD,TWO_R2
 5225:      14B0 E4             	CLR	A
 5226:                          	;
 5227:      14B1 7A 00          TWO_R2: MOV	R2,#00H 	;ACC GOES TO STACK
 5228:                          	;
 5229:                          	;
 5230:      14B3 F8             TWO_EX: MOV	R0,A		;R2:ACC GOES TO STACK
 5231:                          	;
 5232:                          	;
 5233:      14B4 D2 24          TWO_EY: SETB	ARGF		;R2:R0 GETS PUT ON TH
 5234:      14B6 02 19 87       	JMP	FP_BASE12	;DO IT
 5235:                          	;
 5236:                          	;**************************************
 5237:                          	;
 5238:                          	; Put directs onto the stack
 5239:                          	;
 5240:                          	;**************************************
 5241:                          	;
 5242:      14B9 E5 A8          A_IE:	MOV	A,IE		;IE
 5243:      14BB 80 F4          	SJMP	TWO_R2
 5244:                          	;
 5245:      14BD E5 B8          A_IP:	MOV	A,IP		;IP
 5246:      14BF 80 F0          	SJMP	TWO_R2
 5247:                          	;
 5248:      14C1 AA 8C          ATIM0:	MOV	R2,TH0		;TIMER 0
 5249:      14C3 A8 8A          	MOV	R0,TL0
 5250:      14C5 80 ED          	SJMP	TWO_EY
 5251:                          	;
 5252:      14C7 AA 8D          ATIM1:	MOV	R2,TH1		;TIMER 1
 5253:      14C9 A8 8B          	MOV	R0,TL1
 5254:      14CB 80 E7          	SJMP	TWO_EY
 5255:                          	;
 5256:      14CD AA CD          ATIM2:	MOV	R2,TH2
 5257:      14CF A8 CC          	MOV	R0,TL2
 5258:                          ;	DB	0AAH		;MOV R2 DIRECT OP CODE
 5259:                          ;	DB	0CDH		;T2 HIGH
 5260:                          ;	DB	0A8H		;MOV R0 DIRECT OP CODE
 5261:                          ;	DB	0CCH		;T2 LOW
 5262:      14D1 80 E1          	SJMP	TWO_EY		;TIMER 2
 5263:                          	;
 5264:      14D3 E5 C8          AT2CON: MOV	A,T2CON
 5265:                          ;	DB	0E5H		;MOV A,DIRECT OPCODE
 5266:                          ;	DB	0C8H		;T2CON LOCATION
 5267:      14D5 80 DA          	SJMP	TWO_R2
 5268:                          	;
 5269:      14D7 E5 88          ATCON:	MOV	A,TCON		;TCON
 5270:      14D9 80 D6          	SJMP	TWO_R2
 5271:                          	;
 5272:      14DB E5 89          ATMOD:	MOV	A,TMOD		;TMOD
 5273:      14DD 80 D2          	SJMP	TWO_R2

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 96



 Line    I  Addr Code           Source

 5274:                          	;
 5275:      14DF AA CB          ARCAP2: MOV	R2,RCAPH2
 5276:      14E1 A8 CA          	MOV	R0,RCAPL2
 5277:                          ;	DB	0AAH		;MOV R2, DIRECT OP CODE
 5278:                          ;	DB	0CBH		;RCAP2H LOCATION
 5279:                          ;	DB	0A8H		;MOV R0, DIRECT OP CODE
 5280:                          ;	DB	0CAH		;R2CAPL LOCATION
 5281:      14E3 80 CF          	SJMP	TWO_EY
 5282:                          	;
 5283:      14E5 E5 90          AP1:	MOV	A,P1		;GET P1
 5284:      14E7 80 C8          	SJMP	TWO_R2		;PUT IT ON THE STACK
 5285:                          	;
 5286:      14E9 E5 87          APCON:	MOV	A,PCON
 5287:                          ;	DB	0E5H		;MOV A, DIRECT OP CODE
 5288:                          ;	DB	87H		;ADDRESS OF PCON
 5289:      14EB 80 C4          	SJMP	TWO_R2		;PUT PCON ON THE STACK
 5290:                          	;
 5291:                          	;**************************************
 5292:                          	;
 5293:                          	;THIS IS THE LINE EDITOR
 5294:                          	;
 5295:                          	;TAKE THE PROCESSED LINE IN IBUF AND IN
 5296:                          	;BASIC TEXT FILE.
 5297:                          	;
 5298:                          	;**************************************
 5299:                          	;
 5300:      14ED 02 05 6E       LINE0:	LJMP	NOGO		;CAN'T EDIT A ROM
 5301:                          	;
 5302:      14F0 E5 13          LINE:	MOV	A,BOFAH
 5303:      14F2 B4 02 F8       	CJNE	A,#HIGH PSTART,LINE0
 5304:      14F5 12 05 A9       	CALL	G4		;GET END ADDRESS FOR EDITING
 5305:      14F8 AC 82          	MOV	R4,DPL
 5306:      14FA AD 83          	MOV	R5,DPH
 5307:      14FC AB 0F          	MOV	R3,TEMP5	;GET HIGH ORDER IBLN
 5308:      14FE A9 0E          	MOV	R1,TEMP4	;LOW ORDER IBLN
 5309:                          	;
 5310:      1500 12 05 8C       	CALL	GETLIN		;FIND THE LINE
 5311:      1503 70 12          	JNZ	INSR		;INSERT IF NOT ZERO, ELSE APP
 5312:                          	;
 5313:                          	;APPEND THE LINE AT THE END
 5314:                          	;
 5315:      1505 E5 0D          	MOV	A,TEMP3 	;PUT IBCNT IN THE ACC
 5316:      1507 B4 04 01       	CJNE	A,#4H,LINE1	;SEE IF NO ENTRY
 5317:      150A 22             	RET			;RET IF NO ENTRY
 5318:                          	;
 5319:      150B B1 A8          LINE1:	ACALL	FULL		;SEE IF ENOUGH SPACE 
 5320:      150D AA 05          	MOV	R2,R5B0 	;PUT END ADDRESS A INTO TR
 5321:      150F A8 04          	MOV	R0,R4B0 	;REGISTERS
 5322:      1511 B1 66          	ACALL	IMOV		;DO THE BLOCK MOVE
 5323:                          	;
 5324:      1513 74 01          UE:	MOV	A,#EOF		;SAVE EOF CHARACTER
 5325:      1515 A1 99          	AJMP	TBR
 5326:                          	;
 5327:                          	;INSERT A LINE INTO THE FILE
 5328:                          	;
 5329:      1517 FF             INSR:	MOV	R7,A		;SAVE IT IN R7

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 97



 Line    I  Addr Code           Source

 5330:      1518 12 18 54       	CALL	TEMPD		;SAVE INSERATION ADDRESS
 5331:      151B E5 0D          	MOV	A,TEMP3 	;PUT THE COUNT LENGTH IN T
 5332:      151D 40 09          	JC	LTX		;JUMP IF NEW LINE # NOT = OLD L
 5333:      151F B4 04 01       	CJNE	A,#04H,INSR1	;SEE IF NULL
 5334:      1522 E4             	CLR	A
 5335:                          	;
 5336:      1523 9F             INSR1:	SUBB	A,R7		;SUBTRACT LINE COUNT F
 5337:      1524 60 36          	JZ	LIN1		;LINE LENGTHS EQUAL
 5338:      1526 40 1F          	JC	GTX		;SMALLER LINE
 5339:                          	;
 5340:                          	;EXPAND FOR A NEW LINE OR A LARGER LINE
 5341:                          	;
 5342:      1528 FF             LTX:	MOV	R7,A		;SAVE A IN R7
 5343:      1529 E5 0D          	MOV	A,TEMP3 	;GET THE COUNT IN THE ACC
 5344:      152B B4 04 01       	CJNE	A,#04H,LTX1	;DO NO INSERTATION IF 
 5345:      152E 22             	RET			;EXIT IF IT IS
 5346:                          	;
 5347:      152F EF             LTX1:	MOV	A,R7		;GET THE COUNT BACK - DE
 5348:      1530 B1 A8          	ACALL	FULL		;SEE IF ENOUGH MEMORY NEW E
 5349:      1532 12 18 4D       	CALL	DTEMP		;GET INSERATION ADDRESS
 5350:      1535 B1 9D          	ACALL	NMOV		;R7:R6 GETS (EOFA)-DPTR
 5351:      1537 12 0D AD       	CALL	X3120
 5352:      153A A9 04          	MOV	R1,R4B0 	;EOFA LOW
 5353:      153C AB 05          	MOV	R3,R5B0 	;EOFA HIGH
 5354:      153E 0E             	INC	R6		;INCREMENT BYTE COUNT
 5355:      153F BE 00 01       	CJNE	R6,#00,LTX2	;NEED TO BUMP HIGH BYT
 5356:      1542 0F             	INC	R7
 5357:                          	;
 5358:      1543 B1 81          LTX2:	ACALL	RMOV		;GO DO THE INSERTION
 5359:      1545 80 15          	SJMP	LIN1		;INSERT THE CURRENT LINE
 5360:                          	;
 5361:      1547 F4             GTX:	CPL	A		;FLIP ACC
 5362:      1548 04             	INC	A		;TWOS COMPLEMENT
 5363:      1549 12 05 DE       	CALL	ADDPTR		;DO THE ADDITION
 5364:      154C B1 9D          	ACALL	NMOV		;R7:R6 GETS (EOFA)-DPTR
 5365:      154E A9 82          	MOV	R1,DPL		;SET UP THE REGISTERS
 5366:      1550 AB 83          	MOV	R3,DPH
 5367:      1552 AA 0F          	MOV	R2,TEMP5	;PUT INSERTATION ADDRESS I
 5368:      1554 A8 0E          	MOV	R0,TEMP4
 5369:      1556 60 02          	JZ	GTX1		;IF ACC WAS ZERO FROM NMOV, JU
 5370:      1558 B1 6D          	ACALL	LMOV		;IF NO ZERO DO A LMOV
 5371:                          	;
 5372:      155A B1 13          GTX1:	ACALL	UE		;SAVE NEW END ADDRESS
 5373:                          	;
 5374:      155C AA 0F          LIN1:	MOV	R2,TEMP5	;GET THE INSERTATION 
 5375:      155E A8 0E          	MOV	R0,TEMP4
 5376:      1560 E5 0D          	MOV	A,TEMP3 	;PUT THE COUNT LENGTH IN A
 5377:      1562 B4 04 01       	CJNE	A,#04H,IMOV	;SEE IF NULL
 5378:      1565 22             	RET			;EXIT IF NULL
 5379:                          	;
 5380:                          	;**************************************
 5381:                          	;
 5382:                          	;INSERT A LINE AT ADDRESS R2:R0
 5383:                          	;
 5384:                          	;**************************************
 5385:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 98



 Line    I  Addr Code           Source

 5386:      1566 E4             IMOV:	CLR	A		;TO SET UP
 5387:      1567 79 04          	MOV	R1,#LOW IBCNT	;INITIALIZE THE REGIS
 5388:      1569 FB             	MOV	R3,A
 5389:      156A AE 0D          	MOV	R6,TEMP3	;PUT THE BYTE COUNT IN R6 
 5390:      156C FF             	MOV	R7,A		;PUT A 0 IN R7 FOR LMOV
 5391:                          	;
 5392:                          	;**************************************
 5393:                          	;
 5394:                          	;COPY A BLOCK FROM THE BEGINNING
 5395:                          	;
 5396:                          	;R2:R0 IS THE DESTINATION ADDRESS
 5397:                          	;R3:R1 IS THE SOURCE ADDRESS
 5398:                          	;R7:R6 IS THE COUNT REGISTER
 5399:                          	;
 5400:                          	;**************************************
 5401:                          	;
 5402:      156D B1 96          LMOV:	ACALL	TBYTE		;TRANSFER THE BYTE
 5403:      156F B1 76          	ACALL	INC3210 	;BUMP THE POINTER
 5404:      1571 D1 47          	ACALL	DEC76		;BUMP R7:R6
 5405:      1573 70 F8          	JNZ	LMOV		;LOOP
 5406:      1575 22             	RET			;GO BACK TO CALLING ROUTINE
 5407:                          	;
 5408:      1576 08             INC3210:INC	R0
 5409:      1577 B8 00 01       	CJNE	R0,#00H,INC3211
 5410:      157A 0A             	INC	R2
 5411:                          	;
 5412:      157B 09             INC3211:INC	R1
 5413:      157C B9 00 01       	CJNE	R1,#00H,INC3212
 5414:      157F 0B             	INC	R3
 5415:      1580 22             INC3212:RET
 5416:                          	;
 5417:                          	;**************************************
 5418:                          	;
 5419:                          	;COPY A BLOCK STARTING AT THE END
 5420:                          	;
 5421:                          	;R2:R0 IS THE DESTINATION ADDRESS
 5422:                          	;R3:R1 IS THE SOURCE ADDRESS
 5423:                          	;R6:R7 IS THE COUNT REGISTER
 5424:                          	;
 5425:                          	;**************************************
 5426:                          	;
 5427:      1581 B1 96          RMOV:	ACALL	TBYTE		;TRANSFER THE BYTE
 5428:      1583 B1 8B          	ACALL	DEC3210 	;DEC THE LOCATIONS
 5429:      1585 D1 47          	ACALL	DEC76		;BUMP THE COUNTER
 5430:      1587 70 F8          	JNZ	RMOV		;LOOP
 5431:                          	;
 5432:      1589 00             DEC_R:	NOP			;CREATE EQUAL TIMING
 5433:      158A 22             	RET			;EXIT
 5434:                          	;
 5435:      158B 18             DEC3210:DEC	R0		;BUMP THE POINTER
 5436:      158C B8 FF 01       	CJNE	R0,#0FFH,DEC3212;SEE IF OVERFLOWED
 5437:      158F 1A             DEC3211:DEC	R2		;BUMP THE HIGH BYTE
 5438:      1590 19             DEC3212:DEC	R1		;BUMP THE POINTER
 5439:      1591 B9 FF F5       	CJNE	R1,#0FFH,DEC_R	;SEE IF OVERFLOWED
 5440:      1594 1B             	DEC	R3		;CHANGE THE HIGH BYTE
 5441:      1595 22             	RET			;EXIT

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.            PAGE 99



 Line    I  Addr Code           Source

 5442:                          	;
 5443:                          	;**************************************
 5444:                          	;
 5445:                          	;TBYTE - TRANSFER A BYTE
 5446:                          	;
 5447:                          	;**************************************
 5448:                          	;
 5449:      1596 8B A0          TBYTE:	MOV	P2,R3		;OUTPUT SOURCE REGISTE
 5450:      1598 E3             	MOVX	A,@R1		;PUT BYTE IN ACC
 5451:                          	;
 5452:      1599 8A A0          TBR:	MOV	P2,R2		;OUTPUT DESTINATION TO P
 5453:      159B F2             	MOVX	@R0,A		;SAVE THE BYTE
 5454:      159C 22             	RET			;EXIT
 5455:                          	;
 5456:                          	;**************************************
 5457:                          	;
 5458:                          	;NMOV - R7:R6 = END ADDRESS - DPTR
 5459:                          	;
 5460:                          	;ACC GETS CLOBBERED
 5461:                          	;
 5462:                          	;**************************************
 5463:                          	;
 5464:      159D EC             NMOV:	MOV	A,R4		;THE LOW BYTE OF EOFA
 5465:      159E C3             	CLR	C		;CLEAR THE CARRY FOR SUBB
 5466:      159F 95 82          	SUBB	A,DPL		;SUBTRACT DATA POINTER LOW
 5467:      15A1 FE             	MOV	R6,A		;PUT RESULT IN R6
 5468:      15A2 ED             	MOV	A,R5		;HIGH BYTE OF EOFA
 5469:      15A3 95 83          	SUBB	A,DPH		;SUBTRACT DATA POINTER HIGH
 5470:      15A5 FF             	MOV	R7,A		;PUT RESULT IN R7
 5471:      15A6 4E             	ORL	A,R6		;SEE IF ZERO
 5472:      15A7 22             NMOV1:	RET			;EXIT
 5473:                          	;
 5474:                          	;**************************************
 5475:                          	;
 5476:                          	;CHECK FOR A FILE OVERFLOW
 5477:                          	;LEAVES THE NEW END ADDRESS IN R3:R1
 5478:                          	;A HAS THE INCREASE IN SIZE
 5479:                          	;
 5480:                          	;**************************************
 5481:                          	;
 5482:      15A8 2C             FULL:	ADD	A,R4		;ADD A TO END ADDRESS
 5483:      15A9 F9             	MOV	R1,A		;SAVE IT
 5484:      15AA E4             	CLR	A
 5485:      15AB 3D             	ADDC	A,R5		;ADD THE CARRY
 5486:      15AC FB             	MOV	R3,A
 5487:      15AD 90 01 04       	MOV	DPTR,#VARTOP	;POINT AT VARTOP
 5488:                          	;
 5489:      15B0 12 05 CC       FUL1:	CALL	DCMPX		;COMPARE THE TWO
 5490:      15B3 40 F2          	JC	NMOV1		;OUT OF ROOM
 5491:                          	;
 5492:      15B5 90 18 16       TB:	MOV	DPTR,#E5X	;OUT OF MEMORY
 5493:      15B8 01 4B          	AJMP	FPTS
 5494:                          	;
 5495:                          	;**************************************
 5496:                          	;
 5497:                          	; PP - Preprocesses the line in IBUF ba

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 100



 Line    I  Addr Code           Source

 5498:                          	;      sets F0 if no line number
 5499:                          	;      leaves the correct length of pro
 5500:                          	;      puts the line number in IBLN
 5501:                          	;      wastes the text address TXAL and
 5502:                          	;
 5503:                          	;**************************************
 5504:                          	;
 5505:      15BA F1 6C          PP:	ACALL	T_BUF		;TXA GETS IBUF
 5506:      15BC 12 0F 35       	CALL	INTGER		;SEE IF A NUMBER PRESENT
 5507:      15BF 12 18 54       	CALL	TEMPD		;SAVE THE INTEGER IN TEMP5:
 5508:      15C2 92 D5          	MOV	F0,C		;SAVE INTEGER IF PRESENT
 5509:      15C4 90 00 05       	MOV	DPTR,#IBLN	;SAVE THE LINE NUMBER, E
 5510:      15C7 91 24          	ACALL	S20DP
 5511:      15C9 A8 08          	MOV	R0,TXAL 	;TEXT POINTER
 5512:      15CB 79 07          	MOV	R1,#LOW IBUF	;STORE POINTER
 5513:                          	;
 5514:                          	; Now process the line back into IBUF
 5515:                          	;
 5516:      15CD C2 24          PPL:	CLR	ARGF		;FIRST PASS DESIGNATOR
 5517:      15CF 90 01 75       	MOV	DPTR,#TOKTAB	;POINT DPTR AT LOOK UP
 5518:                          	;
 5519:      15D2 88 05          PPL1:	MOV	R5B0,R0 	;SAVE THE READ POINTE
 5520:      15D4 E4             	CLR	A		;ZERO A FOR LOOKUP
 5521:      15D5 93             	MOVC	A,@A+DPTR	;GET THE TOKEN
 5522:      15D6 FF             	MOV	R7,A		;SAVE TOKEN IN CASE OF MATCH
 5523:                          	;
 5524:      15D7 E2             PPL2:	MOVX	A,@R0		;GET THE USER CHARACTE
 5525:      15D8 FB             	MOV	R3,A		;SAVE FOR REM
 5526:      15D9 B4 61 00       	CJNE	A,#'a',PPL21
 5527:      15DC 40 07          PPL21:	JC	PPX		;CONVERT LOWER TO UPPER C
 5528:      15DE B4 7B 00       	CJNE	A,#('z'+1),PPL22
 5529:      15E1 50 02          PPL22:	JNC	PPX
 5530:      15E3 C2 E5          	CLR	ACC.5
 5531:                          	;
 5532:      15E5 FA             PPX:	MOV	R2,A
 5533:      15E6 F2             	MOVX	@R0,A		;SAVE UPPER CASE
 5534:      15E7 A3             	INC	DPTR		;BUMP THE LOOKUP POINTER
 5535:      15E8 E4             	CLR	A
 5536:      15E9 93             	MOVC	A,@A+DPTR
 5537:      15EA B5 02 03       	CJNE	A,R2B0,PPL3	;LEAVE IF NOT THE SAME
 5538:      15ED 08             	INC	R0		;BUMP THE USER POINTER
 5539:      15EE 80 E7          	SJMP	PPL2		;CONTINUE TO LOOP
 5540:                          	;
 5541:      15F0 20 E7 2F       PPL3:	JB	ACC.7,PPL6	;JUMP IF FOUND MATCH
 5542:      15F3 60 2D          	JZ	PPL6		;USER MATCH
 5543:                          	;
 5544:                          	;
 5545:                          	; Scan to the next TOKTAB entry
 5546:                          	;
 5547:      15F5 A3             PPL4:	INC	DPTR		;ADVANCE THE POINTER
 5548:      15F6 E4             	CLR	A		;ZERO A FOR LOOKUP
 5549:      15F7 93             	MOVC	A,@A+DPTR	;LOAD A WITH TABLE
 5550:      15F8 20 E7 03       	JB	ACC.7,PPL41	;KEEP SCANNING IF NOT A 
 5551:      15FB 70 F8          	JNZ	PPL4
 5552:      15FD A3             	INC	DPTR
 5553:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 101



 Line    I  Addr Code           Source

 5554:                          	; See if at the end of TOKTAB
 5555:                          	;
 5556:      15FE A8 05          PPL41:	MOV	R0,R5B0 	;RESTORE THE POINTER
 5557:      1600 B4 FF CF       	CJNE	A,#0FFH,PPL1	;SEE IF END OF TABLE
 5558:                          	;
 5559:                          	; Character not in TOKTAB, so see what 
 5560:                          	;
 5561:      1603 BA 20 03       	CJNE	R2,#' ',PPLX    ;SEE IF A SPACE
 5562:      1606 08             	INC	R0		;BUMP USER POINTER
 5563:      1607 80 C4          	SJMP	PPL		;TRY AGAIN
 5564:                          	;
 5565:      1609 30 2D 0A       PPLX:	JNB	XBIT,PPLY	;EXTERNAL TRAP
 5566:      160C 20 24 07       	JB	ARGF,PPLY
 5567:      160F D2 24          	SETB	ARGF		;SAYS THAT THE USER HAS TABL
 5568:      1611 12 20 78       	LCALL	2078H		;SET UP POINTER
 5569:      1614 A1 D2          	AJMP	PPL1
 5570:                          	;
 5571:      1616 D1 2F          PPLY:	ACALL	PPL7		;SAVE CHARACTER, EXIT 
 5572:      1618 B4 22 B2       	CJNE	A,#'"',PPL      ;SEE IF QUOTED STR
 5573:                          	;
 5574:                          	; Just copy a quoted string
 5575:                          	;
 5576:      161B D1 2F          PPLY1:	ACALL	PPL7		;SAVE THE CHARACTER, 
 5577:      161D B4 22 FB       	CJNE	A,#'"',PPLY1    ;IS THERE AN ENDQU
 5578:      1620 80 AB          	SJMP	PPL		;DO IT AGAIN IF ENDQUOTE
 5579:                          	;
 5580:      1622 EF             PPL6:	MOV	A,R7		;GET THE TOKEN
 5581:      1623 D1 44          	ACALL	PPL91		;SAVE THE TOKEN
 5582:      1625 B4 96 A5       	CJNE	A,#T_REM,PPL	;SEE IF A REM TOKEN
 5583:      1628 EB             	MOV	A,R3
 5584:      1629 D1 30          	ACALL	PPL71		;WASTE THE REM STATEMENT
 5585:      162B D1 2F          PPL61:	ACALL	PPL7		;LOOP UNTIL A CR
 5586:      162D 80 FC          	SJMP	PPL61
 5587:                          	;
 5588:      162F E2             PPL7:	MOVX	A,@R0		;GET THE CHARACTER
 5589:      1630 B4 0D 10       PPL71:	CJNE	A,#CR,PPL9	;FINISH IF A CR
 5590:      1633 D0 00          	POP	R0B0		;WASTE THE CALLING STACK
 5591:      1635 D0 00          	POP	R0B0
 5592:      1637 F3             	MOVX	@R1,A		;SAVE CR IN MEMORY
 5593:      1638 09             	INC	R1		;SAVE A TERMINATOR
 5594:      1639 74 01          	MOV	A,#EOF
 5595:      163B F3             	MOVX	@R1,A
 5596:      163C E9             	MOV	A,R1		;SUBTRACT FOR LENGTH
 5597:      163D 94 04          	SUBB	A,#4
 5598:      163F F5 0D          	MOV	TEMP3,A 	;SAVE LENGTH
 5599:      1641 79 04          	MOV	R1,#LOW IBCNT	;POINT AT BUFFER COUN
 5600:                          	;
 5601:      1643 08             PPL9:	INC	R0
 5602:      1644 F3             PPL91:	MOVX	@R1,A		;SAVE THE CHARACTER
 5603:      1645 09             	INC	R1		;BUMP THE POINTERS
 5604:      1646 22             	RET			;EXIT TO CALLING ROUTINE
 5605:                          	;
 5606:                          	;
 5607:                          	;**************************************
 5608:                          	;
 5609:                          	;DEC76 - DECREMENT THE REGISTER PAIR R7

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 102



 Line    I  Addr Code           Source

 5610:                          	;
 5611:                          	;ACC = ZERO IF R7:R6 = ZERO ; ELSE ACC 
 5612:                          	;
 5613:                          	;**************************************
 5614:                          	;
 5615:      1647 1E             DEC76:	DEC	R6		;BUMP R6
 5616:      1648 BE FF 01       	CJNE	R6,#0FFH,DEC77	;SEE IF RAPPED AROU
 5617:      164B 1F             	DEC	R7
 5618:      164C EF             DEC77:	MOV	A,R7		;SEE IF ZERO
 5619:      164D 4E             	ORL	A,R6
 5620:      164E 22             	RET			;EXIT
 5621:                          	;
 5622:                          	;**************************************
 5623:                          	;
 5624:                          	; MTOP - Get or Put the top of assigned
 5625:                          	;
 5626:                          	;**************************************
 5627:                          	;
 5628:      164F 90 01 0A       PMTOP:	MOV	DPTR,#MEMTOP
 5629:      1652 12 05 73       PMTOP1: CALL	L20DPI
 5630:      1655 81 B4          	AJMP	TWO_EY		;PUT R2:R0 ON THE STACK
 5631:                          	;
 5632:                          	;**************************************
 5633:                          	;
 5634:                          	; AXTAL - Crystal value calculations
 5635:                          	;
 5636:                          	;**************************************
 5637:                          	;
 5638:      1657 90 17 EC       AXTAL0: MOV	DPTR,#XTALV	;CRYSTAL VALUE
 5639:      165A 91 33          	ACALL	PUSHC
 5640:                          	;
 5641:      165C 91 2A          AXTAL1: ACALL	CSTAKA2 	;COPY CRYSTAL VAL
 5642:                          ;
 5643:                          ;***************************************
 5644:                          ;****** Disable Intel programming for to
 5645:                          ;
 5646:                          ;	ACALL	CSTAKA		;Copy crystal value the 
 5647:                          ;
 5648:                          ;***************************************
 5649:                          ;
 5650:      165E 90 07 09       	MOV	DPTR,#PTIME	;PROM TIMER
 5651:      1661 D1 79          	ACALL	AXTAL2
 5652:      1663 90 01 28       	MOV	DPTR,#PROGS
 5653:      1666 F1 0E          	ACALL	S31L
 5654:                          ;
 5655:                          ;***************************************
 5656:                          ;****** Disable Intel programming for to
 5657:                          ;
 5658:                          ;	MOV	DPTR,#IPTIME	;IPROM TIMER
 5659:                          ;	ACALL	AXTAL2
 5660:                          ;	MOV	DPTR,#IPROGS
 5661:                          ;	ACALL	S31L
 5662:                          ;
 5663:                          ;***************************************
 5664:                          ;
 5665:      1668 90 11 67       	MOV	DPTR,#TTIME	;CLOCK CALCULATION

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 103



 Line    I  Addr Code           Source

 5666:      166B 51 1F          	ACALL	AXTAL3
 5667:      166D E9             	MOV	A,R1
 5668:      166E F4             	CPL	A
 5669:      166F 04             	INC	A
 5670:      1670 F5 4A          	MOV	SAVE_T,A
 5671:      1672 7B 01          	MOV	R3,#HIGH CXTAL
 5672:      1674 79 13          	MOV	R1,#LOW CXTAL
 5673:      1676 02 0F D3       	JMP	POPAS
 5674:                          	;
 5675:      1679 51 1F          AXTAL2: ACALL	AXTAL3
 5676:                          	;
 5677:                          CBIAS:	;Bias the crystal calculations
 5678:                          	;
 5679:      167B E9             	MOV	A,R1		;GET THE LOW COUNT
 5680:      167C F4             	CPL	A		;FLIP IT FOR TIMER LOAD
 5681:      167D 24 0F          	ADD	A,#15		;BIAS FOR CALL AND LOAD TIME
 5682:      167F F9             	MOV	R1,A		;RESTORE IT
 5683:      1680 EB             	MOV	A,R3		;GET THE HIGH COUNT
 5684:      1681 F4             	CPL	A		;FLIP IT
 5685:      1682 34 00          	ADDC	A,#00H		;ADD THE CARRY
 5686:      1684 FB             	MOV	R3,A		;RESTORE IT
 5687:      1685 22             	RET
 5688:                          	;
 5689:                          	;**************************************
 5690:                          	;
 5691:                          STONE:	; Toggle the I/O port
 5692:                          	;
 5693:                          	;**************************************
 5694:                          	;
 5695:      1686 12 0E 78       	CALL	THREE		;GET THE NUMBERS
 5696:      1689 D1 7B          	ACALL	CBIAS		;BIAS R3:R1 FOR COUNT LOOP
 5697:                          	;
 5698:      168B C2 92          STONE1: CLR	T_BIT		;TOGGLE THE BIT
 5699:      168D C2 8E          	CLR	TR1		;STOP THE TIMER
 5700:      168F 8B 8D          	MOV	TH1,R3		;LOAD THE TIMER
 5701:      1691 89 8B          	MOV	TL1,R1
 5702:      1693 C2 8F          	CLR	TF1		;CLEAR THE OVERFLOW FLAG
 5703:      1695 D2 8E          	SETB	TR1		;TURN IT ON
 5704:      1697 D1 47          	ACALL	DEC76
 5705:      1699 30 8F FD       	JNB	TF1,$		;WAIT
 5706:      169C 71 AC          	ACALL	ALPAR
 5707:      169E D2 92          	SETB	T_BIT		;BACK TO A ONE
 5708:      16A0 12 05 2F       	CALL	TIMER_LOAD1	;LOAD THE HIGH VALUE
 5709:      16A3 30 8F FD       	JNB	TF1,$		;WAIT
 5710:      16A6 70 E3          	JNZ	STONE1		;LOOP
 5711:      16A8 22             	RET
 5712:                          	;
 5713:                          	;LNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLN
 5714:                          	;
 5715:                          LNTAB:	; Natural log lookup table
 5716:                          	;
 5717:                          	;LNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLN
 5718:                          	;
 5719:      16A9 80             	DB	80H
 5720:      16AA 00             	DB	00H
 5721:      16AB 71             	DB	71H

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 104



 Line    I  Addr Code           Source

 5722:      16AC 37             	DB	37H
 5723:      16AD 13             	DB	13H
 5724:      16AE 19             	DB	19H
 5725:                          	;
 5726:      16AF 7F             	DB	7FH
 5727:      16B0 00             	DB	00H
 5728:      16B1 76             	DB	76H
 5729:      16B2 64             	DB	64H
 5730:      16B3 37             	DB	37H
 5731:      16B4 94             	DB	94H
 5732:                          	;
 5733:      16B5 80             	DB	80H
 5734:      16B6 00             	DB	00H
 5735:      16B7 07             	DB	07H
 5736:      16B8 22             	DB	22H
 5737:      16B9 75             	DB	75H
 5738:      16BA 17             	DB	17H
 5739:                          	;
 5740:      16BB 80             	DB	80H
 5741:      16BC 00             	DB	00H
 5742:      16BD 52             	DB	52H
 5743:      16BE 35             	DB	35H
 5744:      16BF 93             	DB	93H
 5745:      16C0 28             	DB	28H
 5746:                          	;
 5747:      16C1 80             	DB	80H
 5748:      16C2 00             	DB	00H
 5749:      16C3 71             	DB	71H
 5750:      16C4 91             	DB	91H
 5751:      16C5 85             	DB	85H
 5752:      16C6 86             	DB	86H
 5753:                          	;
 5754:      16C7 FF             	DB	0FFH
 5755:                          	;
 5756:      16C8 81             	DB	81H
 5757:      16C9 00             	DB	00H
 5758:      16CA 51             	DB	51H
 5759:      16CB 58             	DB	58H
 5760:      16CC 02             	DB	02H
 5761:      16CD 23             	DB	23H
 5762:                          	;
 5763:                          	;SINSINSINSINSINSINSINSINSINSINSINSINSI
 5764:                          	;
 5765:                          SINTAB: ; Sin lookup table
 5766:                          	;
 5767:                          	;SINSINSINSINSINSINSINSINSINSINSINSINSI
 5768:                          	;
 5769:      16CE 77             	DB	128-9
 5770:      16CF 00             	DB	00H
 5771:      16D0 44             	DB	44H
 5772:      16D1 90             	DB	90H
 5773:      16D2 05             	DB	05H
 5774:      16D3 16             	DB	16H
 5775:                          	;
 5776:      16D4 79             	DB	128-7
 5777:      16D5 01             	DB	01H

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 105



 Line    I  Addr Code           Source

 5778:      16D6 08             	DB	08H
 5779:      16D7 21             	DB	21H
 5780:      16D8 05             	DB	05H
 5781:      16D9 25             	DB	25H
 5782:                          	;
 5783:      16DA 7B             	DB	128-5
 5784:      16DB 00             	DB	00H
 5785:      16DC 19             	DB	19H
 5786:      16DD 73             	DB	73H
 5787:      16DE 55             	DB	55H
 5788:      16DF 27             	DB	27H
 5789:      16E0 7D             	DB	128-3
 5790:      16E1 01             	DB	01H
 5791:      16E2 70             	DB	70H
 5792:      16E3 12             	DB	12H
 5793:      16E4 84             	DB	84H
 5794:      16E5 19             	DB	19H
 5795:                          	;
 5796:      16E6 7E             	DB	128-2
 5797:      16E7 00             	DB	00H
 5798:      16E8 33             	DB	33H
 5799:      16E9 33             	DB	33H
 5800:      16EA 33             	DB	33H
 5801:      16EB 83             	DB	83H
 5802:                          	;
 5803:      16EC 80             	DB	128
 5804:      16ED 01             	DB	01H
 5805:      16EE 67             	DB	67H
 5806:      16EF 66             	DB	66H
 5807:      16F0 66             	DB	66H
 5808:      16F1 16             	DB	16H
 5809:                          	;
 5810:      16F2 81             FPONE:	DB	128+1
 5811:      16F3 00             	DB	00H
 5812:      16F4 00             	DB	00H
 5813:      16F5 00             	DB	00H
 5814:      16F6 00             	DB	00H
 5815:      16F7 10             	DB	10H
 5816:                          	;
 5817:      16F8 FF             	DB	0FFH		;END OF TABLE
 5818:                          	;
 5819:      16F9 12 0F D9       SBAUD:	CALL	AXTAL		;PUT CRYSTAL ON THE S
 5820:      16FC 12 0F 43       	CALL	EXPRB		;PUT THE NUMBER AFTER BAUD 
 5821:      16FF 74 0C          	MOV	A,#12
 5822:      1701 91 B1          	ACALL	TWO_R2		;TOS = 12
 5823:      1703 31 B0          	ACALL	AMUL		;TOS = 12*BAUD
 5824:      1705 91 0A          	ACALL	ADIV		;TOS = XTAL/(12*BAUD)
 5825:      1707 51 23          	ACALL	IFIX
 5826:      1709 D1 7B          	ACALL	CBIAS
 5827:      170B 90 01 24       	MOV	DPTR,#SPV
 5828:                          	;
 5829:      170E 02 06 05       S31L:	JMP	S31DP
 5830:                          	;
 5831:      1711 D1 4F          AFREE:	CALL	PMTOP		;PUT MTOP ON STACK
 5832:      1713 12 05 A9       	CALL	G4		;GET END ADDRESS
 5833:      1716 A8 82          	MOV	R0,DPL

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 106



 Line    I  Addr Code           Source

 5834:      1718 AA 83          	MOV	R2,DPH
 5835:      171A 91 B4          	ACALL	TWO_EY
 5836:                          	;
 5837:      171C 12 19 71       ASUB:	LCALL	FP_BASE1	;DO FP SUB
 5838:      171F 01 38          	AJMP	FPTST
 5839:                          	;
 5840:      1721 12 05 1C       ALEN:	CALL	CCAL		;CALCULATE THE LEN OF T
 5841:      1724 AA 07          	MOV	R2,R7B0 	;SAVE THE HIGH BYTE
 5842:      1726 EE             	MOV	A,R6		;SAVE THE LOW BYTE
 5843:      1727 81 B3          	AJMP	TWO_EX		;PUT IT ON THE STACK
 5844:                          	;
 5845:      1729 A2 AF          ATIME:	MOV	C,EA		;SAVE INTERRUTS
 5846:      172B C2 AF          	CLR	EA
 5847:      172D C0 47          	PUSH	MILLIV		;SAVE MILLI VALUE
 5848:      172F AA 48          	MOV	R2,TVH		;GET THE TIMER
 5849:      1731 E5 49          	MOV	A,TVL
 5850:      1733 92 AF          	MOV	EA,C		;SAVE INTERRUPTS
 5851:      1735 91 B3          	ACALL	TWO_EX		;PUT TIMER ON THE STACK
 5852:      1737 D0 E0          	POP	ACC		;GET MILLI
 5853:      1739 91 B1          	ACALL	TWO_R2		;PUT MILLI ON STACK
 5854:      173B 74 C8          	MOV	A,#200
 5855:      173D 91 B1          	ACALL	TWO_R2		;DIVIDE MILLI BY 200
 5856:      173F 91 0A          	ACALL	ADIV
 5857:                          	;
 5858:      1741 12 19 6F       AADD:	LCALL	FP_BASE 	;DO FP ADDITION
 5859:      1744 01 38          	AJMP	FPTST		;CHECK FOR ERRORS
 5860:                          	;
 5861:                          	;**************************************
 5862:                          	;
 5863:                          	; Here are some error messages that wer
 5864:                          	;
 5865:                          	;**************************************
 5866:                          	;
 5867:                          	;
 5868:      1746 42 41 44 20    E1X:	DB	'BAD SYNTAX"'
            174A 53 59 4E 54
            174E 41 58 22
 5869:      1751 8A             E2X:	DB	128+10
 5870:      1752 44 49 56 49    	DB	'DIVIDE BY ZERO"'
            1756 44 45 20 42
            175A 59 20 5A 45
            175E 52 4F 22
 5871:                          	;
 5872:      1761 41 52 52 41    E6X:	DB	'ARRAY SIZE"'
            1765 59 20 53 49
            1769 5A 45 22
 5873:                          	;
 5874:                          	;**************************************
 5875:                          	;
 5876:                          T_BUF:	; TXA gets IBUF
 5877:                          	;
 5878:                          	;**************************************
 5879:                          	;
 5880:      176C 75 0A 00       	MOV	TXAH,#HIGH IBUF
 5881:      176F 75 08 07       	MOV	TXAL,#LOW IBUF
 5882:      1772 22             	RET

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 107



 Line    I  Addr Code           Source

 5883:                          	;
 5884:                          	;
 5885:                          	;**************************************
 5886:                          	;
 5887:                          CXFER:	; Transfer a program from rom to 
 5888:                          	;
 5889:                          	;**************************************
 5890:                          	;
 5891:      1773 12 05 1C       	CALL	CCAL		;GET EVERYTHING SET UP
 5892:      1776 7A 02          	MOV	R2,#HIGH PSTART
 5893:      1778 78 00          	MOV	R0,#LOW PSTART
 5894:      177A B1 6D          	ACALL	LMOV		;DO THE TRANSFER
 5895:      177C 12 06 64       	CALL	RCLEAR		;CLEAR THE MEMORY
 5896:                          	;
 5897:                          	; Fall thru to CRAM
 5898:                          	;
 5899:                          	;**************************************
 5900:                          	;
 5901:                          CRAM:	; The command action routine - RAM
 5902:                          	;
 5903:                          	;**************************************
 5904:                          	;
 5905:      177F C2 17          	CLR	CONB		;CAN'T CONTINUE IF MODE CHANG
 5906:      1781 75 13 02       	MOV	BOFAH,#HIGH PSTART
 5907:      1784 75 14 00       	MOV	BOFAL,#LOW PSTART
 5908:                          	;
 5909:                          	; Fall thru to Command Processor
 5910:                          	;
 5911:                          	;**************************************
 5912:                          	;
 5913:                          CMND1:	; The entry point for the command
 5914:                          	;
 5915:                          	;**************************************
 5916:                          	;
 5917:      1787 12 0C 31       	LCALL	SPRINT1 	;WASTE AT AND HEX
 5918:      178A C2 2D          	CLR	XBIT		;TO RESET IF NEEDED
 5919:                          ;
 5920:                          ;***************************************
 5921:                          ;****** Karmann 1 Bugfix ***************
 5922:                          ;
 5923:      178C F1 E0          	acall	TEST_USER	;check for user command
 5924:                          ;
 5925:                          ;****** continue with original code: ***
 5926:                          ;
 5927:      178E 90 00 FD       	MOV	DPTR,#RDYS	;PRINT THE READY MESSAGE
 5928:      1791 12 06 AD       	CALL	CRP		;DO A CR, THEN, PRINT FROM TH
 5929:                          	;
 5930:      1794 D2 2F          CMNDR:	SETB	DIRF		;SET THE DIRECT INPUT 
 5931:      1796 85 3E 81       	MOV	SP,SPSAV	;LOAD THE STACK
 5932:      1799 11 9D          	ACALL	CL7		;DO A CRLF
 5933:                          	;
 5934:      179B C2 18          CMNX:	CLR	GTRD		;CLEAR BREAK
 5935:      179D 90 00 5E       	MOV	DPTR,#5EH	;DO RUN TRAP
 5936:      17A0 E0             	MOVX	A,@DPTR
 5937:      17A1 64 34          	XRL	A,#52
 5938:      17A3 70 03          	JNZ	CMNX1

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 108



 Line    I  Addr Code           Source

 5939:      17A5 02 08 02       	LJMP	CRUN
 5940:      17A8 7D 3E          CMNX1:	MOV	R5,#'>'         ;OUTPUT A PRO
 5941:      17AA 12 07 11       	LCALL	TEROT
 5942:      17AD 12 06 D8       	CALL	INLINE		;INPUT A LINE INTO IBUF
 5943:      17B0 B1 BA          	CALL	PP		;PRE-PROCESS THE LINE
 5944:      17B2 20 D5 0F       	JB	F0,CMND3	;NO LINE NUMBER
 5945:      17B5 91 F0          	CALL	LINE		;PROCESS THE LINE
 5946:      17B7 12 05 E7       	LCALL	LCLR
 5947:      17BA 20 15 DE       	JB	LINEB,CMNX	;DON'T CLEAR MEMORY IF NO
 5948:      17BD D2 15          	SETB	LINEB
 5949:      17BF 12 06 64       	LCALL	RCLEAR		;CLEAR THE MEMORY
 5950:      17C2 80 D7          	SJMP	CMNX		;LOOP BACK
 5951:                          	;
 5952:      17C4 F1 6C          CMND3:	CALL	T_BUF		;SET UP THE TEXT POIN
 5953:      17C6 12 0E E1       	CALL	DELTST		;GET THE CHARACTER
 5954:      17C9 60 C9          	JZ	CMNDR		;IF CR, EXIT
 5955:      17CB 90 01 0F       	MOV	DPTR,#CMNDD	;POINT AT THE COMMAND L
 5956:      17CE B4 F0 00       	CJNE	A,#T_CMND,CMND31;PROCESS STATEMENT
 5957:      17D1 40 0A          CMND31: JC	CMND5
 5958:      17D3 12 0E D7       	CALL	GCI1		;BUMP TXA
 5959:      17D6 54 0F          	ANL	A,#0FH		;STRIP MSB'S FOR LOOKUP
 5960:      17D8 12 09 5C       	LCALL	ISTA1		;PROCESS COMMAND
 5961:      17DB 80 B7          	SJMP	CMNDR
 5962:                          	;
 5963:      17DD 02 08 13       CMND5:	LJMP	ILOOP		;CHECK FOR A POSSIBLE
 5964:                          ;
 5965:                          ;***************************************
 5966:                          ;****** Karmann 1 Bugfix ***************
 5967:                          ;
 5968:                          TEST_USER:			;check for user command ext
 5969:      17E0 E4             	CLR	A
 5970:      17E1 90 20 02       	MOV	DPTR,#2002H	;CHECK FOR EXTERNAL TRA
 5971:      17E4 93             	MOVC	A,@A+DPTR
 5972:      17E5 B4 5A 03       	CJNE	A,#5AH,CMND11	;test for user comma
 5973:      17E8 12 20 48       	LCALL	2048H		;IF PRESENT JUMP TO LOCATI
 5974:      17EB 22             CMND11: ret
 5975:                          ;
 5976:                          ;****** continue with original code: ***
 5977:                          ;
 5978:                          	;CONSTANTS
 5979:                          	;
 5980:      17EC 88             XTALV:	DB	128+8		; DEFAULT CRYSTAL VALUE
 5981:      17ED 00             	DB	00H
 5982:      17EE 00             	DB	00H
 5983:      17EF 00             	DB	00H
 5984:      17F0 00             	DB	00H
 5985:      17F1 48             	DB	48H
 5986:                          	;
 5987:      17F2 85             EXP11:	DB	85H
 5988:      17F3 00             	DB	00H
 5989:      17F4 42             	DB	42H
 5990:      17F5 41             	DB	41H
 5991:      17F6 87             	DB	87H
 5992:      17F7 59             	DB	59H
 5993:                          	;
 5994:      17F8 81             EXP1:	DB	128+1		; EXP(1)

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 109



 Line    I  Addr Code           Source

 5995:      17F9 00             	DB	00H
 5996:      17FA 18             	DB	18H
 5997:      17FB 28             	DB	28H
 5998:      17FC 18             	DB	18H
 5999:      17FD 27             	DB	27H
 6000:                          ;
 6001:                          ;***************************************
 6002:                          ;****** Disable Intel programming for to
 6003:                          ;
 6004:                          ;IPTIME: DB	128-4		;FPROG TIMING
 6005:                          ;	DB	00H
 6006:                          ;	DB	00H
 6007:                          ;	DB	00H
 6008:                          ;	DB	75H
 6009:                          ;	DB	83H
 6010:                          ;
 6011:                          ;***************************************
 6012:                          ;
 6013:      17FE 81             PIE:	DB	128+1		;PI
 6014:      17FF 00             	DB	00H
 6015:      1800 26             	DB	26H
 6016:      1801 59             	DB	59H
 6017:      1802 41             	DB	41H
 6018:      1803 31             	DB	31H		; 3.1415926
 6019:                          	;
 6020:                          	;**************************************
 6021:                          	;
 6022:                          	; The error messages, some have been mo
 6023:                          	;
 6024:                          	;**************************************
 6025:                          	;
 6026:      1804 9E             E7X:	DB	128+30
 6027:      1805 41 52 49 54    	DB	'ARITH. UNDERFLOW"'
            1809 48 2E 20 55
            180D 4E 44 45 52
            1811 46 4C 4F 57
            1815 22
 6028:                          	;
 6029:      1816 4D 45 4D 4F    E5X:	DB	'MEMORY ALLOCATION"'
            181A 52 59 20 41
            181E 4C 4C 4F 43
            1822 41 54 49 4F
            1826 4E 22
 6030:                          	;
 6031:      1828 A8             E3X:	DB	128+40
 6032:      1829 42 41 44 20    	DB	'BAD ARGUMENT"'
            182D 41 52 47 55
            1831 4D 45 4E 54
            1835 22
 6033:                          	;
 6034:      1836 49 2D 53 54    EXI:	DB	'I-STACK"'
            183A 41 43 4B 22
 6035:                          	;
 6036:                          	;**************************************
 6037:                          	;
 6038:                          	; The command action routine - CONTINUE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 110



 Line    I  Addr Code           Source

 6039:                          	;
 6040:                          	;**************************************
 6041:                          	;
 6042:      183E 90 1F A6       CCONT:	MOV	DPTR,#E15X
 6043:      1841 30 17 4B       	JNB	CONB,ERROR	;ERROR IF CONTINUE IS NO
 6044:                          	;
 6045:                          CC1:	;used for input statement entry
 6046:                          	;
 6047:      1844 85 42 0A       	MOV	TXAH,INTXAH	;RESTORE TXA
 6048:      1847 85 43 08       	MOV	TXAL,INTXAL
 6049:      184A 02 08 0F       	JMP	CILOOP		;EXECUTE
 6050:                          	;
 6051:      184D 85 0F 83       DTEMP:	MOV	DPH,TEMP5	;RESTORE DPTR
 6052:      1850 85 0E 82       	MOV	DPL,TEMP4
 6053:      1853 22             	RET
 6054:                          	;
 6055:      1854 85 83 0F       TEMPD:	MOV	TEMP5,DPH
 6056:      1857 85 82 0E       	MOV	TEMP4,DPL
 6057:      185A 22             	RET
 6058:                          	;
 6059:                          	;**************************************
 6060:                          	;
 6061:                          I_DL:	; IDLE
 6062:                          	;
 6063:                          	;**************************************
 6064:                          	;
 6065:      185B 20 2F 27       	JB	DIRF,E1XX	;SYNTAX ERROR IN DIRECT IN
 6066:      185E C2 96          	CLR	DACK		;ACK IDLE
 6067:                          	;
 6068:      1860 43 87 01       U_ID1:	ORL	PCON,#01H
 6069:                          ;	DB	01000011B	;ORL DIRECT OP CODE
 6070:                          ;	DB	87H		;PCON ADDRESS
 6071:                          ;	DB	01H		;SET IDLE BIT
 6072:      1863 20 16 0B       	JB	INTPEN,I_RET	;EXIT IF EXTERNAL INTER
 6073:      1866 10 21 08       	JBC	U_IDL,I_RET	;EXIT IF USER WANTS TO
 6074:      1869 30 10 F4       	JNB	OTS,U_ID1	;LOOP IF TIMER NOT ENABLE
 6075:      186C 12 07 E3       	LCALL	T_CMP		;CHECK THE TIMER
 6076:      186F 40 EF          	JC	U_ID1		;LOOP IF TIME NOT BIG ENOUGH
 6077:                          	;
 6078:      1871 D2 96          I_RET:	SETB	DACK		;RESTORE EXECUTION
 6079:      1873 22             	RET			;EXIT IF IT IS
 6080:                          	;
 6081:                          	;
 6082:                          	;
 6083:      1874 A3             ER0:	INC	DPTR		;BUMP TO TEXT
 6084:      1875 20 2F 23       	JB	DIRF,ERROR0	;CAN'T GET OUT OF DIRECT
 6085:      1878 30 13 20       	JNB	ON_ERR,ERROR0	;IF ON ERROR ISN'T SE
 6086:      187B 90 01 01       	MOV	DPTR,#ERRLOC	;SAVE THE ERROR CODE
 6087:      187E 12 06 73       	CALL	RC2		;SAVE ERROR AND SET UP THE ST
 6088:      1881 A3             	INC	DPTR		;POINT AT ERRNUM
 6089:      1882 02 08 44       	JMP	ERL4		;LOAD ERR NUM AND EXIT
 6090:                          	;
 6091:                          	; Syntax error
 6092:                          	;
 6093:      1885 A2 2F          E1XX:	MOV	C,DIRF		;SEE IF IN DIRECT MODE
 6094:      1887 90 17 46       E1XX1:	MOV	DPTR,#E1X	;ERROR MESSAGE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 111



 Line    I  Addr Code           Source

 6095:      188A 80 04          	SJMP	ERROR1		;TRAP ON SET DIRF
 6096:                          	;
 6097:      188C 90 18 36       E1XX2:	MOV	DPTR,#EXI	;STACK ERROR
 6098:                          	;
 6099:                          	; Falls through
 6100:                          	;
 6101:                          	;**************************************
 6102:                          	;
 6103:                          	;ERROR PROCESSOR - PRINT OUT THE ERROR 
 6104:                          	;		   RUN OR COMMAND MODE, FIND AND PRI
 6105:                          	;		   LINE NUMBER IF IN RUN MODE
 6106:                          	;
 6107:                          	;**************************************
 6108:                          	;
 6109:      188F C3             ERROR:	CLR	C		;RESET STACK
 6110:      1890 85 3E 81       ERROR1: MOV	SP,SPSAV	;RESET THE STACK
 6111:      1893 12 0C 31       	LCALL	SPRINT1 	;CLEAR LINE AND AT MODE
 6112:      1896 E4             	CLR	A		;SET UP TO GET ERROR CODE
 6113:      1897 93             	MOVC	A,@A+DPTR
 6114:      1898 10 E7 D9       	JBC	ACC.7,ER0	;PROCESS ERROR
 6115:                          	;
 6116:      189B 11 54          ERROR0: ACALL	TEMPD		;SAVE THE DATA POIN
 6117:      189D 40 03          	JC	ERROR01 	;NO RESET IF CARRY IS SET
 6118:      189F 12 06 6F       	LCALL	RC1		;RESET THE STACKS
 6119:      18A2 12 06 A3       ERROR01:CALL	CRLF2		;DO TWO CARRIAGE RET
 6120:      18A5 90 1F F8       	MOV	DPTR,#ERS	;OUTPUT ERROR MESSAGE
 6121:      18A8 12 06 AF       	CALL	ROM_P
 6122:      18AB 11 4D          	CALL	DTEMP		;GET THE ERROR MESSAGE BACK
 6123:                          	;
 6124:      18AD 12 06 AF       ERRS:	CALL	ROM_P		;PRINT ERROR TYPE
 6125:      18B0 30 2F 05       	JNB	DIRF,ER1	;DO NOT PRINT IN LINE IF D
 6126:                          	;
 6127:      18B3 C2 20          SERR1:	CLR	STOPBIT 	;PRINT STOP THEN EXI
 6128:      18B5 02 17 87       	JMP	CMND1
 6129:                          	;
 6130:      18B8 90 01 03       ER1:	MOV	DPTR,#INS	;OUTPUT IN LINE
 6131:      18BB 12 06 AF       	CALL	ROM_P
 6132:                          	;
 6133:                          	;NOW, FIND THE LINE NUMBER
 6134:                          	;
 6135:                          	;
 6136:      18BE 12 0E 9B       	CALL	DP_B		;GET THE FIRST ADDRESS OF TH
 6137:      18C1 E4             	CLR	A		;FOR INITIALIZATION
 6138:                          	;
 6139:      18C2 11 54          ER2:	ACALL	TEMPD		;SAVE THE DPTR
 6140:      18C4 12 05 DE       	CALL	ADDPTR		;ADD ACC TO DPTR
 6141:      18C7 11 FB          	ACALL	ER4		;R3:R1 = TXA-DPTR
 6142:      18C9 40 06          	JC	ER3		;EXIT IF DPTR>TXA
 6143:      18CB 60 04          	JZ	ER3		;EXIT IF DPTR=TXA
 6144:      18CD E0             	MOVX	A,@DPTR 	;GET LENGTH
 6145:      18CE B4 01 F1       	CJNE	A,#EOF,ER2	;SEE IF AT THE END
 6146:                          	;
 6147:      18D1 11 4D          ER3:	ACALL	DTEMP		;PUT THE LINE IN THE D
 6148:      18D3 11 FB          	ACALL	ER4		;R3:R1 = TXA - BEGINNING OF 
 6149:      18D5 E9             	MOV	A,R1		;GET LENGTH
 6150:      18D6 24 0A          	ADD	A,#10		;ADD 10 TO LENGTH, DPTR STIL

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 112



 Line    I  Addr Code           Source

 6151:      18D8 F5 45          	MOV	MT1,A		;SAVE THE COUNT
 6152:      18DA A3             	INC	DPTR		;POINT AT LINE NUMBER HIGH BY
 6153:      18DB 12 16 52       	CALL	PMTOP1		;LOAD R2:R0, PUT IT ON THE
 6154:      18DE 31 7D          	ACALL	FP_BASE7	;OUTPUT IT
 6155:      18E0 20 20 D0       	JB	STOPBIT,SERR1	;EXIT IF STOP BIT SET
 6156:      18E3 12 06 A3       	CALL	CRLF2		;DO SOME CRLF'S
 6157:      18E6 11 4D          	CALL	DTEMP
 6158:      18E8 12 10 A3       	CALL	UPPL		;UNPROCESS THE LINE
 6159:      18EB 12 10 94       	CALL	CL6		;PRINT IT
 6160:      18EE 7D 2D          ER31:	MOV	R5,#'-'         ;OUTPUT DASHES
 6161:      18F0 31 6C          	ACALL	T_L		;PRINT AN X IF ERROR CHARACT
 6162:      18F2 D5 45 F9       	DJNZ	MT1,ER31	;LOOP UNTIL DONE
 6163:      18F5 7D 58          	MOV	R5,#'X'
 6164:      18F7 31 6C          	ACALL	T_L
 6165:      18F9 01 B3          	AJMP	SERR1
 6166:                          	;
 6167:      18FB AB 0A          ER4:	MOV	R3,TXAH 	;GET TEXT POINTER AND 
 6168:      18FD A9 08          	MOV	R1,TXAL
 6169:      18FF 02 0A 02       	JMP	DUBSUB
 6170:                          	;
 6171:                          	;**************************************
 6172:                          	;
 6173:                          	; Interrupt driven timer
 6174:                          	;
 6175:                          	;**************************************
 6176:                          	;
 6177:      1902 85 4A 8C       I_DR:	MOV	TH0,SAVE_T	;LOAD THE TIMER
 6178:      1905 C5 47          	XCH	A,MILLIV	;SAVE A, GET MILLI COUNTER
 6179:      1907 04             	INC	A		;BUMP COUNTER
 6180:      1908 B4 C8 08       	CJNE	A,#200,TR	;CHECK OUT TIMER VALUE
 6181:      190B E4             	CLR	A		;FORCE ACC TO BE ZERO
 6182:      190C 05 49          	INC	TVL		;INCREMENT LOW TIMER
 6183:      190E B5 49 02       	CJNE	A,TVL,TR	;CHECK LOW VALUE
 6184:      1911 05 48          	INC	TVH		;BUMP TIMER HIGH
 6185:                          	;
 6186:      1913 C5 47          TR:	XCH	A,MILLIV
 6187:      1915 D0 D0          	POP	PSW
 6188:      1917 32             	RETI
 6189:                          	;
 6190:                          	;**************************************
 6191:                          	;
 6192:                          	; The statement action routine - CLOCK
 6193:                          	;
 6194:                          	;**************************************
 6195:                          	;
 6196:      1918 31 38          SCLOCK: ACALL	OTST		;GET CHARACTER AFTER
 6197:      191A C2 A9          	CLR	ET0
 6198:      191C C2 2E          	CLR	C_BIT
 6199:      191E 50 0D          	JNC	SC_R		;EXIT IF A ZERO
 6200:                          ;
 6201:                          ;***************************************
 6202:                          ;****** Use XTAL up to 47 MHz **********
 6203:                          ;****** Wulf 2 *************************
 6204:                          ;
 6205:                          ;	ANL	TMOD,#0F0H	;SET UP THE MODE
 6206:                          ;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 113



 Line    I  Addr Code           Source

 6207:      1920 53 89 F1       	anl	TMOD,#0F1H	;Set up 16 bit mode for 
 6208:      1923 43 89 01       	orl	TMOD,#01H
 6209:                          ;
 6210:                          ;***************************************
 6211:                          ;
 6212:      1926 D2 2E          	SETB	C_BIT		;USER INTERRUPTS
 6213:      1928 43 A8 82       	ORL	IE,#82H 	;ENABLE ET0 AND EA
 6214:      192B D2 8C          	SETB	TR0		;TURN ON THE TIMER
 6215:                          	;
 6216:      192D 22             SC_R:	RET
 6217:                          	;
 6218:                          	;**************************************
 6219:                          	;
 6220:                          SUI:	; Statement USER IN action routine
 6221:                          	;
 6222:                          	;**************************************
 6223:                          	;
 6224:      192E 31 38          	ACALL	OTST
 6225:      1930 92 1E          	MOV	CIUB,C		;SET OR CLEAR CIUB
 6226:      1932 22             	RET
 6227:                          	;
 6228:                          	;**************************************
 6229:                          	;
 6230:                          SUO:	; Statement USER OUT action routine
 6231:                          	;
 6232:                          	;**************************************
 6233:                          	;
 6234:      1933 31 38          	ACALL	OTST
 6235:      1935 92 1C          	MOV	COUB,C
 6236:      1937 22             	RET
 6237:                          	;
 6238:                          OTST:	; Check for a one
 6239:                          	;
 6240:      1938 12 0E D5       	LCALL	GCI		;GET THE CHARACTER, CLEARS C
 6241:      193B 94 31          	SUBB	A,#'1'          ;SEE IF A ONE
 6242:      193D B3             	CPL	C		;SETS CARRY IF ONE, CLEARS IT IF
 6243:      193E 22             OTST1:	RET
 6244:                          	;
 6245:                          	;**************************************
 6246:                          	;
 6247:                          	; IBLK - EXECUTE USER SUPPLIED TOKEN
 6248:                          	;
 6249:                          	;**************************************
 6250:                          	;
 6251:      193F 20 D4 FC       IBLK:	JB	PSW.4,OTST1	;EXIT IF REGISTER B
 6252:      1942 20 D3 F9       	JB	PSW.3,OTST1
 6253:      1945 10 E7 06       	JBC	ACC.7,IBLK1	;SEE IF BIT SEVEN IS SE
 6254:      1948 90 00 47       	MOV	DPTR,#USENT	;USER ENTRY LOCATION
 6255:      194B 02 09 5C       	LJMP	ISTA1
 6256:                          	;
 6257:      194E 20 E0 2A       IBLK1:	JB	ACC.0,FP_BASE6	;FLOATING POINT
 6258:      1951 60 19          	JZ	T_L		;DO OUTPUT ON 80H
 6259:      1953 90 19 6D       	MOV	DPTR,#FP_BASE-2
 6260:      1956 73             	JMP	@A+DPTR
 6261:                          	;
 6262:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 114



 Line    I  Addr Code           Source

 6263:                          	;**************************************
 6264:                          	;
 6265:                          	; GET_NUM - GET A NUMBER, EITHER HEX OR
 6266:                          	;
 6267:                          	;**************************************
 6268:                          	;
 6269:      1957 31 79          GET_NUM:ACALL	FP_BASE5	;SCAN FOR HEX
 6270:      1959 50 20          	JNC	FP_BASE6	;DO FP INPUT
 6271:                          	;
 6272:      195B 31 81          	ACALL	FP_BASE9	;ASCII STRING TO R2:R0
 6273:      195D 70 0C          	JNZ	H_RET
 6274:      195F C0 83          	PUSH	DPH		;SAVE THE DATA_POINTER
 6275:      1961 C0 82          	PUSH	DPL
 6276:      1963 31 87          	ACALL	FP_BASE12	;PUT R2:R0 ON THE STACK
 6277:      1965 D0 82          	POP	DPL		;RESTORE THE DATA_POINTER
 6278:      1967 D0 83          	POP	DPH
 6279:      1969 E4             	CLR	A		;NO ERRORS
 6280:      196A 22             	RET			;EXIT
 6281:                          	;
 6282:                          	;**************************************
 6283:                          	;
 6284:                          	; WB - THE EGO MESSAGE
 6285:                          	;
 6286:                          	;**************************************
 6287:                          ;
 6288:                          ;***************************************
 6289:                          ;****** Sorry - but the ego message had 
 6290:                          ;
 6291:                          ;WB:
 6292:                          ;
 6293:                          ;	DB	'W'+80H,'R'+80H
 6294:                          ;	DB	'I'+80H,'T'+80H,'T','E'+80H,'N'+80H
 6295:                          ;	DB	' ','B'+80H,'Y'+80H,' '
 6296:                          ;	DB	'J'+80H,'O'+80H,'H'+80H,'N'+80H,' '
 6297:                          ;	DB	'K','A'+80H,'T'+80H,'A'+80H,'U'+80H
 6298:                          ;	DB	'S','K'+80H,'Y'+80H
 6299:                          ;	DB	', I','N'+80H,'T'+80H,'E'+80H,'L'+8
 6300:                          ;	DB	' '+80H,'C'+80H,'O'+80H,'R'+80H,'P'
 6301:                          ;	DB	'. 1','9'+80H,'85'
 6302:                          ;
 6303:                          ;***************************************
 6304:                          	;
 6305:      196B 22             H_RET:	RET
 6306:                          	;
 6307:                          ;***************************************
 6308:                          ;
 6309:                          ; This is a complete BCD floating point 
 6310:                          ; controller. It provides 8 digits of ac
 6311:                          ; range from +127 to -127. The mantissa 
 6312:                          ; exponent is expressed in pseudo-twos c
 6313:                          ; is used to express the number ZERO. An
 6314:                          ; greater than means the exponent is pos
 6315:                          ; 81H = E+1, 82H = E+2 and so on. If the
 6316:                          ; the exponent is negative, 7FH = E-1, 7
 6317:                          ; ALL NUMBERS ARE ASSUMED TO BE NORMALIZ
 6318:                          ; normalized after calculation. A normal

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 115



 Line    I  Addr Code           Source

 6319:                          ; <=.99999999.
 6320:                          ;
 6321:                          ; The numbers in memory assumed to be st
 6322:                          ;
 6323:                          ; EXPONENT OF ARGUMENT 2   =   VALUE OF 
 6324:                          ; SIGN OF ARGUMENT 2	   =   VALUE OF ARG
 6325:                          ; DIGIT 78 OF ARGUMENT 2   =   VALUE OF 
 6326:                          ; DIGIT 56 OF ARGUMENT 2   =   VALUE OF 
 6327:                          ; DIGIT 34 OF ARGUMENT 2   =   VALUE OF 
 6328:                          ; DIGIT 12 OF ARGUMENT 2   =   VALUE OF 
 6329:                          ;
 6330:                          ; EXPONENT OF ARGUMENT 1   =   VALUE OF 
 6331:                          ; SIGN OF ARGUMENT 1	   =   VALUE OF ARG
 6332:                          ; DIGIT 78 OF ARGUMENT 1   =   VALUE OF 
 6333:                          ; DIGIT 56 OF ARGUMENT 1   =   VALUE OF 
 6334:                          ; DIGIT 34 OF ARGUMENT 1   =   VALUE OF 
 6335:                          ; DIGIT 12 OF ARGUMENT 1   =   VALUE OF 
 6336:                          ;
 6337:                          ; The operations are performed thusly:
 6338:                          ;
 6339:                          ; ARG_STACK+FP_NUMBER_SIZE = ARG_STACK+F
 6340:                          ;
 6341:                          ; Which is ARGUMENT 2 = ARGUMENT 2 # ARG
 6342:                          ;
 6343:                          ; Where # can be ADD, SUBTRACT, MULTIPLY
 6344:                          ;
 6345:                          ; Note that the stack gets popped after 
 6346:                          ;
 6347:                          ; The FP_COMP instruction POPS the ARG_S
 6348:                          ;
 6349:                          ;***************************************
 6350:                          ;
 6351:                          ;***************************************
 6352:                          ;
 6353:                          ; STATUS ON RETURN - After performing an
 6354:                          ;		     the accumulator contains the fol
 6355:                          ;
 6356:                          ; ACCUMULATOR - BIT 0 - FLOATING POINT U
 6357:                          ;
 6358:                          ;	      - BIT 1 - FLOATING POINT OVERFLO
 6359:                          ;
 6360:                          ;	      - BIT 2 - RESULT WAS ZER0
 6361:                          ;
 6362:                          ;	      - BIT 3 - DIVIDE BY ZERO ATTEMPT
 6363:                          ;
 6364:                          ;	      - BIT 4 - NOT USED, 0 RETURNED
 6365:                          ;
 6366:                          ;	      - BIT 5 - NOT USED, 0 RETURNED
 6367:                          ;
 6368:                          ;	      - BIT 6 - NOT USED, 0 RETURNED
 6369:                          ;
 6370:                          ;	      - BIT 7 - NOT USED, 0 RETURNED
 6371:                          ;
 6372:                          ; NOTE: When underflow occures, a ZERO r
 6373:                          ;	When overflow or divide by zero occure
 6374:                          ;	.99999999 E+127 is returned and it is 

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 116



 Line    I  Addr Code           Source

 6375:                          ;	to handle these conditions as needed i
 6376:                          ;
 6377:                          ; NOTE: The Compare instruction returns 
 6378:                          ;	and returns a CARRY FLAG = 1 if ARG 1 
 6379:                          ;
 6380:                          ;***************************************
 6381:                          ;
 6382:                          ;***************************************
 6383:                          ;
 6384:                          ; The following values MUST be provided 
 6385:                          ;
 6386:                          ;***************************************
 6387:                          ;
 6388:           N      0009    ARG_STACK	EQU	9	;ARGUMENT STACK POINTER
 6389:           N      0001    ARG_STACK_PAGE	EQU	1
 6390:                          ;OUTPUT 	 EQU	 1990H	 ;CALL LOCATION TO 
 6391:           N      0058    CONVERT 	EQU	58H	;LOCATION TO CONVERT NU
 6392:           B        19    INTGRC		BIT	25	;BIT SET IF INTGER ERROR
 6393:                          ;
 6394:                          ;***************************************
 6395:                          ;
 6396:                          ; The following equates are used interna
 6397:                          ;
 6398:                          ;***************************************
 6399:                          ;
 6400:           N      0006    FP_NUMBER_SIZE	EQU	6
 6401:           N      0000    UNDERFLOW	EQU	0
 6402:           N      0001    OVERFLOW	EQU	1
 6403:           N      0002    ZERO		EQU	2
 6404:           N      0003    ZERO_DIVIDE	EQU	3
 6405:                          ;
 6406:                          ;***************************************
 6407:                          ;
 6408:                          	;**************************************
 6409:                          	;
 6410:                          	; The following internal locations are 
 6411:                          	; ordering is important and the FP_DIGI
 6412:                          	; addressable
 6413:                          	;
 6414:                          	;**************************************
 6415:                          	;
 6416:           N      0028    FP_STATUS	EQU	28H		;NOT USED
 6417:           N      0029    FP_TEMP 	EQU	FP_STATUS+1	;NOT USED
 6418:           N      002A    FP_CARRY	EQU	FP_STATUS+2	;USED FOR BITS
 6419:           B        23    ADD_IN		BIT	35		;DCMPXZ IN BASIC BACKAGE
 6420:           B        50    XSIGN		BIT	FP_CARRY.0
 6421:           B        51    FOUND_RADIX	BIT	FP_CARRY.1
 6422:           B        52    FIRST_RADIX	BIT	FP_CARRY.2
 6423:           B        53    DONE_LOAD	BIT	FP_CARRY.3
 6424:           N      002B    FP_DIG12	EQU	FP_CARRY+1
 6425:           N      002C    FP_DIG34	EQU	FP_CARRY+2
 6426:           N      002D    FP_DIG56	EQU	FP_CARRY+3
 6427:           N      002E    FP_DIG78	EQU	FP_CARRY+4
 6428:           N      002F    FP_SIGN 	EQU	FP_CARRY+5
 6429:           B        78    MSIGN		BIT	FP_SIGN.0
 6430:           N      0030    FP_EXP		EQU	FP_CARRY+6

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 117



 Line    I  Addr Code           Source

 6431:           N      002B    FP_NIB1 	EQU	FP_DIG12
 6432:           N      002C    FP_NIB2 	EQU	FP_NIB1+1
 6433:           N      002D    FP_NIB3 	EQU	FP_NIB1+2
 6434:           N      002E    FP_NIB4 	EQU	FP_NIB1+3
 6435:           N      002F    FP_NIB5 	EQU	FP_NIB1+4
 6436:           N      0030    FP_NIB6 	EQU	FP_NIB1+5
 6437:           N      0031    FP_NIB7 	EQU	FP_NIB1+6
 6438:           N      0032    FP_NIB8 	EQU	FP_NIB1+7
 6439:           N      0033    FP_ACCX 	EQU	FP_NIB1+8
 6440:           N      0034    FP_ACCC 	EQU	FP_NIB1+9
 6441:           N      0035    FP_ACC1 	EQU	FP_NIB1+10
 6442:           N      0036    FP_ACC2 	EQU	FP_NIB1+11
 6443:           N      0037    FP_ACC3 	EQU	FP_NIB1+12
 6444:           N      0038    FP_ACC4 	EQU	FP_NIB1+13
 6445:           N      0039    FP_ACC5 	EQU	FP_NIB1+14
 6446:           N      003A    FP_ACC6 	EQU	FP_NIB1+15
 6447:           N      003B    FP_ACC7 	EQU	FP_NIB1+16
 6448:           N      003C    FP_ACC8 	EQU	FP_NIB1+17
 6449:           N      003D    FP_ACCS 	EQU	FP_NIB1+18
 6450:                          	;
 6451:                          ;	 ORG	 1990H
 6452:                          	;
 6453:                          OUTPUT:
 6454:      196C 02 07 11       T_L:	LJMP	TEROT
 6455:                          	;
 6456:                          	;
 6457:                          	;**************************************
 6458:                          	;
 6459:                          	; The floating point entry points and j
 6460:                          	;
 6461:                          	;**************************************
 6462:                          	;
 6463:      196F 21 93          FP_BASE:	AJMP	FLOATING_ADD
 6464:      1971 21 89          FP_BASE1:	AJMP	FLOATING_SUB
 6465:      1973 41 43          FP_BASE2:	AJMP	FLOATING_COMP
 6466:      1975 41 73          FP_BASE3:	AJMP	FLOATING_MUL
 6467:      1977 41 B0          FP_BASE4:	AJMP	FLOATING_DIV
 6468:      1979 81 89          FP_BASE5:	AJMP	HEXSCAN
 6469:      197B 81 C2          FP_BASE6:	AJMP	FLOATING_POINT_INPUT
 6470:      197D A1 7A          FP_BASE7:	AJMP	FLOATING_POINT_OUTPUT
 6471:      197F C1 F7          FP_BASE8:	AJMP	CONVERT_BINARY_TO_ASCII_S
 6472:      1981 C1 9E          FP_BASE9:	AJMP	CONVERT_ASCII_STRING_TO_B
 6473:      1983 C1 D3          FP_BASE10:	AJMP	MULNUM10
 6474:      1985 E1 30          FP_BASE11:	AJMP	HEXOUT
 6475:      1987 81 B6          FP_BASE12:	AJMP	PUSHR2R0
 6476:                          	;
 6477:                          	;
 6478:                          FLOATING_SUB:
 6479:                          	;
 6480:      1989 75 A0 01       	MOV	P2,#ARG_STACK_PAGE
 6481:      198C A8 09          	MOV	R0,ARG_STACK
 6482:      198E 18             	DEC	R0		;POINT TO SIGN
 6483:      198F E2             	MOVX	A,@R0		;READ SIGN
 6484:      1990 B2 E0          	CPL	ACC.0
 6485:      1992 F2             	MOVX	@R0,A
 6486:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 118



 Line    I  Addr Code           Source

 6487:                          	;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 6488:                          	;
 6489:                          FLOATING_ADD:
 6490:                          	;
 6491:                          	;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
 6492:                          	;
 6493:                          	;
 6494:      1993 91 6A          	ACALL	MDES1		;R7=TOS EXP, R6=TOS-1 EXP,
 6495:                          				;R3=TOS-1 SIGN, OPERATION IS R1 # R0
 6496:                          	;
 6497:      1995 EF             	MOV	A,R7		;GET TOS EXPONENT
 6498:      1996 60 0D          	JZ	POP_AND_EXIT	;IF TOS=0 THEN POP AND 
 6499:      1998 BE 00 12       	CJNE	R6,#0,LOAD1	;CLEAR CARRY EXIT IF Z
 6500:                          	;
 6501:                          	;**************************************
 6502:                          	;
 6503:                          SWAP_AND_EXIT:	; Swap external args and 
 6504:                          	;
 6505:                          	;**************************************
 6506:                          	;
 6507:      199B 91 5E          	ACALL	LOAD_POINTERS
 6508:      199D 7F 06          	MOV	R7,#FP_NUMBER_SIZE
 6509:                          	;
 6510:      199F E2             SE1:	MOVX	A,@R0		;SWAP THE ARGUMENTS
 6511:      19A0 F3             	MOVX	@R1,A
 6512:      19A1 18             	DEC	R0
 6513:      19A2 19             	DEC	R1
 6514:      19A3 DF FA          	DJNZ	R7,SE1
 6515:                          	;
 6516:                          POP_AND_EXIT:
 6517:                          	;
 6518:      19A5 E5 09          	MOV	A,ARG_STACK	;POP THE STACK
 6519:      19A7 24 06          	ADD	A,#FP_NUMBER_SIZE
 6520:      19A9 F5 09          	MOV	ARG_STACK,A
 6521:      19AB E4             	CLR	A
 6522:      19AC 22             	RET
 6523:                          	;
 6524:                          	;
 6525:      19AD 9E             LOAD1:	SUBB	A,R6		;A = ARG 1 EXP - ARG 2
 6526:      19AE 8F 30          	MOV	FP_EXP,R7	;SAVE EXPONENT AND SIGN
 6527:      19B0 8C 2F          	MOV	FP_SIGN,R4
 6528:      19B2 50 09          	JNC	LOAD2		;ARG1 EXPONENT IS LARGER OR 
 6529:      19B4 8E 30          	MOV	FP_EXP,R6
 6530:      19B6 8B 2F          	MOV	FP_SIGN,R3
 6531:      19B8 F4             	CPL	A
 6532:      19B9 04             	INC	A		;COMPENSATE FOR EXP DELTA
 6533:      19BA C8             	XCH	A,R0		;FORCE R0 TO POINT AT THE LAR
 6534:      19BB C9             	XCH	A,R1		;EXPONENT
 6535:      19BC C8             	XCH	A,R0
 6536:                          	;
 6537:      19BD FF             LOAD2:	MOV	R7,A		;SAVE THE EXPONENT DELT
 6538:      19BE C2 23          	CLR	ADD_IN
 6539:      19C0 BD 00 02       	CJNE	R5,#0,LOAD21
 6540:      19C3 D2 23          	SETB	ADD_IN
 6541:                          	;
 6542:                          	; Load the R1 mantissa

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 119



 Line    I  Addr Code           Source

 6543:                          	;
 6544:      19C5 91 7B          LOAD21: ACALL	LOADR1_MANTISSA ;LOAD THE 
 6545:                          	;
 6546:                          	; Now align the number to the delta exp
 6547:                          	; R4 points to the string of the last d
 6548:                          	;
 6549:      19C7 BF 0B 00       	CJNE	R7,#DIGIT+DIGIT+3,LOAD22
 6550:      19CA 40 02          LOAD22: JC	LOAD23
 6551:      19CC 7F 0A          	MOV	R7,#DIGIT+DIGIT+2
 6552:                          	;
 6553:      19CE 75 2A 00       LOAD23: MOV	FP_CARRY,#00	;CLEAR THE CARR
 6554:      19D1 71 BB          	ACALL	RIGHT		;SHIFT THE NUMBER
 6555:                          	;
 6556:                          	; Set up for addition and subtraction
 6557:                          	;
 6558:      19D3 7F 04          	MOV	R7,#DIGIT	;LOOP COUNT
 6559:      19D5 79 2E          	MOV	R1,#FP_DIG78
 6560:                          ;
 6561:                          ;***************************************
 6562:                          ;****** Elektor 2 Patch ****************
 6563:                          ;****** Floting Point Error, found by D.
 6564:                          ;
 6565:                          ;	MOV	A,#9EH
 6566:                          ;****** Error Number 1
 6567:                          ;
 6568:                          ;****** Value in R4 must be complemented
 6569:                          ;****** first complement
 6570:                          ;
 6571:                          ;	CLR	C
 6572:                          ;	SUBB	A,R4
 6573:                          ;	DA	A
 6574:                          ;	XCH	A,R4
 6575:                          ;	JNZ	LOAD24
 6576:                          ;	MOV	R4,A
 6577:                          ;****** Error Number 2
 6578:                          ;
 6579:                          ;****** With substraction, after reducin
 6580:                          ;****** subtrahend to the same exponents
 6581:                          ;****** that one always has to make a bo
 6582:                          ;****** position of the minuend, not as 
 6583:                          ;****** were it is made only when R4 = 5
 6584:                          ;
 6585:                          ;LOAD24: CJNE	 A,#50H,LOAD25	 ;TEST FOR 
 6586:                          ;LOAD25: JNB	 ADD_IN,SUBLP	 ;DO SUBTRACT
 6587:                          ;
 6588:                          ;***************************************
 6589:                          ;****** Proper code starts here: *******
 6590:                          ;
 6591:      19D7 74 9A          	mov	A,#9AH
 6592:      19D9 C3             	clr	C
 6593:      19DA 9C             	subb	A,R4
 6594:      19DB D4             	da	A
 6595:      19DC CC             	xch	A,R4
 6596:      19DD 30 23 1B       	jnb	ADD_IN,SUBLP
 6597:      19E0 B4 50 00       	cjne	A,#50H,LOAD25
 6598:                          ;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 120



 Line    I  Addr Code           Source

 6599:                          ;****** continue with original code: ***
 6600:                          ;
 6601:      19E3 B3             LOAD25: CPL	C		;FLIP CARRY FOR ADDITION
 6602:      19E4 31 F2          	ACALL	ADDLP		;DO ADDITION
 6603:                          	;
 6604:      19E6 50 08          	JNC	ADD_R
 6605:      19E8 05 2A          	INC	FP_CARRY
 6606:      19EA 7F 01          	MOV	R7,#1
 6607:      19EC 71 BB          	ACALL	RIGHT
 6608:      19EE 71 72          	ACALL	INC_FP_EXP	;SHIFT AND BUMP EXPONE
 6609:                          	;
 6610:      19F0 61 63          ADD_R:	AJMP	STORE_ALIGN_TEST_AND_EXIT
 6611:                          	;
 6612:      19F2 E2             ADDLP:	MOVX	A,@R0
 6613:      19F3 37             	ADDC	A,@R1
 6614:      19F4 D4             	DA	A
 6615:      19F5 F7             	MOV	@R1,A
 6616:      19F6 18             	DEC	R0
 6617:      19F7 19             	DEC	R1
 6618:      19F8 DF F8          	DJNZ	R7,ADDLP	;LOOP UNTIL DONE
 6619:      19FA 22             	RET
 6620:                          	;
 6621:      19FB E2             SUBLP:	MOVX	A,@R0		;NOW DO SUBTRACTION
 6622:      19FC FE             	MOV	R6,A
 6623:      19FD E4             	CLR	A
 6624:      19FE 34 99          	ADDC	A,#99H
 6625:      1A00 97             	SUBB	A,@R1
 6626:      1A01 2E             	ADD	A,R6
 6627:      1A02 D4             	DA	A
 6628:      1A03 F7             	MOV	@R1,A
 6629:      1A04 18             	DEC	R0
 6630:      1A05 19             	DEC	R1
 6631:      1A06 DF F3          	DJNZ	R7,SUBLP
 6632:      1A08 40 11          	JC	FSUB6
 6633:                          	;
 6634:                          	; Need to complement the result and sig
 6635:                          	; point accumulator mantissa was larger
 6636:                          	; memory and their signs were equal.
 6637:                          	;
 6638:      1A0A B2 78          	CPL	FP_SIGN.0
 6639:      1A0C 79 2E          	MOV	R1,#FP_DIG78
 6640:      1A0E 7F 04          	MOV	R7,#DIGIT	;LOOP COUNT
 6641:                          	;
 6642:      1A10 74 9A          FSUB5:	MOV	A,#9AH
 6643:      1A12 97             	SUBB	A,@R1
 6644:      1A13 24 00          	ADD	A,#0
 6645:      1A15 D4             	DA	A
 6646:      1A16 F7             	MOV	@R1,A
 6647:      1A17 19             	DEC	R1
 6648:      1A18 B3             	CPL	C
 6649:      1A19 DF F5          	DJNZ	R7,FSUB5	;LOOP
 6650:                          	;
 6651:                          	; Now see how many zeros their are
 6652:                          	;
 6653:      1A1B 78 2B          FSUB6:	MOV	R0,#FP_DIG12
 6654:      1A1D 7F 00          	MOV	R7,#0

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 121



 Line    I  Addr Code           Source

 6655:                          	;
 6656:      1A1F E6             FSUB7:	MOV	A,@R0
 6657:      1A20 70 08          	JNZ	FSUB8
 6658:      1A22 0F             	INC	R7
 6659:      1A23 0F             	INC	R7
 6660:      1A24 08             	INC	R0
 6661:      1A25 B8 2F F7       	CJNE	R0,#FP_SIGN,FSUB7
 6662:      1A28 61 AB          	AJMP	ZERO_AND_EXIT
 6663:                          	;
 6664:      1A2A B4 10 00       FSUB8:	CJNE	A,#10H,FSUB81
 6665:      1A2D 50 01          FSUB81: JNC	FSUB9
 6666:      1A2F 0F             	INC	R7
 6667:                          	;
 6668:                          	; Now R7 has the number of leading zero
 6669:                          	;
 6670:      1A30 E5 30          FSUB9:	MOV	A,FP_EXP	;GET THE OLD EXPONEN
 6671:      1A32 C3             	CLR	C
 6672:      1A33 9F             	SUBB	A,R7		;SUBTRACT FROM THE NUMBER OF
 6673:      1A34 60 0B          	JZ	FSUB10
 6674:      1A36 40 09          	JC	FSUB10
 6675:                          	;
 6676:      1A38 F5 30          	MOV	FP_EXP,A	;SAVE THE NEW EXPONENT
 6677:                          	;
 6678:      1A3A 71 F5          	ACALL	LEFT1		;SHIFT THE FP ACC
 6679:      1A3C 75 2A 00       	MOV	FP_CARRY,#0
 6680:      1A3F 61 63          	AJMP	STORE_ALIGN_TEST_AND_EXIT
 6681:                          	;
 6682:      1A41 61 A5          FSUB10: AJMP	UNDERFLOW_AND_EXIT
 6683:                          	;
 6684:                          	;**************************************
 6685:                          	;
 6686:                          FLOATING_COMP:	; Compare two floating po
 6687:                          		; used for relational operations and i
 6688:                          		; than subtraction. ON RETURN, The car
 6689:                          		; if ARG1 is > ARG2, else carry is not
 6690:                          		; if ARG1 = ARG2, F0 gets set
 6691:                          	;
 6692:                          	;**************************************
 6693:                          	;
 6694:      1A43 91 6A          	ACALL	MDES1		;SET UP THE REGISTERS
 6695:      1A45 E5 09          	MOV	A,ARG_STACK
 6696:      1A47 24 0C          	ADD	A,#FP_NUMBER_SIZE+FP_NUMBER_SIZE
 6697:      1A49 F5 09          	MOV	ARG_STACK,A	;POP THE STACK TWICE, C
 6698:      1A4B EE             	MOV	A,R6		;CHECK OUT EXPONENTS
 6699:      1A4C C2 D5          	CLR	F0
 6700:      1A4E 9F             	SUBB	A,R7
 6701:      1A4F 60 0A          	JZ	EXPONENTS_EQUAL
 6702:      1A51 40 03          	JC	ARG1_EXP_IS_LARGER
 6703:                          	;
 6704:                          	; Now the ARG2 EXPONENT is > ARG1 EXPON
 6705:                          	;
 6706:                          SIGNS_DIFFERENT:
 6707:                          	;
 6708:      1A53 EB             	MOV	A,R3		;SEE IF SIGN OF ARG2 IS POSIT
 6709:      1A54 80 01          	SJMP	ARG1_EXP_IS_LARGER1
 6710:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 122



 Line    I  Addr Code           Source

 6711:                          ARG1_EXP_IS_LARGER:
 6712:                          	;
 6713:      1A56 EC             	MOV	A,R4		;GET THE SIGN OF ARG1 EXPONEN
 6714:                          ARG1_EXP_IS_LARGER1:
 6715:      1A57 60 01          	JZ	ARG1_EXP_IS_LARGER2
 6716:      1A59 B3             	CPL	C
 6717:                          ARG1_EXP_IS_LARGER2:
 6718:      1A5A 22             	RET
 6719:                          	;
 6720:                          EXPONENTS_EQUAL:
 6721:                          	;
 6722:                          	; First, test the sign, then the mantis
 6723:                          	;
 6724:      1A5B BD 00 F5       	CJNE	R5,#0,SIGNS_DIFFERENT
 6725:                          	;
 6726:                          BOTH_PLUS:
 6727:                          	;
 6728:      1A5E 7F 04          	MOV	R7,#DIGIT	;POINT AT MS DIGIT
 6729:      1A60 18             	DEC	R0
 6730:      1A61 18             	DEC	R0
 6731:      1A62 18             	DEC	R0
 6732:      1A63 19             	DEC	R1
 6733:      1A64 19             	DEC	R1
 6734:      1A65 19             	DEC	R1
 6735:                          	;
 6736:                          	; Now do the compare
 6737:                          	;
 6738:      1A66 E2             CLOOP:	MOVX	A,@R0
 6739:      1A67 FE             	MOV	R6,A
 6740:      1A68 E3             	MOVX	A,@R1
 6741:      1A69 9E             	SUBB	A,R6
 6742:      1A6A 70 EA          	JNZ	ARG1_EXP_IS_LARGER
 6743:      1A6C 08             	INC	R0
 6744:      1A6D 09             	INC	R1
 6745:      1A6E DF F6          	DJNZ	R7,CLOOP
 6746:                          	;
 6747:                          	; If here, the numbers are the same, th
 6748:                          	;
 6749:      1A70 D2 D5          	SETB	F0
 6750:      1A72 22             	RET			;EXIT WITH EQUAL
 6751:                          	;
 6752:                          ;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 6753:                          ;
 6754:                          FLOATING_MUL:	; Floating point multiply
 6755:                          ;
 6756:                          ;MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 6757:                          ;
 6758:      1A73 91 68          	ACALL	MUL_DIV_EXP_AND_SIGN
 6759:                          	;
 6760:                          	; check for zero exponents
 6761:                          	;
 6762:      1A75 BE 00 02       	CJNE	R6,#00,FMUL1	;ARG 2 EXP ZERO?
 6763:      1A78 61 AB          FMUL0:	AJMP	ZERO_AND_EXIT
 6764:                          	;
 6765:                          	; calculate the exponent
 6766:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 123



 Line    I  Addr Code           Source

 6767:      1A7A 8D 2F          FMUL1:	MOV	FP_SIGN,R5	;SAVE THE SIGN, IN
 6768:                          	;
 6769:      1A7C EF             	MOV	A,R7
 6770:      1A7D 60 F9          	JZ	FMUL0
 6771:      1A7F 2E             	ADD	A,R6		;ADD THE EXPONENTS
 6772:      1A80 20 E7 05       	JB	ACC.7,FMUL_OVER
 6773:      1A83 10 D7 08       	JBC	CY,FMUL21	;SEE IF CARRY IS SET
 6774:                          	;
 6775:      1A86 61 A5          	AJMP	UNDERFLOW_AND_EXIT
 6776:                          	;
 6777:                          FMUL_OVER:
 6778:                          	;
 6779:      1A88 50 02          	JNC	FMUL2		;OK IF SET
 6780:                          	;
 6781:      1A8A 61 94          FOV:	AJMP	OVERFLOW_AND_EXIT
 6782:                          ;***************************************
 6783:                          ;****** Wulf 1 Bugfix 1 ****************
 6784:                          ;****** Multiplication Error, found by D
 6785:                          ;
 6786:                          ; FMUL2: SUBB	 A,#129 	 ;SUBTRACT THE EX
 6787:                          ;
 6788:                          ;***************************************
 6789:                          ;****** Proper code starts here: *******
 6790:                          ;
 6791:      1A8C D2 28          FMUL2:	setb	mul_underflow	;Flag of multi
 6792:      1A8E 94 83          FMUL21: subb	A,#83H		;exp. multipl. resu
 6793:      1A90 04             	inc	A		;Correct SUBB 83H
 6794:      1A91 04             	inc	A		;to original SUBB 81H
 6795:      1A92 40 02          	jc     NMARK_L		;Limit case
 6796:      1A94 C2 28          	clr	mul_underflow	;No limit case
 6797:                          NMARK_L:
 6798:                          ;
 6799:                          ;****** continue with original code: ***
 6800:                          ;
 6801:      1A96 FE             	MOV	R6,A		;SAVE IT FOR LATER
 6802:                          	;
 6803:                          	; Unpack and load R0
 6804:                          	;
 6805:      1A97 71 7E          	ACALL	UNPACK_R0
 6806:                          	;
 6807:                          	; Now set up for loop multiply
 6808:                          	;
 6809:      1A99 7B 04          	MOV	R3,#DIGIT
 6810:      1A9B AC 01          	MOV	R4,R1B0
 6811:                          	;
 6812:                          	; Now, do the multiply and accumulate t
 6813:                          	;
 6814:      1A9D 8C 01          FMUL3:	MOV	R1B0,R4
 6815:      1A9F E3             	MOVX	A,@R1
 6816:      1AA0 FA             	MOV	R2,A
 6817:      1AA1 91 2B          	ACALL	MUL_NIBBLE
 6818:                          	;
 6819:      1AA3 EA             	MOV	A,R2
 6820:      1AA4 C4             	SWAP	A
 6821:      1AA5 91 2B          	ACALL	MUL_NIBBLE
 6822:      1AA7 1C             	DEC	R4

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 124



 Line    I  Addr Code           Source

 6823:      1AA8 DB F3          	DJNZ	R3,FMUL3
 6824:                          	;
 6825:                          	; Now, pack and restore the sign
 6826:                          	;
 6827:      1AAA 8E 30          	MOV	FP_EXP,R6
 6828:      1AAC 8D 2F          	MOV	FP_SIGN,R5
 6829:      1AAE 61 11          	AJMP	PACK		;FINISH IT OFF
 6830:                          	;
 6831:                          	;DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
 6832:                          	;
 6833:                          FLOATING_DIV:
 6834:                          	;
 6835:                          	;DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
 6836:                          	;
 6837:      1AB0 91 6A          	ACALL	MDES1
 6838:                          	;
 6839:                          	; Check the exponents
 6840:                          	;
 6841:      1AB2 8D 2F          	MOV	FP_SIGN,R5	;SAVE THE SIGN
 6842:      1AB4 BF 00 06       	CJNE	R7,#0,DIV0	;CLEARS THE CARRY
 6843:      1AB7 71 94          	ACALL	OVERFLOW_AND_EXIT
 6844:      1AB9 E4             	CLR	A
 6845:      1ABA D2 E3          	SETB	ACC.ZERO_DIVIDE
 6846:      1ABC 22             	RET
 6847:                          	;
 6848:      1ABD EE             DIV0:	MOV	A,R6		;GET EXPONENT
 6849:      1ABE 60 B8          	JZ	FMUL0		;EXIT IF ZERO
 6850:      1AC0 9F             	SUBB	A,R7		;DELTA EXPONENT
 6851:      1AC1 20 E7 04       	JB	ACC.7,D_UNDER
 6852:      1AC4 50 04          	JNC	DIV3
 6853:      1AC6 61 A5          	AJMP	UNDERFLOW_AND_EXIT
 6854:                          	;
 6855:      1AC8 50 C0          D_UNDER:JNC	FOV
 6856:                          	;
 6857:      1ACA 24 81          DIV3:	ADD	A,#129		;CORRECTLY BIAS THE EX
 6858:      1ACC F5 30          	MOV	FP_EXP,A	;SAVE THE EXPONENT
 6859:      1ACE 91 7B          	ACALL	LOADR1_MANTISSA ;LOAD THE DIVIDED
 6860:                          	;
 6861:      1AD0 7A 34          	MOV	R2,#FP_ACCC	;SAVE LOCATION
 6862:      1AD2 AB 00          	MOV	R3,R0B0 	;SAVE POINTER IN R3
 6863:      1AD4 75 2A 00       	MOV	FP_CARRY,#0	;ZERO CARRY BYTE
 6864:                          	;
 6865:      1AD7 7D FF          DIV4:	MOV	R5,#0FFH	;LOOP COUNT
 6866:      1AD9 D3             	SETB	C
 6867:                          	;
 6868:      1ADA 8B 00          DIV5:	MOV	R0B0,R3 	;RESTORE THE EXTERNAL
 6869:      1ADC 79 2E          	MOV	R1,#FP_DIG78	;SET UP INTERNAL POINT
 6870:      1ADE 7F 04          	MOV	R7,#DIGIT	;LOOP COUNT
 6871:      1AE0 50 17          	JNC	DIV7		;EXIT IF NO CARRY
 6872:                          	;
 6873:      1AE2 E2             DIV6:	MOVX	A,@R0		;DO ACCUMLATION
 6874:      1AE3 FE             	MOV	R6,A
 6875:      1AE4 E4             	CLR	A
 6876:      1AE5 34 99          	ADDC	A,#99H
 6877:      1AE7 9E             	SUBB	A,R6
 6878:      1AE8 27             	ADD	A,@R1

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 125



 Line    I  Addr Code           Source

 6879:      1AE9 D4             	DA	A
 6880:      1AEA F7             	MOV	@R1,A
 6881:      1AEB 18             	DEC	R0
 6882:      1AEC 19             	DEC	R1
 6883:      1AED DF F3          	DJNZ	R7,DIV6 	;LOOP
 6884:                          	;
 6885:      1AEF 0D             	INC	R5		;SUBTRACT COUNTER
 6886:      1AF0 40 E8          	JC	DIV5		;KEEP LOOPING IF CARRY
 6887:      1AF2 E7             	MOV	A,@R1		;GET CARRY
 6888:      1AF3 94 01          	SUBB	A,#1		;CARRY IS CLEARED
 6889:      1AF5 F7             	MOV	@R1,A		;SAVE CARRY DIGIT
 6890:      1AF6 B3             	CPL	C
 6891:      1AF7 80 E1          	SJMP	DIV5		;LOOP
 6892:                          	;
 6893:                          	; Restore the result if carry was found
 6894:                          	;
 6895:      1AF9 31 F2          DIV7:	ACALL	ADDLP		;ADD NUMBER BACK
 6896:      1AFB 77 00          	MOV	@R1,#0		;CLEAR CARRY
 6897:      1AFD 8A 00          	MOV	R0B0,R2 	;GET SAVE COUNTER
 6898:      1AFF A6 05          	MOV	@R0,5		;SAVE COUNT BYTE
 6899:                          	;
 6900:      1B01 0A             	INC	R2		;ADJUST SAVE COUNTER
 6901:      1B02 7F 01          	MOV	R7,#1		;BUMP DIVIDEND
 6902:      1B04 71 F3          	ACALL	LEFT
 6903:      1B06 BA 3E CE       	CJNE	R2,#FP_ACC8+2,DIV4
 6904:                          	;
 6905:      1B09 D5 30 02       	DJNZ	FP_EXP,DIV8
 6906:      1B0C 61 A5          	AJMP	UNDERFLOW_AND_EXIT
 6907:                          	;
 6908:      1B0E 75 2A 00       DIV8:	MOV	FP_CARRY,#0
 6909:                          	;
 6910:                          	;**************************************
 6911:                          	;
 6912:                          PACK:	; Pack the mantissa
 6913:                          	;
 6914:                          	;**************************************
 6915:                          	;
 6916:                          	; First, set up the pointers
 6917:                          	;
 6918:      1B11 78 34          	MOV	R0,#FP_ACCC
 6919:      1B13 E6             	MOV	A,@R0		;GET FP_ACCC
 6920:      1B14 FE             	MOV	R6,A		;SAVE FOR ZERO COUNT
 6921:      1B15 60 03          	JZ	PACK0		;JUMP OVER IF ZERO
 6922:      1B17 71 72          	ACALL	INC_FP_EXP	;BUMP THE EXPONENT
 6923:      1B19 18             	DEC	R0
 6924:                          	;
 6925:      1B1A 08             PACK0:	INC	R0		;POINT AT FP_ACC1
 6926:                          	;
 6927:      1B1B 74 08          PACK1:	MOV	A,#8		;ADJUST NIBBLE POINTER
 6928:      1B1D F9             	MOV	R1,A
 6929:      1B1E 28             	ADD	A,R0
 6930:      1B1F F8             	MOV	R0,A
 6931:      1B20 B6 05 00       	CJNE	@R0,#5,PACK11	;SEE IF ADJUSTING NE
 6932:      1B23 40 13          PACK11: JC	PACK31
 6933:                          	;
 6934:      1B25 D3             PACK2:	SETB	C

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 126



 Line    I  Addr Code           Source

 6935:      1B26 E4             	CLR	A
 6936:      1B27 18             	DEC	R0
 6937:      1B28 36             	ADDC	A,@R0
 6938:      1B29 D4             	DA	A
 6939:      1B2A D6             	XCHD	A,@R0		;SAVE THE VALUE
 6940:      1B2B 30 E4 09       	JNB	ACC.4,PACK3
 6941:      1B2E D9 F5          	DJNZ	R1,PACK2
 6942:                          	;
 6943:      1B30 18             	DEC	R0
 6944:      1B31 76 01          	MOV	@R0,#1
 6945:      1B33 71 72          	ACALL	INC_FP_EXP
 6946:      1B35 80 18          	SJMP	PACK4
 6947:                          	;
 6948:      1B37 19             PACK3:	DEC	R1
 6949:      1B38 E9             PACK31: MOV	A,R1
 6950:      1B39 C3             	CLR	C
 6951:      1B3A C8             	XCH	A,R0
 6952:      1B3B 98             	SUBB	A,R0
 6953:      1B3C F8             	MOV	R0,A
 6954:                          ;
 6955:                          ;***************************************
 6956:                          ;****** Wulf 1 Bugfix 2 ****************
 6957:                          ;****** Multiplication Error, found by D
 6958:                          ;
 6959:      1B3D 30 28 0F       	jnb	mul_underflow,PACK4
 6960:      1B40 C2 28          	clr	mul_underflow
 6961:      1B42 E5 30          	mov	A,FP_EXP	;test of exceeding in limi
 6962:      1B44 60 07          	jz	UNDER_MD	;message about underflow
 6963:      1B46 F4             	cpl	a		;test of exceeding in limit case
 6964:      1B47 60 04          	jz	UNDER_MD	;message about underflow
 6965:      1B49 F4             	cpl	a		;restore original exp
 6966:      1B4A B4 01 02       	cjne	a,#1,pack4	;jump if not outer limi
 6967:                          UNDER_MD:
 6968:      1B4D 61 A5          	ajmp	UNDERFLOW_AND_EXIT
 6969:                          ;
 6970:                          ;****** continue with original code: ***
 6971:                          ;
 6972:      1B4F 79 2B          PACK4:	MOV	R1,#FP_DIG12
 6973:                          	;
 6974:                          	; Now, pack
 6975:                          	;
 6976:      1B51 E6             PLOOP:	MOV	A,@R0
 6977:      1B52 C4             	SWAP	A		;FLIP THE DIGITS
 6978:      1B53 08             	INC	R0
 6979:      1B54 D6             	XCHD	A,@R0
 6980:      1B55 42 06          	ORL	6,A		;ACCUMULATE THE OR'ED DIGITS
 6981:      1B57 F7             	MOV	@R1,A
 6982:      1B58 08             	INC	R0
 6983:      1B59 09             	INC	R1
 6984:      1B5A B9 2F F4       	CJNE	R1,#FP_SIGN,PLOOP
 6985:      1B5D EE             	MOV	A,R6
 6986:      1B5E 70 03          	JNZ	STORE_ALIGN_TEST_AND_EXIT
 6987:      1B60 75 30 00       	MOV	FP_EXP,#0	;ZERO EXPONENT
 6988:                          	;
 6989:                          	;**************************************
 6990:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 127



 Line    I  Addr Code           Source

 6991:                          STORE_ALIGN_TEST_AND_EXIT:	;Save the num
 6992:                          	;
 6993:                          	;**************************************
 6994:                          	;
 6995:      1B63 91 5E          	ACALL	LOAD_POINTERS
 6996:      1B65 89 09          	MOV	ARG_STACK,R1	;SET UP THE NEW STACK
 6997:      1B67 78 30          	MOV	R0,#FP_EXP
 6998:                          	;
 6999:                          	; Now load the numbers
 7000:                          	;
 7001:      1B69 E6             STORE2: MOV	A,@R0
 7002:      1B6A F3             	MOVX	@R1,A		;SAVE THE NUMBER
 7003:      1B6B 18             	DEC	R0
 7004:      1B6C 19             	DEC	R1
 7005:      1B6D B8 2A F9       	CJNE	R0,#FP_CARRY,STORE2
 7006:                          	;
 7007:      1B70 E4             	CLR	A		;NO ERRORS
 7008:                          	;
 7009:      1B71 22             PRET:	RET			;EXIT
 7010:                          	;
 7011:                          INC_FP_EXP:
 7012:                          	;
 7013:      1B72 05 30          	INC	FP_EXP
 7014:      1B74 E5 30          	MOV	A,FP_EXP
 7015:      1B76 70 F9          	JNZ	PRET		;EXIT IF NOT ZERO
 7016:      1B78 D0 E0          	POP	ACC		;WASTE THE CALLING STACK
 7017:      1B7A D0 E0          	POP	ACC
 7018:      1B7C 61 94          	AJMP	OVERFLOW_AND_EXIT
 7019:                          ;
 7020:                          ;***************************************
 7021:                          ;
 7022:                          UNPACK_R0:	; Unpack BCD digits and load 
 7023:                          ;
 7024:                          ;***************************************
 7025:                          	;
 7026:      1B7E C0 01          	PUSH	R1B0
 7027:      1B80 79 32          	MOV	R1,#FP_NIB8
 7028:                          	;
 7029:      1B82 E2             ULOOP:	MOVX	A,@R0
 7030:      1B83 54 0F          	ANL	A,#0FH
 7031:      1B85 F7             	MOV	@R1,A		;SAVE THE NIBBLE
 7032:      1B86 E2             	MOVX	A,@R0
 7033:      1B87 C4             	SWAP	A
 7034:      1B88 54 0F          	ANL	A,#0FH
 7035:      1B8A 19             	DEC	R1
 7036:      1B8B F7             	MOV	@R1,A		;SAVE THE NIBBLE AGAIN
 7037:      1B8C 18             	DEC	R0
 7038:      1B8D 19             	DEC	R1
 7039:      1B8E B9 2A F1       	CJNE	R1,#FP_NIB1-1,ULOOP
 7040:                          	;
 7041:      1B91 D0 01          	POP	R1B0
 7042:                          	;
 7043:      1B93 22             LOAD7:	RET
 7044:                          	;
 7045:                          	;**************************************
 7046:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 128



 Line    I  Addr Code           Source

 7047:                          OVERFLOW_AND_EXIT:	;LOAD 99999999 E+127,
 7048:                          	;
 7049:                          	;**************************************
 7050:                          	;
 7051:      1B94 78 2E          	MOV	R0,#FP_DIG78
 7052:      1B96 74 99          	MOV	A,#99H
 7053:                          	;
 7054:      1B98 F6             OVE1:	MOV	@R0,A
 7055:      1B99 18             	DEC	R0
 7056:      1B9A B8 2A FB       	CJNE	R0,#FP_CARRY,OVE1
 7057:                          	;
 7058:      1B9D 75 30 FF       	MOV	FP_EXP,#0FFH
 7059:      1BA0 71 63          	ACALL	STORE_ALIGN_TEST_AND_EXIT
 7060:                          	;
 7061:      1BA2 D2 E1          	SETB	ACC.OVERFLOW
 7062:      1BA4 22             	RET
 7063:                          	;
 7064:                          	;**************************************
 7065:                          	;
 7066:                          UNDERFLOW_AND_EXIT:	;LOAD 0, SET UF BIT,
 7067:                          	;
 7068:                          	;**************************************
 7069:                          	;
 7070:      1BA5 71 AB          	ACALL	ZERO_AND_EXIT
 7071:      1BA7 E4             	CLR	A
 7072:      1BA8 D2 E0          	SETB	ACC.UNDERFLOW
 7073:      1BAA 22             	RET
 7074:                          	;
 7075:                          	;**************************************
 7076:                          	;
 7077:                          ZERO_AND_EXIT:		;LOAD 0, SET ZERO BIT, A
 7078:                          	;
 7079:                          	;**************************************
 7080:                          	;
 7081:      1BAB 71 B2          	ACALL	FP_CLEAR
 7082:      1BAD 71 63          	ACALL	STORE_ALIGN_TEST_AND_EXIT
 7083:      1BAF D2 E2          	SETB	ACC.ZERO
 7084:      1BB1 22             	RET			;EXIT
 7085:                          	;
 7086:                          	;**************************************
 7087:                          	;
 7088:                          FP_CLEAR:
 7089:                          	;
 7090:                          	; Clear internal storage
 7091:                          	;
 7092:                          	;**************************************
 7093:                          	;
 7094:      1BB2 E4             	CLR	A
 7095:      1BB3 78 3D          	MOV	R0,#FP_ACC8+1
 7096:                          	;
 7097:      1BB5 F6             FPC1:	MOV	@R0,A
 7098:      1BB6 18             	DEC	R0
 7099:      1BB7 B8 29 FB       	CJNE	R0,#FP_TEMP,FPC1
 7100:      1BBA 22             	RET
 7101:                          	;
 7102:                          	;**************************************

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 129



 Line    I  Addr Code           Source

 7103:                          	;
 7104:                          RIGHT:	; Shift ACCUMULATOR RIGHT the num
 7105:                          	; Save the shifted values in R4 if SAVE
 7106:                          	;
 7107:                          	;**************************************
 7108:                          	;
 7109:      1BBB 7C 00          	MOV	R4,#0		;IN CASE OF NO SHIFT
 7110:                          	;
 7111:      1BBD C3             RIGHT1: CLR	C
 7112:      1BBE EF             RIGHT2: MOV	A,R7		;GET THE DIGITS TO SHI
 7113:      1BBF 60 22          	JZ	RIGHTL1 	;EXIT IF ZERO
 7114:      1BC1 94 02          	SUBB	A,#2		;TWO TO DO?
 7115:      1BC3 50 1F          	JNC	RIGHT5		;SHIFT TWO NIBBLES
 7116:                          	;
 7117:                          	; Swap one nibble then exit
 7118:                          	;
 7119:      1BC5 C0 00          RIGHT3: PUSH	R0B0		;SAVE POINTER REGISTE
 7120:      1BC7 C0 01          	PUSH	R1B0
 7121:                          	;
 7122:      1BC9 79 2E          	MOV	R1,#FP_DIG78	;LOAD THE POINTERS
 7123:      1BCB 78 2D          	MOV	R0,#FP_DIG56
 7124:      1BCD EC             	MOV	A,R4		;GET THE OVERFLOW REGISTER
 7125:      1BCE D7             	XCHD	A,@R1		;GET DIGIT 8
 7126:      1BCF C4             	SWAP	A		;FLIP FOR LOAD
 7127:      1BD0 FC             	MOV	R4,A
 7128:                          	;
 7129:      1BD1 E7             RIGHTL: MOV	A,@R1		;GET THE LOW ORDER BY
 7130:      1BD2 D6             	XCHD	A,@R0		;SWAP NIBBLES
 7131:      1BD3 C4             	SWAP	A		;FLIP FOR STORE
 7132:      1BD4 F7             	MOV	@R1,A		;SAVE THE DIGITS
 7133:      1BD5 18             	DEC	R0		;BUMP THE POINTERS
 7134:      1BD6 19             	DEC	R1
 7135:      1BD7 B9 2A F7       	CJNE	R1,#FP_DIG12-1,RIGHTL	;LOOP
 7136:                          	;
 7137:      1BDA E7             	MOV	A,@R1		;ACC = CH8
 7138:      1BDB C4             	SWAP	A		;ACC = 8CH
 7139:      1BDC 54 0F          	ANL	A,#0FH		;ACC = 0CH
 7140:      1BDE F7             	MOV	@R1,A		;CARRY DONE
 7141:      1BDF D0 01          	POP	R1B0		;EXIT
 7142:      1BE1 D0 00          	POP	R0B0		;RESTORE REGISTER
 7143:      1BE3 22             RIGHTL1:RET
 7144:                          	;
 7145:      1BE4 FF             RIGHT5: MOV	R7,A		;SAVE THE NEW SHIFT NU
 7146:      1BE5 E4             	CLR	A
 7147:      1BE6 C5 2A          	XCH	A,FP_CARRY	;SWAP THE NIBBLES
 7148:      1BE8 C5 2B          	XCH	A,FP_DIG12
 7149:      1BEA C5 2C          	XCH	A,FP_DIG34
 7150:      1BEC C5 2D          	XCH	A,FP_DIG56
 7151:      1BEE C5 2E          	XCH	A,FP_DIG78
 7152:      1BF0 FC             	MOV	R4,A		;SAVE THE LAST DIGIT SHIFTED
 7153:      1BF1 80 CB          	SJMP	RIGHT2
 7154:                          	;
 7155:                          	;**************************************
 7156:                          	;
 7157:                          LEFT:	; Shift ACCUMULATOR LEFT the numbe
 7158:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 130



 Line    I  Addr Code           Source

 7159:                          	;**************************************
 7160:                          	;
 7161:      1BF3 7C 00          	MOV	R4,#00H 	;CLEAR FOR SOME ENTRYS
 7162:                          	;
 7163:      1BF5 C3             LEFT1:	CLR	C
 7164:      1BF6 EF             LEFT2:	MOV	A,R7		;GET SHIFT VALUE
 7165:      1BF7 60 22          	JZ	LEFTL1		;EXIT IF ZERO
 7166:      1BF9 94 02          	SUBB	A,#2		;SEE HOW MANY BYTES TO SHIFT
 7167:      1BFB 50 1F          	JNC	LEFT5
 7168:                          	;
 7169:      1BFD C0 00          LEFT3:	PUSH	R0B0		;SAVE POINTER
 7170:      1BFF C0 01          	PUSH	R1B0
 7171:      1C01 78 2A          	MOV	R0,#FP_CARRY
 7172:      1C03 79 2B          	MOV	R1,#FP_DIG12
 7173:                          	;
 7174:      1C05 E6             	MOV	A,@R0		;ACC=CHCL
 7175:      1C06 C4             	SWAP	A		;ACC = CLCH
 7176:      1C07 F6             	MOV	@R0,A		;ACC = CLCH, @R0 = CLCH
 7177:                          	;
 7178:      1C08 E7             LEFTL:	MOV	A,@R1		;DIG 12
 7179:      1C09 C4             	SWAP	A		;DIG 21
 7180:      1C0A D6             	XCHD	A,@R0
 7181:      1C0B F7             	MOV	@R1,A		;SAVE IT
 7182:      1C0C 08             	INC	R0		;BUMP POINTERS
 7183:      1C0D 09             	INC	R1
 7184:      1C0E B8 2E F7       	CJNE	R0,#FP_DIG78,LEFTL
 7185:                          	;
 7186:      1C11 EC             	MOV	A,R4
 7187:      1C12 C4             	SWAP	A
 7188:      1C13 D6             	XCHD	A,@R0
 7189:      1C14 54 F0          	ANL	A,#0F0H
 7190:      1C16 FC             	MOV	R4,A
 7191:                          	;
 7192:      1C17 D0 01          	POP	R1B0
 7193:      1C19 D0 00          	POP	R0B0		;RESTORE
 7194:      1C1B 22             LEFTL1: RET			;DONE
 7195:                          	;
 7196:      1C1C FF             LEFT5:	MOV	R7,A		;RESTORE COUNT
 7197:      1C1D E4             	CLR	A
 7198:      1C1E CC             	XCH	A,R4		;GET THE RESTORATION BYTE
 7199:      1C1F C5 2E          	XCH	A,FP_DIG78	;DO THE SWAP
 7200:      1C21 C5 2D          	XCH	A,FP_DIG56
 7201:      1C23 C5 2C          	XCH	A,FP_DIG34
 7202:      1C25 C5 2B          	XCH	A,FP_DIG12
 7203:      1C27 C5 2A          	XCH	A,FP_CARRY
 7204:      1C29 80 CB          	SJMP	LEFT2
 7205:                          	;
 7206:                          MUL_NIBBLE:
 7207:                          	;
 7208:                          	; Multiply the nibble in R7 by the FP_N
 7209:                          	; accumulate the product in FP_ACC
 7210:                          	;
 7211:                          	; Set up the pointers for multiplicatio
 7212:                          	;
 7213:      1C2B 54 0F          	ANL	A,#0FH		;STRIP OFF MS NIBBLE
 7214:      1C2D FF             	MOV	R7,A

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 131



 Line    I  Addr Code           Source

 7215:      1C2E 78 3C          	MOV	R0,#FP_ACC8
 7216:      1C30 79 32          	MOV	R1,#FP_NIB8
 7217:      1C32 E4             	CLR	A
 7218:      1C33 F5 33          	MOV	FP_ACCX,A
 7219:                          	;
 7220:      1C35 18             MNLOOP: DEC	R0		;BUMP POINTER TO PROPAGA
 7221:      1C36 26             	ADD	A,@R0		;ATTEMPT TO FORCE CARRY
 7222:      1C37 D4             	DA	A		;BCD ADJUST
 7223:      1C38 30 E4 03       	JNB	ACC.4,MNL0	;DON'T ADJUST IF NO NEED
 7224:      1C3B 18             	DEC	R0		;PROPAGATE CARRY TO THE NEXT DI
 7225:      1C3C 06             	INC	@R0		;DO THE ADJUSTING
 7226:      1C3D 08             	INC	R0		;RESTORE R0
 7227:                          	;
 7228:      1C3E D6             MNL0:	XCHD	A,@R0		;RESTORE INITIAL NUMBE
 7229:      1C3F 8F F0          	MOV	B,R7		;GET THE NUBBLE TO MULTIPLY
 7230:      1C41 E7             	MOV	A,@R1		;GET THE OTHER NIBBLE
 7231:      1C42 A4             	MUL	AB		;DO THE MULTIPLY
 7232:      1C43 75 F0 0A       	MOV	B,#10		;NOW BCD ADJUST
 7233:      1C46 84             	DIV	AB
 7234:      1C47 C5 F0          	XCH	A,B		;GET THE REMAINDER
 7235:      1C49 26             	ADD	A,@R0		;PROPAGATE THE PARTIAL PRODU
 7236:      1C4A D4             	DA	A		;BCD ADJUST
 7237:      1C4B 30 E4 02       	JNB	ACC.4,MNL1	;PROPAGATE PARTIAL PRODU
 7238:      1C4E 05 F0          	INC	B
 7239:                          	;
 7240:      1C50 08             MNL1:	INC	R0
 7241:      1C51 D6             	XCHD	A,@R0		;SAVE THE NEW PRODUCT
 7242:      1C52 18             	DEC	R0
 7243:      1C53 E5 F0          	MOV	A,B		;GET BACK THE QUOTIENT
 7244:      1C55 19             	DEC	R1
 7245:      1C56 B9 2A DC       	CJNE	R1,#FP_NIB1-1,MNLOOP
 7246:                          	;
 7247:      1C59 25 33          	ADD	A,FP_ACCX	;GET THE OVERFLOW
 7248:      1C5B D4             	DA	A		;ADJUST
 7249:      1C5C F6             	MOV	@R0,A		;SAVE IT
 7250:      1C5D 22             	RET			;EXIT
 7251:                          	;
 7252:                          	;**************************************
 7253:                          	;
 7254:                          LOAD_POINTERS:	; Load the ARG_STACK into
 7255:                          	;
 7256:                          	;**************************************
 7257:                          	;
 7258:      1C5E 75 A0 01       	MOV	P2,#ARG_STACK_PAGE
 7259:      1C61 A8 09          	MOV	R0,ARG_STACK
 7260:      1C63 74 06          	MOV	A,#FP_NUMBER_SIZE
 7261:      1C65 28             	ADD	A,R0
 7262:      1C66 F9             	MOV	R1,A
 7263:      1C67 22             	RET
 7264:                          	;
 7265:                          	;**************************************
 7266:                          	;
 7267:                          MUL_DIV_EXP_AND_SIGN:
 7268:                          	;
 7269:                          	; Load the sign into R7, R6. R5 gets th
 7270:                          	; multiply and divide.

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 132



 Line    I  Addr Code           Source

 7271:                          	;
 7272:                          	;**************************************
 7273:                          	;
 7274:      1C68 71 B2          	ACALL	FP_CLEAR	;CLEAR INTERNAL MEMORY
 7275:                          	;
 7276:      1C6A 91 5E          MDES1:	ACALL	LOAD_POINTERS	;LOAD REGISTE
 7277:      1C6C E2             	MOVX	A,@R0		;ARG 1 EXP
 7278:      1C6D FF             	MOV	R7,A		;SAVED IN R7
 7279:      1C6E E3             	MOVX	A,@R1		;ARG 2 EXP
 7280:      1C6F FE             	MOV	R6,A		;SAVED IN R6
 7281:      1C70 18             	DEC	R0		;BUMP POINTERS TO SIGN
 7282:      1C71 19             	DEC	R1
 7283:      1C72 E2             	MOVX	A,@R0		;GET THE SIGN
 7284:      1C73 FC             	MOV	R4,A		;SIGN OF ARG1
 7285:      1C74 E3             	MOVX	A,@R1		;GET SIGN OF NEXT ARG
 7286:      1C75 FB             	MOV	R3,A		;SIGN OF ARG2
 7287:      1C76 6C             	XRL	A,R4		;ACC GETS THE NEW SIGN
 7288:      1C77 FD             	MOV	R5,A		;R5 GETS THE NEW SIGN
 7289:                          	;
 7290:                          	; Bump the pointers to point at the LS 
 7291:                          	;
 7292:      1C78 18             	DEC	R0
 7293:      1C79 19             	DEC	R1
 7294:                          	;
 7295:      1C7A 22             	RET
 7296:                          	;
 7297:                          	;**************************************
 7298:                          	;
 7299:                          LOADR1_MANTISSA:
 7300:                          	;
 7301:                          	; Load the mantissa of R0 into FP_Digit
 7302:                          	;
 7303:                          	;**************************************
 7304:                          	;
 7305:      1C7B C0 00          	PUSH	R0B0		;SAVE REGISTER 1
 7306:      1C7D 78 2E          	MOV	R0,#FP_DIG78	;SET UP THE POINTER
 7307:                          	;
 7308:      1C7F E3             LOADR1: MOVX	A,@R1
 7309:      1C80 F6             	MOV	@R0,A
 7310:      1C81 19             	DEC	R1
 7311:      1C82 18             	DEC	R0
 7312:      1C83 B8 2A F9       	CJNE	R0,#FP_CARRY,LOADR1
 7313:                          	;
 7314:      1C86 D0 00          	POP	R0B0
 7315:      1C88 22             	RET
 7316:                          	;
 7317:                          	;**************************************
 7318:                          	;
 7319:                          HEXSCAN:	; Scan a string to determine if
 7320:                          		; set carry if hex, else carry = 0
 7321:                          	;
 7322:                          	;**************************************
 7323:                          	;
 7324:      1C89 B1 5F          	ACALL	GET_DPTR_CHARACTER
 7325:      1C8B C0 83          	PUSH	DPH
 7326:      1C8D C0 82          	PUSH	DPL		;SAVE THE POINTER

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 133



 Line    I  Addr Code           Source

 7327:                          	;
 7328:      1C8F E0             HEXSC1: MOVX	A,@DPTR 	;GET THE CHARACTER
 7329:      1C90 F1 ED          	ACALL	DIGIT_CHECK	;SEE IF A DIGIT
 7330:      1C92 40 12          	JC	HS1		;CONTINUE IF A DIGIT
 7331:      1C94 91 A9          	ACALL	HEX_CHECK	;SEE IF HEX
 7332:      1C96 40 0E          	JC	HS1
 7333:                          	;
 7334:      1C98 C2 E5          	CLR	ACC.5		;NO LOWER CASE
 7335:      1C9A B4 48 03       	CJNE	A,#'H',HEXDON
 7336:      1C9D D3             	SETB	C
 7337:      1C9E 80 01          	SJMP	HEXDO1		;NUMBER IS VALID HEX, MAYB
 7338:                          	;
 7339:      1CA0 C3             HEXDON: CLR	C
 7340:                          	;
 7341:      1CA1 D0 82          HEXDO1: POP	DPL		;RESTORE POINTER
 7342:      1CA3 D0 83          	POP	DPH
 7343:      1CA5 22             	RET
 7344:                          	;
 7345:      1CA6 A3             HS1:	INC	DPTR		;BUMP TO NEXT CHARACTER
 7346:      1CA7 80 E6          	SJMP	HEXSC1		;LOOP
 7347:                          	;
 7348:                          HEX_CHECK:	;CHECK FOR A VALID ASCII HEX,
 7349:                          	;
 7350:      1CA9 C2 E5          	CLR	ACC.5		;WASTE LOWER CASE
 7351:      1CAB B4 47 00       	CJNE	A,#'F'+1,HEX_CHECK1     ;SEE IF F 
 7352:                          HEX_CHECK1:
 7353:      1CAE 40 01          	JC	HC1
 7354:      1CB0 22             	RET
 7355:                          	;
 7356:      1CB1 B4 41 00       HC1:	CJNE	A,#'A',HC11     ;SEE IF A OR G
 7357:      1CB4 B3             HC11:	CPL	C
 7358:      1CB5 22             	RET
 7359:                          	;
 7360:                          PUSHR2R0:
 7361:                          	;
 7362:      1CB6 7B 00          	MOV	R3,#HIGH CONVERT;CONVERSION LOCATIO
 7363:      1CB8 79 58          	MOV	R1,#LOW CONVERT
 7364:      1CBA D1 F7          	ACALL	CONVERT_BINARY_TO_ASCII_STRING
 7365:      1CBC 74 0D          	MOV	A,#0DH		;A CR TO TERMINATE
 7366:      1CBE F3             	MOVX	@R1,A		;SAVE THE CR
 7367:      1CBF 90 00 58       	MOV	DPTR,#CONVERT
 7368:                          	;
 7369:                          	; Falls thru to FLOATING INPUT
 7370:                          	;
 7371:                          	;**************************************
 7372:                          	;
 7373:                          FLOATING_POINT_INPUT:	; Input a floating
 7374:                          			; the DPTR
 7375:                          	;
 7376:                          	;**************************************
 7377:                          	;
 7378:      1CC2 71 B2          	ACALL	FP_CLEAR	;CLEAR EVERYTHING
 7379:      1CC4 B1 5F          	ACALL	GET_DPTR_CHARACTER
 7380:      1CC6 B1 65          	ACALL	PLUS_MINUS_TEST
 7381:      1CC8 92 78          	MOV	MSIGN,C 	;SAVE THE MANTISSA SIGN
 7382:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 134



 Line    I  Addr Code           Source

 7383:                          	; Now, set up for input loop
 7384:                          	;
 7385:      1CCA 78 34          	MOV	R0,#FP_ACCC
 7386:      1CCC 7E 7F          	MOV	R6,#7FH 	;BASE EXPONENT
 7387:      1CCE D2 D5          	SETB	F0		;SET INITIAL FLAG
 7388:                          	;
 7389:      1CD0 F1 EB          INLOOP: ACALL	GET_DIGIT_CHECK
 7390:      1CD2 50 07          	JNC	GTEST		;IF NOT A CHARACTER, WHAT IS
 7391:      1CD4 54 0F          	ANL	A,#0FH		;STRIP ASCII
 7392:      1CD6 B1 38          	ACALL	STDIG		;STORE THE DIGITS
 7393:                          	;
 7394:      1CD8 A3             INLPIK: INC	DPTR		;BUMP POINTER FOR LOOP
 7395:      1CD9 80 F5          	SJMP	INLOOP		;LOOP FOR INPUT
 7396:                          	;
 7397:      1CDB B4 2E 0C       GTEST:	CJNE	A,#'.',GT1      ;SEE IF A RA
 7398:      1CDE 20 51 63       	JB	FOUND_RADIX,INERR
 7399:      1CE1 D2 51          	SETB	FOUND_RADIX
 7400:      1CE3 B8 34 F2       	CJNE	R0,#FP_ACCC,INLPIK
 7401:      1CE6 D2 52          	SETB	FIRST_RADIX	;SET IF FIRST RADIX
 7402:      1CE8 80 EE          	SJMP	INLPIK		;GET ADDITIONAL DIGITS
 7403:                          	;
 7404:      1CEA 20 D5 57       GT1:	JB	F0,INERR	;ERROR IF NOT CLEARED
 7405:      1CED B4 65 02       	CJNE	A,#'e',GT11     ;CHECK FOR LOWER C
 7406:      1CF0 80 03          	SJMP	GT12
 7407:      1CF2 B4 45 33       GT11:	CJNE	A,#'E',FINISH_UP
 7408:      1CF5 B1 5E          GT12:	ACALL	INC_AND_GET_DPTR_CHARACTER
 7409:      1CF7 B1 65          	ACALL	PLUS_MINUS_TEST
 7410:      1CF9 92 50          	MOV	XSIGN,C 	;SAVE SIGN STATUS
 7411:      1CFB F1 EB          	ACALL	GET_DIGIT_CHECK
 7412:      1CFD 50 45          	JNC	INERR
 7413:                          	;
 7414:      1CFF 54 0F          	ANL	A,#0FH		;STRIP ASCII BIAS OFF THE C
 7415:      1D01 FD             	MOV	R5,A		;SAVE THE CHARACTER IN R5
 7416:                          	;
 7417:      1D02 A3             GT2:	INC	DPTR
 7418:      1D03 F1 EB          	ACALL	GET_DIGIT_CHECK
 7419:      1D05 50 0D          	JNC	FINISH1
 7420:      1D07 54 0F          	ANL	A,#0FH		;STRIP OFF BIAS
 7421:      1D09 CD             	XCH	A,R5		;GET THE LAST DIGIT
 7422:      1D0A 75 F0 0A       	MOV	B,#10		;MULTIPLY BY TEN
 7423:      1D0D A4             	MUL	AB
 7424:      1D0E 2D             	ADD	A,R5		;ADD TO ORIGINAL VALUE
 7425:      1D0F FD             	MOV	R5,A		;SAVE IN R5
 7426:      1D10 50 F0          	JNC	GT2		;LOOP IF NO CARRY
 7427:      1D12 7D FF          	MOV	R5,#0FFH	;FORCE AN ERROR
 7428:                          	;
 7429:      1D14 ED             FINISH1:MOV	A,R5		;GET THE SIGN
 7430:      1D15 30 50 09       	JNB	XSIGN,POSNUM	;SEE IF EXPONENT IS PO
 7431:      1D18 C3             	CLR	C
 7432:      1D19 9E             	SUBB	A,R6
 7433:      1D1A F4             	CPL	A
 7434:      1D1B 04             	INC	A
 7435:      1D1C 40 09          	JC	FINISH2
 7436:      1D1E 74 01          	MOV	A,#01H
 7437:      1D20 22             	RET
 7438:                          	;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 135



 Line    I  Addr Code           Source

 7439:      1D21 2E             POSNUM: ADD	A,R6		;ADD TO EXPONENT
 7440:      1D22 50 03          	JNC	FINISH2
 7441:                          	;
 7442:      1D24 74 02          POSNM1: MOV	A,#02H
 7443:      1D26 22             	RET
 7444:                          	;
 7445:      1D27 CE             FINISH2:XCH	A,R6		;SAVE THE EXPONENT
 7446:                          	;
 7447:                          FINISH_UP:
 7448:                          	;
 7449:      1D28 8E 30          	MOV	FP_EXP,R6	;SAVE EXPONENT
 7450:      1D2A B8 34 02       	CJNE	R0,#FP_ACCC,FINISH_UP1
 7451:      1D2D 71 B2          	ACALL	FP_CLEAR	;CLEAR THE MEMORY IF 0
 7452:                          FINISH_UP1:
 7453:      1D2F E5 09          	MOV	A,ARG_STACK	;GET THE ARG STACK
 7454:      1D31 C3             	CLR	C
 7455:      1D32 94 0C          	SUBB	A,#FP_NUMBER_SIZE+FP_NUMBER_SIZE
 7456:      1D34 F5 09          	MOV	ARG_STACK,A	;ADJUST FOR STORE
 7457:      1D36 61 11          	AJMP	PACK
 7458:                          	;
 7459:      1D38 C2 D5          STDIG:	CLR	F0		;CLEAR INITIAL DESIGNATOR
 7460:      1D3A 70 0B          	JNZ	STDIG1		;CONTINUE IF NOT ZERO
 7461:      1D3C B8 34 08       	CJNE	R0,#FP_ACCC,STDIG1
 7462:      1D3F 30 52 04       	JNB	FIRST_RADIX,RET_X
 7463:                          	;
 7464:      1D42 DE 02          DECX:	DJNZ	R6,RET_X
 7465:                          	;
 7466:      1D44 74 FF          INERR:	MOV	A,#0FFH
 7467:                          	;
 7468:      1D46 22             RET_X:	RET
 7469:                          	;
 7470:      1D47 20 53 02       STDIG1: JB	DONE_LOAD,FRTEST
 7471:      1D4A C2 52          	CLR	FIRST_RADIX
 7472:                          	;
 7473:      1D4C 20 52 F3       FRTEST: JB	FIRST_RADIX,DECX
 7474:                          	;
 7475:      1D4F 20 51 01       FDTEST: JB	FOUND_RADIX,FDT1
 7476:      1D52 0E             	INC	R6
 7477:                          	;
 7478:      1D53 20 53 F0       FDT1:	JB	DONE_LOAD,RET_X
 7479:      1D56 B8 3D 02       	CJNE	R0,#FP_ACC8+1,FDT2
 7480:      1D59 D2 53          	SETB	DONE_LOAD
 7481:                          	;
 7482:      1D5B F6             FDT2:	MOV	@R0,A		;SAVE THE STRIPPED ACCU
 7483:      1D5C 08             	INC	R0		;BUMP THE POINTER
 7484:      1D5D 22             	RET			;EXIT
 7485:                          	;
 7486:                          	;**************************************
 7487:                          	;
 7488:                          	; I/O utilities
 7489:                          	;
 7490:                          	;**************************************
 7491:                          	;
 7492:                          INC_AND_GET_DPTR_CHARACTER:
 7493:                          	;
 7494:      1D5E A3             	INC	DPTR

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 136



 Line    I  Addr Code           Source

 7495:                          	;
 7496:                          GET_DPTR_CHARACTER:
 7497:                          	;
 7498:      1D5F E0             	MOVX	A,@DPTR 	;GET THE CHARACTER
 7499:      1D60 B4 20 16       	CJNE	A,#' ',PMT1     ;SEE IF A SPACE
 7500:                          	;
 7501:                          	; Kill spaces
 7502:                          	;
 7503:      1D63 80 F9          	SJMP	INC_AND_GET_DPTR_CHARACTER
 7504:                          	;
 7505:                          PLUS_MINUS_TEST:
 7506:                          	;
 7507:      1D65 B4 E3 02       	CJNE	A,#0E3H,PMT11	;SEE IF A PLUS, PLUS
 7508:      1D68 80 0E          	SJMP	PMT3
 7509:      1D6A B4 2B 02       PMT11:	CJNE	A,#'+',PMT12
 7510:      1D6D 80 09          	SJMP	PMT3
 7511:      1D6F B4 E5 02       PMT12:	CJNE	A,#0E5H,PMT13	;SEE IF MINUS,
 7512:      1D72 80 03          	SJMP	PMT2
 7513:      1D74 B4 2D 02       PMT13:	CJNE	A,#'-',PMT1
 7514:                          	;
 7515:      1D77 D3             PMT2:	SETB	C
 7516:                          	;
 7517:      1D78 A3             PMT3:	INC	DPTR
 7518:                          	;
 7519:      1D79 22             PMT1:	RET
 7520:                          	;
 7521:                          	;**************************************
 7522:                          	;
 7523:                          FLOATING_POINT_OUTPUT:	; Output the numb
 7524:                          	;
 7525:                          	; IF FORMAT = 00 - FREE FLOATING
 7526:                          	;	    = FX - EXPONENTIAL (X IS THE NUMB
 7527:                          	;	    = NX - N = NUM BEFORE RADIX, X = 
 7528:                          	;		   N + X = 8 MAX
 7529:                          	;
 7530:                          	;**************************************
 7531:                          	;
 7532:      1D7A 91 6A          	ACALL	MDES1		;GET THE NUMBER TO OUTPUT,
 7533:      1D7C 31 A5          	ACALL	POP_AND_EXIT	;OUTPUT POPS THE STA
 7534:      1D7E EF             	MOV	A,R7
 7535:      1D7F FE             	MOV	R6,A		;PUT THE EXPONENT IN R6
 7536:      1D80 71 7E          	ACALL	UNPACK_R0	;UNPACK THE NUMBER
 7537:      1D82 78 2B          	MOV	R0,#FP_NIB1	;POINT AT THE NUMBER
 7538:      1D84 E5 17          	MOV	A,FORMAT	;GET THE FORMAT
 7539:      1D86 FB             	MOV	R3,A		;SAVE IN CASE OF EXP FORMAT
 7540:      1D87 60 49          	JZ	FREE		;FREE FLOATING?
 7541:      1D89 B4 F0 00       	CJNE	A,#0F0H,FPO1	;SEE IF EXPONENTIAL
 7542:      1D8C 50 73          FPO1:	JNC	EXPOUT
 7543:                          	;
 7544:                          	; If here, must be integer USING format
 7545:                          	;
 7546:      1D8E EE             	MOV	A,R6		;GET THE EXPONENT
 7547:      1D8F 70 02          	JNZ	FPO2
 7548:      1D91 7E 80          	MOV	R6,#80H
 7549:      1D93 EB             FPO2:	MOV	A,R3		;GET THE FORMAT
 7550:      1D94 C4             	SWAP	A		;SPLIT INTEGER AND FRACTION

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 137



 Line    I  Addr Code           Source

 7551:      1D95 54 0F          	ANL	A,#0FH
 7552:      1D97 FA             	MOV	R2,A		;SAVE INTEGER
 7553:      1D98 D1 67          	ACALL	NUM_LT		;GET THE NUMBER OF INTEGE
 7554:      1D9A CA             	XCH	A,R2		;FLIP FOR SUBB
 7555:      1D9B C3             	CLR	C
 7556:      1D9C 9A             	SUBB	A,R2
 7557:      1D9D FF             	MOV	R7,A
 7558:      1D9E 50 06          	JNC	FPO3
 7559:      1DA0 7D 3F          	MOV	R5,#'?'         ;OUTPUT A QUESTION 
 7560:      1DA2 D1 9C          	ACALL	SOUT1		;NUMBER IS TOO LARGE FOR F
 7561:      1DA4 A1 D2          	AJMP	FREE
 7562:      1DA6 BA 00 07       FPO3:	CJNE	R2,#00,USING0	;SEE IF ZERO
 7563:      1DA9 1F             	DEC	R7
 7564:      1DAA D1 89          	ACALL	SS7
 7565:      1DAC D1 96          	ACALL	ZOUT		;OUTPUT A ZERO
 7566:      1DAE 80 06          	SJMP	USING1
 7567:                          	;
 7568:      1DB0 D1 89          USING0: ACALL	SS7		;OUTPUT SPACES, IF NE
 7569:      1DB2 EA             	MOV	A,R2		;OUTPUT DIGITS
 7570:      1DB3 FF             	MOV	R7,A
 7571:      1DB4 D1 4B          	ACALL	OUTR0
 7572:                          	;
 7573:      1DB6 EB             USING1: MOV	A,R3
 7574:      1DB7 54 0F          	ANL	A,#0FH		;GET THE NUMBER RIGHT OF DP
 7575:      1DB9 FA             	MOV	R2,A		;SAVE IT
 7576:      1DBA 60 BD          	JZ	PMT1		;EXIT IF ZERO
 7577:      1DBC D1 92          	ACALL	ROUT		;OUTPUT DP
 7578:      1DBE D1 70          	ACALL	NUM_RT
 7579:      1DC0 B5 02 03       	CJNE	A,2,USINGX	;COMPARE A TO R2
 7580:                          	;
 7581:      1DC3 EA             USINGY: MOV	A,R2
 7582:      1DC4 C1 80          	AJMP	Z7R7
 7583:                          	;
 7584:      1DC6 50 FB          USINGX: JNC	USINGY
 7585:                          	;
 7586:      1DC8 CA             USING2: XCH	A,R2
 7587:      1DC9 C3             	CLR	C
 7588:      1DCA 9A             	SUBB	A,R2
 7589:      1DCB CA             	XCH	A,R2
 7590:      1DCC D1 80          	ACALL	Z7R7		;OUTPUT ZEROS IF NEED TO
 7591:      1DCE EA             	MOV	A,R2
 7592:      1DCF FF             	MOV	R7,A
 7593:      1DD0 C1 4B          	AJMP	OUTR0
 7594:                          	;
 7595:                          	; First, force exponential output, if n
 7596:                          	;
 7597:      1DD2 EE             FREE:	MOV	A,R6		;GET THE EXPONENT
 7598:      1DD3 70 04          	JNZ	FREE1		;IF ZERO, PRINT IT
 7599:      1DD5 D1 9A          	ACALL	SOUT
 7600:      1DD7 C1 96          	AJMP	ZOUT
 7601:                          	;
 7602:      1DD9 7B F0          FREE1:	MOV	R3,#0F0H	;IN CASE EXP NEEDED
 7603:      1DDB 74 77          	MOV	A,#80H-DIGIT-DIGIT-1
 7604:      1DDD 2E             	ADD	A,R6
 7605:      1DDE 40 21          	JC	EXPOUT
 7606:      1DE0 94 F7          	SUBB	A,#0F7H

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 138



 Line    I  Addr Code           Source

 7607:      1DE2 40 1D          	JC	EXPOUT
 7608:                          	;
 7609:                          	; Now, just print the number
 7610:                          	;
 7611:      1DE4 D1 8B          	ACALL	SINOUT		;PRINT THE SIGN OF THE NU
 7612:      1DE6 D1 67          	ACALL	NUM_LT		;GET THE NUMBER LEFT OF D
 7613:      1DE8 B4 08 02       	CJNE	A,#8,FREE4
 7614:      1DEB C1 4B          	AJMP	OUTR0
 7615:                          	;
 7616:      1DED D1 4B          FREE4:	ACALL	OUTR0
 7617:      1DEF D1 5D          	ACALL	ZTEST		;TEST FOR TRAILING ZEROS
 7618:      1DF1 60 57          	JZ	U_RET		;DONE IF ALL TRAILING ZEROS
 7619:      1DF3 D1 92          	ACALL	ROUT		;OUTPUT RADIX
 7620:                          	;
 7621:      1DF5 7F 01          FREE2:	MOV	R7,#1		;OUTPUT ONE DIGIT
 7622:      1DF7 D1 4B          	ACALL	OUTR0
 7623:      1DF9 70 4F          	JNZ	U_RET
 7624:      1DFB D1 5D          	ACALL	ZTEST
 7625:      1DFD 60 4B          	JZ	U_RET
 7626:      1DFF 80 F4          	SJMP	FREE2		;LOOP
 7627:                          	;
 7628:      1E01 D1 8B          EXPOUT: ACALL	SINOUT		;PRINT THE SIGN
 7629:      1E03 7F 01          	MOV	R7,#1		;OUTPUT ONE CHARACTER
 7630:      1E05 D1 4B          	ACALL	OUTR0
 7631:      1E07 D1 92          	ACALL	ROUT		;OUTPUT RADIX
 7632:      1E09 EB             	MOV	A,R3		;GET FORMAT
 7633:      1E0A 54 0F          	ANL	A,#0FH		;STRIP INDICATOR
 7634:      1E0C 60 06          	JZ	EXPOTX
 7635:                          	;
 7636:      1E0E FF             	MOV	R7,A		;OUTPUT THE NUMBER OF DIGITS
 7637:      1E0F 1F             	DEC	R7		;ADJUST BECAUSE ONE CHAR ALREAD
 7638:      1E10 D1 4B          	ACALL	OUTR0
 7639:      1E12 80 02          	SJMP	EXPOT4
 7640:                          	;
 7641:      1E14 B1 F5          EXPOTX: ACALL	FREE2		;OUTPUT UNTIL TRAIL
 7642:                          	;
 7643:      1E16 D1 9A          EXPOT4: ACALL	SOUT		;OUTPUT A SPACE
 7644:      1E18 7D 45          	MOV	R5,#'E'
 7645:      1E1A D1 9C          	ACALL	SOUT1		;OUTPUT AN E
 7646:      1E1C EE             	MOV	A,R6		;GET THE EXPONENT
 7647:      1E1D 60 04          	JZ	XOUT0		;EXIT IF ZERO
 7648:      1E1F 14             	DEC	A		;ADJUST FOR THE DIGIT ALREADY OU
 7649:      1E20 B4 80 05       	CJNE	A,#80H,XOUT2	;SEE WHAT IT IS
 7650:                          	;
 7651:      1E23 D1 9A          XOUT0:	ACALL	SOUT
 7652:      1E25 E4             	CLR	A
 7653:      1E26 80 0C          	SJMP	XOUT4
 7654:                          	;
 7655:      1E28 40 06          XOUT2:	JC	XOUT3		;NEGATIVE EXPONENT
 7656:      1E2A 7D 2B          	MOV	R5,#'+'         ;OUTPUT A PLUS SIGN
 7657:      1E2C D1 9C          	ACALL	SOUT1
 7658:      1E2E 80 04          	SJMP	XOUT4
 7659:                          	;
 7660:      1E30 D1 8E          XOUT3:	ACALL	MOUT
 7661:      1E32 F4             	CPL	A		;FLIP BITS
 7662:      1E33 04             	INC	A		;BUMP

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 139



 Line    I  Addr Code           Source

 7663:                          	;
 7664:      1E34 C2 E7          XOUT4:	CLR	ACC.7
 7665:      1E36 F8             	MOV	R0,A
 7666:      1E37 7A 00          	MOV	R2,#0
 7667:      1E39 79 58          	MOV	R1,#LOW CONVERT ;CONVERSION LOCATIO
 7668:      1E3B 7B 00          	MOV	R3,#HIGH CONVERT
 7669:      1E3D D1 F7          	ACALL	CONVERT_BINARY_TO_ASCII_STRING
 7670:      1E3F 78 58          	MOV	R0,#LOW CONVERT ;NOW, OUTPUT EXPONE
 7671:                          	;
 7672:      1E41 E2             EXPOT5: MOVX	A,@R0		;GET THE CHARACTER
 7673:      1E42 FD             	MOV	R5,A		;OUTPUT IT
 7674:      1E43 D1 9C          	ACALL	SOUT1
 7675:      1E45 08             	INC	R0		;BUMP THE POINTER
 7676:      1E46 E8             	MOV	A,R0		;GET THE POINTER
 7677:      1E47 B5 01 F7       	CJNE	A,R1B0,EXPOT5	;LOOP
 7678:                          	;
 7679:      1E4A 22             U_RET:	RET			;EXIT
 7680:                          	;
 7681:                          OUTR0:	; Output the characters pointed t
 7682:                          	;
 7683:      1E4B EF             	MOV	A,R7		;GET THE COUNTER
 7684:      1E4C 60 0E          	JZ	OUTR		;EXIT IF DONE
 7685:      1E4E E6             	MOV	A,@R0		;GET THE NUMBER
 7686:      1E4F 44 30          	ORL	A,#30H		;ASCII BIAS
 7687:      1E51 08             	INC	R0		;BUMP POINTER AND COUNTER
 7688:      1E52 1F             	DEC	R7
 7689:      1E53 FD             	MOV	R5,A		;PUT CHARACTER IN OUTPUT REGI
 7690:      1E54 D1 9C          	ACALL	SOUT1		;OUTPUT THE CHARACTER
 7691:      1E56 E4             	CLR	A		;JUST FOR TEST
 7692:      1E57 B8 33 F1       	CJNE	R0,#FP_NIB8+1,OUTR0
 7693:      1E5A 74 55          	MOV	A,#55H		;KNOW WHERE EXIT OCCURED
 7694:                          	;
 7695:      1E5C 22             OUTR:	RET
 7696:                          	;
 7697:      1E5D A9 00          ZTEST:	MOV	R1,R0B0 	;GET POINTER REGISTE
 7698:                          	;
 7699:      1E5F E7             ZT0:	MOV	A,@R1		;GET THE VALUE
 7700:      1E60 70 04          	JNZ	ZT1
 7701:      1E62 09             	INC	R1		;BUMP POINTER
 7702:      1E63 B9 33 F9       	CJNE	R1,#FP_NIB8+1,ZT0
 7703:                          	;
 7704:      1E66 22             ZT1:	RET
 7705:                          	;
 7706:      1E67 EE             NUM_LT: MOV	A,R6		;GET EXPONENT
 7707:      1E68 C3             	CLR	C		;GET READY FOR SUBB
 7708:      1E69 94 80          	SUBB	A,#80H		;SUB EXPONENT BIAS
 7709:      1E6B 50 01          	JNC	NL1		;OK IF NO CARRY
 7710:      1E6D E4             	CLR	A		;NO DIGITS LEFT
 7711:                          	;
 7712:      1E6E FF             NL1:	MOV	R7,A		;SAVE THE COUNT
 7713:      1E6F 22             	RET
 7714:                          	;
 7715:      1E70 C3             NUM_RT: CLR	C		;SUBB AGAIN
 7716:      1E71 74 80          	MOV	A,#80H		;EXPONENT BIAS
 7717:      1E73 9E             	SUBB	A,R6		;GET THE BIASED EXPONENT
 7718:      1E74 50 01          	JNC	NR1

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 140



 Line    I  Addr Code           Source

 7719:      1E76 E4             	CLR	A
 7720:                          	;
 7721:      1E77 22             NR1:	RET			;EXIT
 7722:                          	;
 7723:      1E78 EF             SPACE7: MOV	A,R7		;GET THE NUMBER OF SPA
 7724:      1E79 60 FC          	JZ	NR1		;EXIT IF ZERO
 7725:      1E7B D1 9A          	ACALL	SOUT		;OUTPUT A SPACE
 7726:      1E7D 1F             	DEC	R7		;BUMP COUNTER
 7727:      1E7E 80 F8          	SJMP	SPACE7		;LOOP
 7728:                          	;
 7729:      1E80 FF             Z7R7:	MOV	R7,A
 7730:                          	;
 7731:      1E81 EF             ZERO7:	MOV	A,R7		;GET COUNTER
 7732:      1E82 60 F3          	JZ	NR1		;EXIT IF ZERO
 7733:      1E84 D1 96          	ACALL	ZOUT		;OUTPUT A ZERO
 7734:      1E86 1F             	DEC	R7		;BUMP COUNTER
 7735:      1E87 80 F8          	SJMP	ZERO7		;LOOP
 7736:                          	;
 7737:      1E89 D1 78          SS7:	ACALL	SPACE7
 7738:                          	;
 7739:      1E8B EC             SINOUT: MOV	A,R4		;GET THE SIGN
 7740:      1E8C 60 0C          	JZ	SOUT		;OUTPUT A SPACE IF ZERO
 7741:                          	;
 7742:      1E8E 7D 2D          MOUT:	MOV	R5,#'-'
 7743:      1E90 80 0A          	SJMP	SOUT1		;OUTPUT A MINUS IF NOT
 7744:                          	;
 7745:      1E92 7D 2E          ROUT:	MOV	R5,#'.'         ;OUTPUT A RADI
 7746:      1E94 80 06          	SJMP	SOUT1
 7747:                          	;
 7748:      1E96 7D 30          ZOUT:	MOV	R5,#'0'         ;OUTPUT A ZERO
 7749:      1E98 80 02          	SJMP	SOUT1
 7750:                          	;
 7751:      1E9A 7D 20          SOUT:	MOV	R5,#' '         ;OUTPUT A SPAC
 7752:                          	;
 7753:      1E9C 21 6C          SOUT1:	AJMP	OUTPUT
 7754:                          	;
 7755:                          	;**************************************
 7756:                          	;
 7757:                          CONVERT_ASCII_STRING_TO_BINARY:
 7758:                          	;
 7759:                          	;DPTR POINTS TO ASCII STRING
 7760:                          	;PUT THE BINARY NUMBER IN R2:R0, ERROR 
 7761:                          	;
 7762:                          	;**************************************
 7763:                          	;
 7764:      1E9E 91 89          CASB:	ACALL	HEXSCAN 	;SEE IF HEX NUMBER
 7765:      1EA0 92 23          	MOV	ADD_IN,C	;IF ADD_IN IS SET, THE NUM
 7766:      1EA2 F1 EB          	ACALL	GET_DIGIT_CHECK
 7767:      1EA4 B3             	CPL	C		;FLIP FOR EXIT
 7768:      1EA5 40 28          	JC	RCASB
 7769:      1EA7 7B 00          	MOV	R3,#00H 	;ZERO R3:R1 FOR LOOP
 7770:      1EA9 79 00          	MOV	R1,#00H
 7771:      1EAB 80 15          	SJMP	CASB5
 7772:                          	;
 7773:      1EAD A3             CASB2:	INC	DPTR
 7774:      1EAE 89 00          	MOV	R0B0,R1 	;SAVE THE PRESENT CONVERTE

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 141



 Line    I  Addr Code           Source

 7775:      1EB0 8B 02          	MOV	R2B0,R3 	;IN R2:R0
 7776:      1EB2 F1 EB          	ACALL	GET_DIGIT_CHECK
 7777:      1EB4 40 0C          	JC	CASB5
 7778:      1EB6 30 23 16       	JNB	ADD_IN,RCASB	;CONVERSION COMPLETE
 7779:      1EB9 91 A9          	ACALL	HEX_CHECK	;SEE IF HEX NUMBER
 7780:      1EBB 40 03          	JC	CASB4		;PROCEED IF GOOD
 7781:      1EBD A3             	INC	DPTR		;BUMP PAST H
 7782:      1EBE 80 0F          	SJMP	RCASB
 7783:                          	;
 7784:      1EC0 24 09          CASB4:	ADD	A,#9		;ADJUST HEX ASCII BIAS
 7785:                          	;
 7786:      1EC2 75 F0 0A       CASB5:	MOV	B,#10
 7787:      1EC5 30 23 03       	JNB	ADD_IN,CASB6
 7788:      1EC8 75 F0 10       	MOV	B,#16		;HEX MODE
 7789:                          	;
 7790:      1ECB D1 D6          CASB6:	ACALL	MULNUM		;ACCUMULATE THE DIG
 7791:      1ECD 50 DE          	JNC	CASB2		;LOOP IF NO CARRY
 7792:                          	;
 7793:      1ECF E4             RCASB:	CLR	A		;RESET ACC
 7794:      1ED0 92 E1          	MOV	ACC.OVERFLOW,C	;IF OVERFLOW, SAY SO
 7795:      1ED2 22             	RET			;EXIT
 7796:                          	;
 7797:      1ED3 75 F0 0A       MULNUM10:MOV	B,#10
 7798:                          	;
 7799:                          	;**************************************
 7800:                          	;
 7801:                          MULNUM: ; Take the next digit in the acc
 7802:                          	; accumulate in R3:R1
 7803:                          	;
 7804:                          	;**************************************
 7805:                          	;
 7806:      1ED6 C0 E0          	PUSH	ACC		;SAVE ACC
 7807:      1ED8 C0 F0          	PUSH	B		;SAVE MULTIPLIER
 7808:      1EDA E9             	MOV	A,R1		;PUT LOW ORDER BITS IN ACC
 7809:      1EDB A4             	MUL	AB		;DO THE MULTIPLY
 7810:      1EDC F9             	MOV	R1,A		;PUT THE RESULT BACK
 7811:      1EDD EB             	MOV	A,R3		;GET THE HIGH ORDER BYTE
 7812:      1EDE AB F0          	MOV	R3,B		;SAVE THE OVERFLOW
 7813:      1EE0 D0 F0          	POP	B		;GET THE MULTIPLIER
 7814:      1EE2 A4             	MUL	AB		;DO IT
 7815:      1EE3 A2 D2          	MOV	C,OV		;SAVE OVERFLOW IN F0
 7816:      1EE5 92 D5          	MOV	F0,C
 7817:      1EE7 2B             	ADD	A,R3		;ADD OVERFLOW TO HIGH RESULT
 7818:      1EE8 FB             	MOV	R3,A		;PUT IT BACK
 7819:      1EE9 D0 E0          	POP	ACC		;GET THE ORIGINAL ACC BACK
 7820:      1EEB 72 D5          	ORL	C,F0		;OR CARRY AND OVERFLOW
 7821:      1EED 40 07          	JC	MULX		;NO GOOD IF THE CARRY IS SET
 7822:                          	;
 7823:      1EEF 54 0F          MUL11:	ANL	A,#0FH		;MASK OFF HIGH ORDER 
 7824:      1EF1 29             	ADD	A,R1		;NOW ADD THE ACC
 7825:      1EF2 F9             	MOV	R1,A		;PUT IT BACK
 7826:      1EF3 E4             	CLR	A		;PROPAGATE THE CARRY
 7827:      1EF4 3B             	ADDC	A,R3
 7828:      1EF5 FB             	MOV	R3,A		;PUT IT BACK
 7829:                          	;
 7830:      1EF6 22             MULX:	RET			;EXIT WITH OR WITHOUT CARRY

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 142



 Line    I  Addr Code           Source

 7831:                          	;
 7832:                          CONVERT_BINARY_TO_ASCII_STRING:
 7833:                          ;
 7834:                          ;***************************************
 7835:                          ;****** Elektor 3 Patch ****************
 7836:                          ;****** Performance improvements *******
 7837:                          ;
 7838:                          ;
 7839:                          ;R3:R1 contains the address of the strin
 7840:                          ;R2:R0 contains the value to convert
 7841:                          ;DPTR, R7, R6, and ACC gets clobbered
 7842:                          ;
 7843:                          ;***************************************
 7844:                          ;
 7845:                          ;	CLR	A		;NO LEADING ZEROS
 7846:                          ;	MOV	DPTR,#10000	;SUBTRACT 10000
 7847:                          ;	ACALL	RSUB		;DO THE SUBTRACTION
 7848:                          ;	MOV	DPTR,#1000	;NOW 1000
 7849:                          ;	ACALL	RSUB
 7850:                          ;	MOV	DPTR,#100	;NOW 100
 7851:                          ;	ACALL	RSUB
 7852:                          ;	MOV	DPTR,#10	;NOW 10
 7853:                          ;	ACALL	RSUB
 7854:                          ;	MOV	DPTR,#1 	;NOW 1
 7855:                          ;	ACALL	RSUB
 7856:                          ;	JZ	RSUB2		;JUMP OVER RET
 7857:                          ;
 7858:                          ;RSUB_R:	RET
 7859:                          ;
 7860:                          ;RSUB:	MOV	R6,#-1		;SET UP THE COUNTER
 7861:                          ;
 7862:                          ;RSUB1: INC	R6		;BUMP THE COUNTER
 7863:                          ;	XCH	A,R2		;DO A FAST COMPARE
 7864:                          ;	CJNE	A,DPH,RSUB11
 7865:                          ;RSUB11: XCH	 A,R2
 7866:                          ;	JC	FAST_DONE
 7867:                          ;	XCH	A,R0		;GET LOW BYTE
 7868:                          ;	SUBB	A,DPL		;SUBTRACT, CARRY IS CLEARE
 7869:                          ;	XCH	A,R0		;PUT IT BACK
 7870:                          ;	XCH	A,R2		;GET THE HIGH BYTE
 7871:                          ;	SUBB	A,DPH		;ADD THE HIGH BYTE
 7872:                          ;	XCH	A,R2		;PUT IT BACK
 7873:                          ;	JNC	RSUB1		;LOOP UNTIL CARRY
 7874:                          ;
 7875:                          ;	XCH	A,R0
 7876:                          ;	ADD	A,DPL		;RESTORE R2:R0
 7877:                          ;	XCH	A,R0
 7878:                          ;	XCH	A,R2
 7879:                          ;	ADDC	A,DPH
 7880:                          ;	XCH	A,R2
 7881:                          ;
 7882:                          ;FAST_DONE:
 7883:                          ;
 7884:                          ;	ORL	A,R6		;OR THE COUNT VALUE
 7885:                          ;	JZ	RSUB_R		;RETURN IF ZERO
 7886:                          ;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 143



 Line    I  Addr Code           Source

 7887:                          ;RSUB2: MOV	A,#'0'          ;GET THE ASC
 7888:                          ;	ADD	A,R6		;ADD THE COUNT
 7889:                          ;
 7890:                          ;RSUB4: MOV	P2,R3		;SET UP P2
 7891:                          ;	MOVX	@R1,A		;PLACE THE VALUE IN MEMORY
 7892:                          ;	INC	R1
 7893:                          ;	CJNE	R1,#00H,RSUB3	;SEE IF RAPPED AROU
 7894:                          ;	INC	R3		;BUMP HIGH BYTE
 7895:                          ;
 7896:                          ;RSUB3: RET			;EXIT
 7897:                          ;
 7898:                          ;****** Faster code starts here: *******
 7899:                          ;
 7900:      1EF7 7D 00          	mov	R5,#0
 7901:                          ;
 7902:      1EF9 EA             RSUB1:	mov	A, R2
 7903:      1EFA 75 F0 0A       	mov	B,#0AH
 7904:      1EFD 84             	div	AB
 7905:      1EFE FA             	mov	R2,A
 7906:      1EFF E8             	mov	A,R0
 7907:      1F00 54 F0          	anl	A,#0F0H
 7908:      1F02 45 F0          	orl	A,B
 7909:      1F04 C4             	swap	A
 7910:      1F05 75 F0 0A       	mov	B,#0AH
 7911:      1F08 84             	div	AB
 7912:      1F09 C4             	swap	A
 7913:      1F0A FE             	mov	R6,A
 7914:      1F0B E8             	mov	A,R0
 7915:      1F0C 54 0F          	anl	A,#0FH
 7916:      1F0E C4             	swap	A
 7917:      1F0F 45 F0          	orl	A,B
 7918:      1F11 C4             	swap	A
 7919:      1F12 75 F0 0A       	mov	B,#0AH
 7920:      1F15 84             	div	AB
 7921:      1F16 4E             	orl	A,R6
 7922:      1F17 F8             	mov	R0,A
 7923:      1F18 E5 F0          	mov	A,B
 7924:      1F1A 24 30          	add	A,#30H
 7925:      1F1C 0D             	inc	R5
 7926:      1F1D C0 E0          	push	ACC
 7927:      1F1F EA             	mov	A,R2
 7928:      1F20 48             	orl	A,R0
 7929:      1F21 70 D6          	jnz	RSUB1
 7930:                          ;
 7931:      1F23 D0 E0          RSUB2:	pop	ACC
 7932:      1F25 8B A0          	mov	P2,R3
 7933:      1F27 F3             	movx	@R1,A
 7934:      1F28 09             	inc	R1
 7935:      1F29 B9 00 01       	cjne	R1,#0,RSUB3
 7936:      1F2C 0B             	inc	R3
 7937:                          ;
 7938:      1F2D DD F4          RSUB3:	djnz	R5,RSUB2
 7939:      1F2F 22             	ret
 7940:                          ;
 7941:                          ;****** continue with original code: ***
 7942:                          ;

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 144



 Line    I  Addr Code           Source

 7943:                          	;**************************************
 7944:                          	;
 7945:                          HEXOUT: ; Output the hex number in R3:R1
 7946:                          	;
 7947:                          	;**************************************
 7948:                          	;
 7949:      1F30 D1 9A          	ACALL	SOUT		;OUTPUT A SPACE
 7950:      1F32 A2 36          	MOV	C,ZSURP 	;GET ZERO SUPPRESSION BIT
 7951:      1F34 92 23          	MOV	ADD_IN,C
 7952:      1F36 EB             	MOV	A,R3		;GET HIGH NIBBLE AND PRINT IT
 7953:      1F37 F1 53          	ACALL	HOUTHI
 7954:      1F39 EB             	MOV	A,R3
 7955:      1F3A F1 54          	ACALL	HOUTLO
 7956:                          	;
 7957:      1F3C C2 23          HEX2X:	CLR	ADD_IN		;DON'T SUPPRESS ZEROS
 7958:      1F3E E9             	MOV	A,R1		;GET LOW NIBBLE AND PRINT IT
 7959:      1F3F F1 53          	ACALL	HOUTHI
 7960:      1F41 E9             	MOV	A,R1
 7961:      1F42 F1 54          	ACALL	HOUTLO
 7962:      1F44 7D 48          	MOV	R5,#'H'         ;OUTPUT H TO INDICA
 7963:                          	;
 7964:      1F46 C1 9C          SOUT_1: AJMP	SOUT1
 7965:                          	;
 7966:      1F48 C2 23          HOUT1:	CLR	ADD_IN		;PRINTED SOMETHING, S
 7967:      1F4A 24 90          	ADD	A,#90H		;CONVERT TO ASCII
 7968:      1F4C D4             	DA	A
 7969:      1F4D 34 40          	ADDC	A,#40H
 7970:      1F4F D4             	DA	A		;GOT IT HERE
 7971:      1F50 FD             	MOV	R5,A		;OUTPUT THE BYTE
 7972:      1F51 80 F3          	SJMP	SOUT_1
 7973:                          	;
 7974:      1F53 C4             HOUTHI: SWAP	A		;SWAP TO OUTPUT HIGH NIB
 7975:                          	;
 7976:      1F54 54 0F          HOUTLO: ANL	A,#0FH		;STRIP
 7977:      1F56 70 F0          	JNZ	HOUT1		;PRINT IF NOT ZERO
 7978:      1F58 30 23 ED       	JNB	ADD_IN,HOUT1	;OUTPUT A ZERO IF NOT 
 7979:      1F5B 22             	RET
 7980:                          ;
 7981:                          ;***************************************
 7982:                          ;******* New baudrate detection ********
 7983:                          ;******* calculate r3:r1=-(Timer2 DIV 16
 7984:                          ;******* Wulf 3 alteration 2 ***********
 7985:                          ;
 7986:                          ;-- comment out for AT98LP52 -----------
 7987:                          ;
 7988:                          ;SERCALC:mov	a,#0F0h
 7989:                          ;	mov	r3,a
 7990:                          ;	mov	r1,TH2
 7991:                          ;	anl	a,r1
 7992:                          ;	swap	a
 7993:                          ;	cpl	a
 7994:                          ;	xch	a,r3
 7995:                          ;	anl	a,TL2
 7996:                          ;	xch	a,r1
 7997:                          ;	anl	a,#00Fh
 7998:                          ;	orl	a,r1

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 145



 Line    I  Addr Code           Source

 7999:                          ;	swap	a
 8000:                          ;	cpl	a
 8001:                          ;	mov	r1,ADCON	;save BSY bit
 8002:                          ;	mov	DAPR,#0 	;start A/D for 805xx test
 8003:                          ;	xch	a,r1
 8004:                          ;	ret
 8005:                          ;
 8006:                          ;-- insert for AT98LP52 ----------------
 8007:                          ;TEST_MSG: db	'Speed OK?'
 8008:                          ;	db	00h		; Stop Code
 8009:                          ;-- insert end -------------------------
 8010:                          ;***************************************
 8011:                          ;
 8012:           N      1F78    	ORG	1F78H
 8013:                          	;
 8014:      1F78 20 1A 03       CKS_I:	JB	CKS_B,CS_I
 8015:      1F7B 02 40 1B       	LJMP	401BH
 8016:                          	;
 8017:      1F7E 02 20 88       CS_I:	LJMP	2088H
 8018:                          	;
 8019:      1F81 4E 4F 20 44    E14X:	DB	'NO DATA"'
            1F85 41 54 41 22
 8020:                          	;
 8021:      1F89 94             E11X:	DB	128+20
 8022:      1F8A 41 52 49 54    	DB	'ARITH. OVERFLOW"'
            1F8E 48 2E 20 4F
            1F92 56 45 52 46
            1F96 4C 4F 57 22
 8023:                          	;
 8024:      1F9A 50 52 4F 47    E16X:	DB	'PROGRAMMING"'
            1F9E 52 41 4D 4D
            1FA2 49 4E 47 22
 8025:                          	;
 8026:      1FA6 43 41 4E       E15X:	DB	'CAN'
 8027:      1FA9 27             	DB	27H
 8028:      1FAA 54 20 43 4F    	DB	'T CONTINUE"'
            1FAE 4E 54 49 4E
            1FB2 55 45 22
 8029:                          	;
 8030:      1FB5 49 4E 56 41    E10X:	DB	'INVALID LINE NUMBER"'
            1FB9 4C 49 44 20
            1FBD 4C 49 4E 45
            1FC1 20 4E 55 4D
            1FC5 42 45 52 22
 8031:                          	;
 8032:      1FC9 50 52 4F 4D    NOROM:	DB	'PROM MODE"'
            1FCD 20 4D 4F 44
            1FD1 45 22
 8033:                          	;
 8034:                          ;***************************************
 8035:                          ;****** Set a new version message ******
 8036:                          ;
 8037:                          ;S_N:	DB	'*MCS-51(tm) BASIC V1.1*'
 8038:                          ;
 8039:      1FD3 2A 4D 43 53    S_N:	DB	'*MCS-BASIC-52 V1.31*"'
            1FD7 2D 42 41 53

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 146



 Line    I  Addr Code           Source

            1FDB 49 43 2D 35
            1FDF 32 20 56 31
            1FE3 2E 33 31 2A
            1FE7 22
 8040:                          ;
 8041:                          ;***************************************
 8042:                          ;
 8043:           N      1FEB    	ORG	1FEBH		;FOR LINK COMPATABILITY
 8044:                          	;
 8045:                          GET_DIGIT_CHECK:	; Get a character, then
 8046:                          	;
 8047:      1FEB B1 5F          	ACALL	GET_DPTR_CHARACTER
 8048:                          	;
 8049:                          DIGIT_CHECK:	;CHECK FOR A VALID ASCII DI
 8050:                          	;
 8051:      1FED B4 3A 00       	CJNE	A,#'9'+1,DC10   ;SEE IF ASCII 9 OR
 8052:      1FF0 40 01          DC10:	JC	DC1
 8053:      1FF2 22             	RET
 8054:                          	;
 8055:      1FF3 B4 30 00       DC1:	CJNE	A,#'0',DC11     ;SEE IF ASCII 
 8056:      1FF6 B3             DC11:	CPL	C
 8057:      1FF7 22             	RET
 8058:                          	;
 8059:           N      1FF8    	ORG	1FF8H
 8060:                          	;
 8061:      1FF8 45 52 52 4F    ERS:	DB	'ERROR: "'
            1FFC 52 3A 20 22
 8062:                          	;
 8063:                          	;**************************************
 8064:                          	;
 8065:                          	XSEG	;External Ram
 8066:                          	;
 8067:                          	;**************************************
 8068:                          	;
 8069:      0000 N      0004    	DS	4
 8070:      0004 N      0001    IBCNT:	DS	1		;LENGTH OF A LINE
 8071:      0005 N      0002    IBLN:	DS	2		;THE LINE NUMBER
 8072:      0007 N      0049    IBUF:	DS	LINLEN		;THE INPUT BUFFER
 8073:      0050 N      000F    CONVT:	DS	15		;CONVERSION LOCATION FOR F
 8074:                          	;
 8075:           N      0100    	ORG	100H
 8076:                          	;
 8077:      0100 N      0001    GTB:	DS	1		;GET LOCATION
 8078:      0101 N      0001    ERRLOC: DS	1		;ERROR TYPE
 8079:      0102 N      0002    ERRNUM: DS	2		;WHERE TO GO ON AN ERROR
 8080:      0104 N      0002    VARTOP: DS	2		;TOP OF VARIABLE STORAGE
 8081:      0106 N      0002    ST_ALL: DS	2		;STORAGE ALLOCATION
 8082:      0108 N      0002    MT_ALL: DS	2		;MATRIX ALLOCATION
 8083:      010A N      0002    MEMTOP: DS	2		;TOP OF MEMORY
 8084:      010C N      0002    RCELL:	DS	2		;RANDOM NUMBER CELL
 8085:      010E N      0005    	DS	FPSIZ-1
 8086:      0113 N      0001    CXTAL:	DS	1		;CRYSTAL
 8087:      0114 N      0005    	DS	FPSIZ-1
 8088:      0119 N      0001    FPT1:	DS	1		;FLOATINP POINT TEMP 1
 8089:      011A N      0005    	DS	FPSIZ-1
 8090:      011F N      0001    FPT2:	DS	1		;FLOATING POINT TEMP 2

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 147



 Line    I  Addr Code           Source

 8091:      0120 N      0002    INTLOC: DS	2		;LOCATION TO GO TO ON INTE
 8092:      0122 N      0002    STR_AL: DS	2		;STRING ALLOCATION
 8093:      0124 N      0002    SPV:	DS	2		;SERIAL PORT BAUD RATE
 8094:      0126 N      0002    TIV:	DS	2		;TIMER INTERRUPT NUM AND LOC
 8095:      0128 N      0002    PROGS:	DS	2		;PROGRAM A PROM TIME OUT
 8096:                          ;
 8097:                          ;***************************************
 8098:                          ;****** Disable Intel programming for to
 8099:                          ;****** We don't need this, but don't re
 8100:                          ;
 8101:      012A N      0002    IPROGS: DS	2		;INTELLIGENT PROM PROGRAMM
 8102:                          ;
 8103:                          ;***************************************
 8104:                          ;
 8105:      012C N      0001    TM_TOP: DS	1
 8106:                          ;
 8107:                          ; ---- BASIC-52 Mainroutine End ----
 8108:                          
 8109:                          	CSEG	; Directive is used to select the 
 8110:                          
 8111:                          ;***************************************
 8112:                          ;*                        BASIC-52 V1.31
 8113:                          ;*          The following code enhanced 
 8114:                          ;*               for I2C communicatin an
 8115:                          ;*--------------------------------------
 8116:                          ;* (C) H.-J. Boehling & D. Wulf 14.11.01
 8117:                          ;*     http://home.arcor.de/h.boehling  
 8118:                          ;*     H-Boehling@gmx.de                
 8119:                          ;***************************************
 8120:                          ;* Re-write all I2C routine 2023.06.18
 8121:                          ;***************************************
 8122:                          ;* Four new I2C communication commands a
 8123:                          ;*
 8124:                          ;* The syntax to use is:
 8125:                          ;*
 8126:                          ;*     I2CSTART           Sends a start 
 8127:                          ;*
 8128:                          ;*     I2CSTOP            Sends a stop c
 8129:                          ;*
 8130:                          ;*     I2CPUT [byte]      Sends a byte t
 8131:                          ;*                        After calling,
 8132:                          ;*                        entered in sta
 8133:                          ;*
 8134:                          ;*     I2CGET   ([acknowledge]) [variabl
 8135:                          ;*                        Reads a byte f
 8136:                          ;*                        acknowledge (0
 8137:                          ;*
 8138:                          ;*--------------------------------------
 8139:                          ;*
 8140:                          ;* Two new commands to read from or writ
 8141:                          ;*
 8142:                          ;*     WRSFR ([address]) [byte]      Wri
 8143:                          ;*
 8144:                          ;*     RDSFR ([address]) [variable]  Rea
 8145:                          ;*
 8146:                          ;* [address] is the address of the SFR a

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 148



 Line    I  Addr Code           Source

 8147:                          ;* 128 (080H) and 255 (0FFH).
 8148:                          ;*
 8149:                          ;***************************************
 8150:                          
 8151:                          ;----- Definitions ---------------------
 8152:                          ; === CH559L ===
 8153:                          ;SDA		bit	P1.6                    ;I2C s
 8154:                          ;SCL		bit	P1.5                    ;I2C s
 8155:           B        96    SDA		bit	P1.6                    ;I2C se
 8156:           B        97    SCL		bit	P1.7                    ;I2C se
 8157:                          ; == CH559L end ===
 8158:                          
 8159:           N      0018    status		equ	018H			;Communication status
 8160:                          
 8161:                          ;temp1		equ	11			;Temp. storage. ; *** a
 8162:                          
 8163:                          ;xbit		bit	45			;Command extension prese
 8164:                           
 8165:                          ; the following bits will be set in the 
 8166:                          
 8167:                          ;tout		equ	00000010B		;I2C time out stat
 8168:                          ;busy		equ	00000100B		;I2C bus busy stat
 8169:                          ;nack		equ	00001000B		;Slave sends no ac
 8170:                          
 8171:                          ; --- SPI command ---
 8172:                          ; CH552/CH559 sfrs
 8173:           N      0092    P1_MOD_OC	EQU	092H	; CH552
 8174:           N      0093    P1_DIR_PU	EQU	093H	; CH552
 8175:           N      00C6    PORT_CFG	EQU	0C6H	; CH559
 8176:           N      00BA    P1_DIR		EQU	0BAH	; CH559
 8177:           N      00BB    P1_PU		EQU	0BBH	; CH559
 8178:           N      00F8    SPI0_STAT	EQU	0F8H	; CH552/CH559
 8179:           N      00F9    SPI0_DATA	EQU	0F9H	; CH552/CH559
 8180:           N      00FA    SPI0_CTRL	EQU	0FAH	; CH552/CH559
 8181:           N      00FB    SPI0_CK_SE	EQU	0FBH	; CH552/CH559
 8182:           N      00FC    SPI0_SETUP	EQU	0FCH	; CH552/CH559
 8183:                          
 8184:           N      00FB    S0_FREE		EQU	0FBH
 8185:                          
 8186:           B        94    SCS		BIT	P1.4	; CH552/CH559 CS(SS)
 8187:           B        95    MOSI	BIT	P1.5	; CH552/CH559
 8188:           B        96    MISO	BIT	P1.6	; CH552/CH559
 8189:           B        97    SCK		BIT P1.7	; CH552/CH559
 8190:                          ; --- SPI command end ---
 8191:                          
 8192:                          ;--- ADC command ---
 8193:           N      00B9    P1_IE		equ	0B9H	; port 1 input enable, 0
 8194:           N      00EF    ADC_CK_SE	equ	0EFH	; ADC clock divisor s
 8195:           N      00F1    ADC_STAT	equ	0F1H	; ADC status
 8196:           N      00F2    ADC_CTRL	equ	0F2H	; ADC control
 8197:           N      00F3    ADC_CHANN	equ	0F3H	; ADC channel seletio
 8198:           N      00F4    ADC_FIFO_L	equ	0F4H	; ReadOnly: FIFO low
 8199:           N      00F5    ADC_FIFO_H	equ	0F5H	; ReadOnly: FIFO hig
 8200:           N      00F6    ADC_SETUP	equ	0F6H	; ADC setup
 8201:           N      00F7    ADC_EX_SW	equ	0F7H	; ADC extend switch c
 8202:                          

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 149



 Line    I  Addr Code           Source

 8203:           N      0010    bADC_IF_ACT		equ	010H	; interrupt flag f
 8204:           N      0080    bADC_SAMPLE		equ	080H	; automatic or man
 8205:           N      0004    bADC_POWER_EN	equ	004H	; control ADC pow
 8206:           N      0004    bADC_RESOLUTION	equ	004H	; ADC resolutio
 8207:                          
 8208:                          ; --- ADC command end ---
 8209:                          
 8210:                          ;---------------------------------------
 8211:                          ; The following code is necessary to not
 8212:                          
 8213:           N      2002    		org	2002H			;5Ah at 2002h tells BASIC-
 8214:      2002 5A             		db	5AH			;to call 2048h (see below).
 8215:           N      2048    		org	2048H			;Set bit 45 to tell BASIC-
 8216:                          						;that custom commands or
 8217:      2048 D2 2D          		setb	xbit			;instructions have been
 8218:      204A 22             		ret				;added.
 8219:           N      2070    		org	2070H			;Store starting address of
 8220:      2070 90 24 00       		mov	dptr,#vectortable	;vector table.
 8221:      2073 22             		ret
 8222:           N      2078    		org	2078H			;Store starting address of
 8223:      2078 90 24 1E       		mov	dptr,#tokentable	;token table.
 8224:      207B 22             		ret
 8225:                          
 8226:                          ; The old code for BASIC-52 V1.3 overwri
 8227:                          ; used for a user reset routine! So the 
 8228:                          
 8229:                          ;===== Here starts the code for the new 
 8230:                          
 8231:           N      2400    		org	2400h			;use any available address
 8232:                          
 8233:                          vectortable:					;Vector table starts he
 8234:                          						;Label to branch on:
 8235:      2400 25 C8          		dw	i2cstart		;I2CSTART command
 8236:      2402 25 E0          		dw	i2cstop			;I2CSTOP command
 8237:      2404 25 E9          		dw	i2cput			;I2CPUT command
 8238:      2406 26 20          		dw	i2cget			;I2CGET command
 8239:      2408 27 CC          		dw	wrsfr			;WRSFR command
 8240:      240A 27 A4          		dw	rdsfr			;RDSFR command
 8241:                          
 8242:                          ; --- SPI command ---
 8243:      240C 24 9D          		dw	spistart		; SPISTART command
 8244:      240E 24 CC          		dw	spiput			; SPIPUT command
 8245:      2410 24 EE          		dw	spiget			; SPIGET command
 8246:      2412 25 03          		dw	SPIROT			; SPIROT command
 8247:      2414 25 30          		dw	spics			; SPICS command
 8248:                          ; --- SPI command end ---
 8249:                          
 8250:                          ; --- ADC command ---
 8251:      2416 26 A4          		dw	adcstart		; ADCSTART command
 8252:      2418 26 F7          		dw	adcget			; ADCGET command
 8253:      241A 26 EE          		dw	adcstop			; ADCSTOP command
 8254:                          ; --- ADC command end ---
 8255:                          
 8256:                          ; --- PULSE command ---
 8257:      241C 27 48          		dw	pulse			; PULSE command
 8258:                          ; --- PULSE command end ---

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 150



 Line    I  Addr Code           Source

 8259:                          
 8260:                          tokentable:					;Token table starts here
 8261:      241E 10             		db	10H			;1. user defined token for
 8262:      241F 49 32 43 53    		db	'I2CSTART'	;command name.
            2423 54 41 52 54
 8263:      2427 00             		db	0			;End of token indicator
 8264:      2428 11             		db	11H			;2.
 8265:      2429 49 32 43 53    		db	'I2CSTOP'
            242D 54 4F 50
 8266:      2430 00             		db	0
 8267:      2431 12             		db	12H			;3.
 8268:      2432 49 32 43 50    		db	'I2CPUT'
            2436 55 54
 8269:      2438 00             		db	0
 8270:      2439 13             		db	13H			;4.
 8271:      243A 49 32 43 47    		db	'I2CGET'
            243E 45 54
 8272:      2440 00             		db	0
 8273:      2441 14             		db	14H			;5.
 8274:      2442 57 52 53 46    		db	'WRSFR'
            2446 52
 8275:      2447 00             		db	0
 8276:      2448 15             		db	15H			;6.
 8277:      2449 52 44 53 46    		db	'RDSFR'
            244D 52
 8278:      244E 00             		db	0
 8279:                          
 8280:                          ; --- SPI command ---
 8281:      244F 16             		db	16H			;7.
 8282:      2450 53 50 49 53    		db	'SPISTART'	; commaand name
            2454 54 41 52 54
 8283:      2458 00             		db	0			; end of token
 8284:      2459 17             		db	17H			;8.
 8285:      245A 53 50 49 50    		db	'SPIPUT'
            245E 55 54
 8286:      2460 00             		db	0
 8287:      2461 18             		db	18H			;9.
 8288:      2462 53 50 49 47    		db	'SPIGET'
            2466 45 54
 8289:      2468 00             		db	0
 8290:      2469 19             		db	19H			;10.
 8291:      246A 53 50 49 52    		db	'SPIROT'
            246E 4F 54
 8292:      2470 00             		db	0
 8293:      2471 1A             		db	1AH			;11.
 8294:      2472 53 50 49 43    		db	'SPICS'
            2476 53
 8295:      2477 00             		db	0
 8296:                          ; --- SPI command end ---
 8297:                          
 8298:                          ; --- ADC command ---
 8299:      2478 1B             		db	1BH			;12.
 8300:      2479 41 44 43 53    		db	'ADCSTART'	; commaand name
            247D 54 41 52 54
 8301:      2481 00             		db	0			; end of token
 8302:      2482 1C             		db	1CH			;13.

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 151



 Line    I  Addr Code           Source

 8303:      2483 41 44 43 47    		db	'ADCGET'
            2487 45 54
 8304:      2489 00             		db	0
 8305:      248A 1D             		db	1DH			;14.
 8306:      248B 41 44 43 53    		db	'ADCSTOP'
            248F 54 4F 50
 8307:      2492 00             		db	0
 8308:                          ; --- ADC command end ---
 8309:                          
 8310:                          ; --- PULSE command ---
 8311:      2493 1E             		db	1EH			;15.
 8312:      2494 50 55 4C 53    		db	'PULSE'		; commaand name
            2498 45
 8313:      2499 00             		db	0			; end of token
 8314:                          ; --- PULSE command end ---
 8315:                          
 8316:                          ;----- The following is necessary to get
 8317:                          
 8318:      249A DF             		db	0DFH			;Dummy token.
 8319:      249B 7F             		db	07FH			;Unused dummy char.
 8320:                          
 8321:                          ;---------------------------------------
 8322:                          
 8323:      249C FF             		db	0FFH			;End of tokenlist indicator.
 8324:                          
 8325:                          ;---------------------------------------
 8326:                          ;
 8327:                          ; === SPI command processer ============
 8328:                          ;
 8329:                          ; SPISTART [speed] 
 8330:      249D 74 39          SPISTART:	mov	A,#39H		; get argument "sp
 8331:      249F 12 00 30       		lcall	30H			;
 8332:      24A2 74 01          		mov	A,#1			;
 8333:      24A4 12 00 30       		lcall	30H			; to R3:R1
 8334:      24A7 BB 00 17       		cjne	R3,#0,SpiSERR	;If R3 <> 0  or
 8335:      24AA B9 20 00       		cjne	R1,#32,SpiS00	;If R1 < 32
 8336:      24AD 40 12          SpiS00:	jc		SpiSERR			;  goto error rout
 8337:      24AF E9             		mov		A,R1		; Load speed
 8338:                          
 8339:                          ;	setup SPI interface
 8340:      24B0 75 C6 2D       		mov	PORT_CFG,#00101101B		; P1 driver c
 8341:      24B3 43 BA B0       		orl	P1_DIR,#10110000B		; SCK,MOSI,SCS 
 8342:      24B6 75 FC 00       		mov	SPI0_SETUP,#00000000B	; SPI master
 8343:      24B9 75 FA 68       		mov	SPI0_CTRL,#01101000B	; MOSI,SCK ou
 8344:      24BC F5 FB          		mov	SPI0_CK_SE,A			; set system-clock 
 8345:                          
 8346:      24BE D2 94          		setb	SCS			; SCS High
 8347:                          
 8348:      24C0 22             		ret					;Return to BASIC.
 8349:                          
 8350:      24C1 74 07          SpiSERR:	mov	A,#7		;Send CR/LF
 8351:      24C3 12 00 30       		lcall	30H
 8352:      24C6 7B 25          		mov	R3,#high spiemsg1	;Set string addr
 8353:      24C8 79 5B          		mov	R1,#low  spiemsg1
 8354:      24CA A1 50          		ajmp	SPIERROR
 8355:                          

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 152



 Line    I  Addr Code           Source

 8356:                          ;---------------------------------------
 8357:                          ; SPIPUT   [byte] 
 8358:      24CC 74 39          SPIPUT:		mov	A,#39H		; get argument "byt
 8359:      24CE 12 00 30       		lcall	30H			;
 8360:      24D1 74 01          		mov	A,#1			;
 8361:      24D3 12 00 30       		lcall	30H			; to R3:R1
 8362:      24D6 BB 00 0A       		cjne	R3,#0,SpiPERR	;If R3 not zero
 8363:      24D9 E9             		mov	A,R1			; Load byte to send.
 8364:                          
 8365:                          ;	send data to SPI 
 8366:      24DA F5 F9          		mov	SPI0_DATA,A		; Send data
 8367:      24DC 30 FB FD       SpiP00: jnb	S0_FREE,SpiP00	; Wait for tr
 8368:      24DF 85 F9 18       		mov	status,SPI0_DATA	; save Receive da
 8369:                          
 8370:      24E2 22             		ret					;Return to BASIC.
 8371:                          
 8372:      24E3 74 07          SpiPERR:	mov	A,#7		;Send CR/LF
 8373:      24E5 12 00 30       		lcall	30H
 8374:      24E8 7B 25          		mov	R3,#high spiemsg2	;Set string addr
 8375:      24EA 79 78          		mov	R1,#low  spiemsg2
 8376:      24EC 80 62          		sjmp	SPIERROR
 8377:                          
 8378:                          ;---------------------------------------
 8379:                          ; SPIGET   [variable]
 8380:      24EE 75 F9 00       SPIGET:	mov	SPI0_DATA,#00H	; Dummy trans
 8381:      24F1 30 FB FD       SpiG00: jnb	S0_FREE,SpiG00	; Wait for tr
 8382:      24F4 E5 F9          		mov	a,SPI0_DATA		; Receive data
 8383:                          
 8384:      24F6 F8             		mov	R0,A			; set receive data to R0
 8385:      24F7 7A 00          		mov	R2,#0			; set 0 to R2
 8386:      24F9 74 9A          		mov	A,#9AH			; Put R2:R0 on argument s
 8387:      24FB 12 00 30       		lcall	30H			;
 8388:                          
 8389:      24FE 74 43          		mov	A,#43H			; Set next variable to va
 8390:      2500 02 00 30       		ljmp	30H			; on argument stack and ret
 8391:                          
 8392:                          ;---------------------------------------
 8393:                          ; SPIROT  ([byte]) [variable] 
 8394:      2503 74 39          SPIROT:	mov	A,#39H		; get argument "byte
 8395:      2505 12 00 30       		lcall	30H			;
 8396:      2508 74 01          		mov	A,#1			;
 8397:      250A 12 00 30       		lcall	30H			; to R3:R1
 8398:      250D BB 00 15       		cjne	R3,#0,SpiROERR	;If R3 not zero
 8399:      2510 E9             		mov	A,R1			; Load byte to send.
 8400:                          
 8401:                          ;	send & receive data to/from SPI
 8402:      2511 F5 F9          		mov	SPI0_DATA,A		; Send data
 8403:      2513 30 FB FD       SpiRO0: jnb	S0_FREE,SpiRO0	; Wait for tr
 8404:      2516 E5 F9          		mov	a,SPI0_DATA		; Receive data
 8405:                          
 8406:      2518 F8             		mov	R0,A			; set receive data to R0
 8407:      2519 7A 00          		mov	R2,#0			; set 0 to R2
 8408:      251B 74 9A          		mov	A,#9AH			; Put R2:R0 on argument s
 8409:      251D 12 00 30       		lcall	30H			;
 8410:                          
 8411:      2520 74 43          		mov	A,#43H			; Set next variable to va

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 153



 Line    I  Addr Code           Source

 8412:      2522 02 00 30       		ljmp	30H			; on argument stack and ret
 8413:                          
 8414:      2525 74 07          SpiROERR:	mov	A,#7		;Send CR/LF
 8415:      2527 12 00 30       		lcall	30H
 8416:      252A 7B 25          		mov	R3,#high spiemsg3	;Set string addr
 8417:      252C 79 93          		mov	R1,#low  spiemsg3
 8418:      252E 80 20          		sjmp	SPIERROR
 8419:                          
 8420:                          ;---------------------------------------
 8421:                          ; SPICS [0/1]
 8422:      2530 74 39          SPICS:	mov	A,#39H			; get argument "0/1"
 8423:      2532 12 00 30       		lcall	30H			;
 8424:      2535 74 01          		mov	A,#1			;
 8425:      2537 12 00 30       		lcall	30H			; to R3:R1
 8426:                          
 8427:      253A E9             		mov	A,R1			; Load "0/1"
 8428:      253B B4 01 03       		cjne	A,#1,SpiC00	; If R1 = 1 ?
 8429:                          ;		orl		P1,#00010000B	; SCS High
 8430:      253E D2 94          		setb	SCS				; SCS High
 8431:      2540 22             		ret
 8432:                          
 8433:      2541 B4 00 03       SpiC00:	cjne	A,#0,SpiCERR	; If R1 = 0 ?
 8434:                          ;		anl		P1,#11101111B	; SCS Low
 8435:      2544 C2 94          		clr		SCS				; SCS Low
 8436:      2546 22             		ret
 8437:                          
 8438:      2547 74 07          SpiCERR:	mov	A,#7		;Send CR/LF
 8439:      2549 12 00 30       		lcall	30H
 8440:      254C 7B 25          		mov	R3,#high spiemsg4	;Set string addr
 8441:      254E 79 AE          		mov	R1,#low  spiemsg4
 8442:                          
 8443:                          ;---------------------------------------
 8444:      2550 D2 34          SPIERROR:	setb	34H		;Read string from co
 8445:      2552 74 06          		mov	A,#6			;Send String to
 8446:      2554 12 00 30       		lcall	30H			;terminal.
 8447:      2557 E4             		clr	A
 8448:      2558 02 00 30       		ljmp	30H			;Back to command mode.
 8449:                          
 8450:      255B 45 52 52 4F    spiemsg1:	db	'ERROR: BAD SPISTART ARGUMENT'
            255F 52 3A 20 42
            2563 41 44 20 53
            2567 50 49 53 54
            256B 41 52 54 20
            256F 41 52 47 55
            2573 4D 45 4E 54
 8451:      2577 22             		db		22H			;End of text.
 8452:                          
 8453:      2578 45 52 52 4F    spiemsg2:	db	'ERROR: BAD SPIPUT ARGUMENT'
            257C 52 3A 20 42
            2580 41 44 20 53
            2584 50 49 50 55
            2588 54 20 41 52
            258C 47 55 4D 45
            2590 4E 54
 8454:      2592 22             		db		22H			;End of text.
 8455:                          

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 154



 Line    I  Addr Code           Source

 8456:      2593 45 52 52 4F    spiemsg3:	db	'ERROR: BAD SPIROT ARGUMENT'
            2597 52 3A 20 42
            259B 41 44 20 53
            259F 50 49 52 4F
            25A3 54 20 41 52
            25A7 47 55 4D 45
            25AB 4E 54
 8457:      25AD 22             		db		22H			;End of text.
 8458:                          
 8459:      25AE 45 52 52 4F    spiemsg4:	db	'ERROR: BAD SPICS ARGUMENT'
            25B2 52 3A 20 42
            25B6 41 44 20 53
            25BA 50 49 43 53
            25BE 20 41 52 47
            25C2 55 4D 45 4E
            25C6 54
 8460:      25C7 22             		db		22H			;End of text.
 8461:                          
 8462:                          ; === SPI command processer end ========
 8463:                          
 8464:                          
 8465:                          ; === Software I2C command processer ===
 8466:                          ; Re-write all I2C routine 2023.06.18
 8467:                          
 8468:                          ;---------------------------------------
 8469:                          ; I2CSTATRT
 8470:                          
 8471:                          i2cstart:
 8472:                          
 8473:                          ;	setup CH559L I2C port
 8474:      25C8 75 C6 0F       		mov	PORT_CFG,#00001111B		; Set defalt,
 8475:      25CB 53 BA 3F       		anl	P1_DIR,#00111111B		; Set P1 port, 
 8476:      25CE 53 BB 3F       		anl	P1_PU,#00111111B		; Set P1 port, S
 8477:                          
 8478:      25D1 D2 96          		setb	sda	
 8479:      25D3 D2 97          		setb	scl
 8480:      25D5 D1 69          		acall	delay
 8481:      25D7 C2 96          		clr		sda			; set start condition
 8482:      25D9 D1 69          		acall	delay
 8483:      25DB C2 97          		clr		scl
 8484:      25DD D1 69          		acall	delay
 8485:                          
 8486:      25DF 22             		ret					; return to basic
 8487:                          
 8488:                          ;---------------------------------------
 8489:                          ; I2CSTOP
 8490:                          
 8491:                          i2cstop:
 8492:                          
 8493:      25E0 D2 97          		setb	scl
 8494:      25E2 D1 69          		acall	delay
 8495:      25E4 D2 96          		setb	sda			; set stop condition
 8496:      25E6 D1 69          		acall	delay
 8497:                          
 8498:      25E8 22             		ret					;Return to BASIC.
 8499:                          

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 155



 Line    I  Addr Code           Source

 8500:                          ;---------------------------------------
 8501:                          ; I2CPUT [byte]
 8502:                          
 8503:                          i2cput:
 8504:                          
 8505:                          ;----- Get value and test for 8 bit only
 8506:      25E9 74 39          		mov		A,#39H		;Put value to send on
 8507:      25EB 12 00 30       		lcall	30H			;argument stack.
 8508:      25EE 74 01          		mov		A,#1		;change value to 16 bit
 8509:      25F0 12 00 30       		lcall	30H			;integer and write to R3:R
 8510:      25F3 BB 00 78       		cjne	R3,#0,i2cerror	;If R3 not zero, t
 8511:                          
 8512:                          ;----- Send byte to I2C bus -------- ---
 8513:      25F6 E9             		mov		A,R1		;Load byte to send.
 8514:      25F7 7E 08          		mov		R6,#8		;Load bit counter
 8515:                          
 8516:      25F9 33             send:	rlc		A			;Rotate data bit to C.
 8517:      25FA 92 96          		mov		SDA,C		;Put data bit on pin.
 8518:      25FC D2 97          		setb	scl			;Send clock.
 8519:      25FE D1 69          		acall	delay		;Delay
 8520:      2600 C2 97          		clr		scl
 8521:      2602 D1 69          		acall	delay
 8522:      2604 DE F3          		djnz	R6,send		;Repeat until all bits s
 8523:                          
 8524:                          ;----- Read acknowledge from slave -----
 8525:      2606 75 18 00       		mov		status,#0	; clear error code
 8526:      2609 D2 96          		setb	sda			; pull-up for read
 8527:      260B 00             		nop
 8528:      260C 00             		nop
 8529:      260D D2 97          		setb	scl
 8530:      260F D1 69          		acall	delay
 8531:      2611 30 96 03       		jnb		SDA,ackok	;Check for valid acknow
 8532:      2614 75 18 01       		mov		status,#1	;Set error code.
 8533:                          
 8534:      2617 C2 97          ackok:	clr		scl
 8535:      2619 00             		nop
 8536:      261A 00             		nop
 8537:      261B C2 96          		clr		sda
 8538:      261D D1 69          		acall	delay
 8539:                          
 8540:      261F 22             		ret					;Return to BASIC.
 8541:                          
 8542:                          ;---------------------------------------
 8543:                          ; I2CGET ([acknowledge]) [variable]
 8544:                          
 8545:                          i2cget:
 8546:                          
 8547:                          ;----- Get acknowledge and check 0/1 ---
 8548:      2620 74 39          		mov		A,#39H		; get argument acknowledg
 8549:      2622 12 00 30       		lcall	30H			;
 8550:      2625 74 01          		mov		A,#1		;
 8551:      2627 12 00 30       		lcall	30H			; to R3:R1
 8552:                          
 8553:      262A BB 00 41       		cjne	r3,#0,i2cerror	; If R3 not zero, 
 8554:      262D B9 01 02       		cjne	r1,#1,i2cg00	; If R1 = 1 ?
 8555:      2630 80 03          		sjmp	i2cg01

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 156



 Line    I  Addr Code           Source

 8556:      2632 B9 00 39       i2cg00:	cjne	r1,#0,i2cerror	; If R1 = 0 
 8557:                          
 8558:                          ;----- Receive byte from slave ---------
 8559:      2635 D2 96          i2cg01:	setb	sda			; pull-up for read
 8560:      2637 7E 08          		mov		R6,#8		; Load bit counter
 8561:      2639 E4             		clr		a			; clear acc
 8562:                          
 8563:      263A D1 69          read:	acall	delay
 8564:      263C D2 97          		setb	scl
 8565:      263E D1 69          	   	acall	delay
 8566:      2640 A2 96          		mov		C,SDA		;Get data bit from pin.
 8567:      2642 33             		rlc		A			;Rotate bit into result byte.
 8568:      2643 C2 97          		clr		scl
 8569:      2645 DE F3          		djnz	R6,read		;Repeat until all receiv
 8570:                          
 8571:      2647 F8             		mov		R0,A		;Load R0 with received byte
 8572:                          
 8573:                          ;----- Send acknowledge to slave -------
 8574:      2648 D1 69          		acall	delay
 8575:      264A E9             		mov		A,r1		; Load acknowledge
 8576:      264B 13             		rrc		A			;into C and
 8577:      264C 92 96          		mov		SDA,C		;send acknowledge bit.
 8578:      264E 00             		nop
 8579:      264F 00             		nop
 8580:      2650 D2 97          		setb	scl	        ;Send acknowledge clo
 8581:      2652 D1 69          		acall	delay
 8582:      2654 C2 97          		clr		scl
 8583:      2656 00             		nop
 8584:      2657 00             		nop
 8585:      2658 C2 96          		clr		sda
 8586:      265A D1 69          		acall	delay
 8587:                          
 8588:                          ;----- Put received byte on argument sta
 8589:                          ;		mov		R0,A		;Load R0 with reseived byt
 8590:      265C 7A 00          		mov		R2,#0		;Set high byte to zero.
 8591:      265E 74 9A          		mov		A,#9AH		;Put byte on argument sta
 8592:      2660 12 00 30       		lcall	30H			;with BASIC funktion.
 8593:                          
 8594:                          ;----- Set variable to received byte ---
 8595:      2663 74 43          		mov		A,#43H		;Set next variable to val
 8596:      2665 02 00 30       		ljmp	30H			;on argument stack and
 8597:                          							;return to BASIC.
 8598:                          
 8599:                          ;----- delay about 2.5uS ---------------
 8600:           N      2669    		org		$/2*2+1		; set odd address locati
 8601:                          
 8602:      2669 7F 12          delay:	mov		r7,#18		; loop count at Fsys
 8603:      266B DF FE          delay1:	djnz	r7,delay1	; ! place this in
 8604:      266D 22             		ret
 8605:                          
 8606:                          ;----- error - sends an error message --
 8607:                          
 8608:      266E 74 07          i2cerror:	mov	A,#7		;Send CR/LF
 8609:      2670 12 00 30       		lcall	30H
 8610:      2673 7B 26          		mov	R3,#high i2cerrmsg	;Set string add
 8611:      2675 79 82          		mov	R1,#low i2cerrmsg

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 157



 Line    I  Addr Code           Source

 8612:                          
 8613:      2677 D2 34          		setb	34H			;Read string from code memo
 8614:      2679 74 06          		mov		A,#6		;Send String to
 8615:      267B 12 00 30       		lcall	30H			;terminal.
 8616:      267E E4             		clr		A
 8617:      267F 02 00 30       		ljmp	30H			;Back to command mode.
 8618:                          
 8619:                          i2cerrmsg:
 8620:      2682 45 52 52 4F    		db		'ERROR: BAD I2CPUT/I2CGET ARGUMENT'
            2686 52 3A 20 42
            268A 41 44 20 49
            268E 32 43 50 55
            2692 54 2F 49 32
            2696 43 47 45 54
            269A 20 41 52 47
            269E 55 4D 45 4E
            26A2 54
 8621:      26A3 22             		db		22H			;End of text.  	
 8622:                          
 8623:                          ; === Software I2C command processer end
 8624:                          
 8625:                          ;
 8626:                          ; === ADC command processer ============
 8627:                          ;
 8628:                          ; ADCSTART [channel] 
 8629:                          
 8630:                          ADCSTART:
 8631:      26A4 74 39          		mov	A,#39H				; get argument "channel"
 8632:      26A6 12 00 30       		lcall	30H				;
 8633:      26A9 74 01          		mov	A,#1				;
 8634:      26AB 12 00 30       		lcall	30H				; to R3:R1
 8635:      26AE BB 00 66       		cjne	R3,#0,AdcSERR	;If R3 <> 0
 8636:      26B1 B9 08 00       		cjne	R1,#8,AdcS00	;If R1 >= 8
 8637:      26B4 50 61          AdcS00:	jnc		AdcSERR			;  goto error rou
 8638:                          
 8639:                          ;---- create analog port mask-bit ------
 8640:      26B6 89 07          		mov	ar7,r1				; analog port-no
 8641:      26B8 7E 01          		mov	r6,#01h				; initial port mask-bit
 8642:                          
 8643:      26BA EF             AdcS01:	mov	a,r7				; loop-no
 8644:      26BB 60 06          		jz	AdcS02				; shift loop end ?
 8645:                          
 8646:      26BD EE             		mov	a,r6				; shift left mask-bit
 8647:      26BE 23             		rl	a
 8648:      26BF FE             		mov	r6,a				; R6 = new mask-bit
 8649:                          
 8650:      26C0 1F             		dec	r7
 8651:      26C1 80 F7          		sjmp	AdcS01
 8652:                          
 8653:                          ;---- setup ADC function register ------
 8654:      26C3 EE             AdcS02:	mov	a,r6				; R6 = mask-bit
 8655:      26C4 F4             		cpl	a					; not mask-bit
 8656:      26C5 F5 B9          		mov	P1_IE,a				; set P1.x(AINx) is ana
 8657:                          
 8658:      26C7 43 F6 04       		orl	ADC_SETUP,#04h		; ADC power on
 8659:      26CA 75 EF 0C       		mov	ADC_CK_SE,#12		; set frequency div

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 158



 Line    I  Addr Code           Source

 8660:      26CD 75 F2 00       		mov	ADC_CTRL,#00h		; set manual sampli
 8661:      26D0 8E F3          		mov	ADC_CHANN,r6		; use analog port P1
 8662:      26D2 75 F7 04       		mov	ADC_EX_SW,#04h		; set 11bit sampli
 8663:                          
 8664:      26D5 D1 DF          		acall	delay100		; wait 100uS
 8665:                          
 8666:      26D7 E5 F4          		mov	a,ADC_FIFO_L		; clear FIFO, dummy 
 8667:      26D9 E5 F5          		mov	a,ADC_FIFO_H
 8668:                          
 8669:      26DB 43 F1 10       		orl	ADC_STAT,#10h		; clear bADC_IF_ACT
 8670:                          
 8671:      26DE 22             		ret						; Return to BASIC.
 8672:                          
 8673:                          ;---- wait about 100uS -----------------
 8674:                          delay100:
 8675:      26DF D1 E9          		acall	delay25			; wait 25uS
 8676:      26E1 D1 E9          		acall	delay25
 8677:      26E3 D1 E9          		acall	delay25
 8678:      26E5 D1 E9          		acall	delay25
 8679:      26E7 22             		ret
 8680:                          
 8681:           N      26E9    		org		$/2*2+1			; set odd address locat
 8682:                          
 8683:      26E9 7F B4          delay25:	mov		r7,#180		; wait 25uS at Fs
 8684:      26EB DF FE          delay25a:	djnz	r7,delay25a	; ! place thi
 8685:      26ED 22             		ret
 8686:                          
 8687:                          ;---------------------------------------
 8688:                          ; ADCSTOP
 8689:                          
 8690:                          ADCSTOP:
 8691:      26EE 53 F6 FB       		anl	ADC_SETUP,#0fbh		; ADC power off
 8692:      26F1 75 B9 FF       		mov	P1_IE,#0ffh			; set all P1 port is
 8693:                          
 8694:      26F4 D1 DF          		acall	delay100		; wait 100uS
 8695:                          
 8696:      26F6 22             		ret						; Return to BASIC.
 8697:                          
 8698:                          ;---------------------------------------
 8699:                          ; ADCGET   [variable]
 8700:                          
 8701:                          ADCGET:
 8702:                          
 8703:                          ;---- generate ADC sampling pulse ------
 8704:      26F7 43 F2 80       		orl	ADC_CTRL,#80h		; set 1 to bADC_SAM
 8705:      26FA D1 69          		acall	delay			; wait 2.5uS
 8706:      26FC D1 69          		acall	delay			; wait 2.5uS
 8707:      26FE 53 F2 7F       		anl	ADC_CTRL,#7fh		; set 0 to bADC_SAM
 8708:                          
 8709:                          ;---- wait for conversion complete -----
 8710:      2701 E5 F1          AdcG00:	mov	a,ADC_STAT
 8711:      2703 30 E4 FB       		jnb	acc.4,AdcG00		; wait for bADC_IF_A
 8712:                          
 8713:      2706 43 F1 10       		orl	ADC_STAT,#10h		; clear bADC_IF_ACT
 8714:                          
 8715:      2709 A8 F4          		mov	r0,ADC_FIFO_L		; get ADC value low

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 159



 Line    I  Addr Code           Source

 8716:      270B AA F5          		mov	r2,ADC_FIFO_H		; get ADC value Hig
 8717:                          
 8718:      270D 74 9A          		mov	A,#9AH				; Put R2:R0 on argument 
 8719:      270F 12 00 30       		lcall	30H				;
 8720:                          
 8721:      2712 74 43          		mov	A,#43H				; Set next variable to v
 8722:      2714 02 00 30       		ljmp	30H				; on argument stack and re
 8723:                          
 8724:                          ;----- error - sends an error message --
 8725:                          
 8726:      2717 74 07          AdcSERR:	mov	A,#7			;Send CR/LF
 8727:      2719 12 00 30       		lcall	30H
 8728:      271C 7B 27          		mov	R3,#high adcerrmsg	;Set string add
 8729:      271E 79 2B          		mov	R1,#low adcerrmsg
 8730:                          
 8731:      2720 D2 34          		setb	34H				;Read string from code mem
 8732:      2722 74 06          		mov		A,#6			;Send String to
 8733:      2724 12 00 30       		lcall	30H				;terminal.
 8734:      2727 E4             		clr		A
 8735:      2728 02 00 30       		ljmp	30H				;Back to command mode.
 8736:                          
 8737:      272B 45 52 52 4F    adcerrmsg:	db	'ERROR: BAD ADCSTART ARGUMENT'
            272F 52 3A 20 42
            2733 41 44 20 41
            2737 44 43 53 54
            273B 41 52 54 20
            273F 41 52 47 55
            2743 4D 45 4E 54
 8738:      2747 22             		db	22H					;End of text.
 8739:                          
 8740:                          ; === ADC command processer end ========
 8741:                          ;
 8742:                          ; === Pulse generator command processer 
 8743:                          ;
 8744:                          ; PULSE [loop-number] 
 8745:                          
 8746:                          PULSE:
 8747:      2748 74 39          		mov	A,#39H				; get argument "loop-num
 8748:      274A 12 00 30       		lcall	30H				;
 8749:      274D 74 01          		mov	A,#1				;
 8750:      274F 12 00 30       		lcall	30H				; to R3:R1
 8751:                          
 8752:      2752 75 C6 2D       		mov	PORT_CFG,#00101101B		; P1 driver c
 8753:      2755 43 BA 80       		orl	P1_DIR,#10000000B		; P1.7(SCL) out
 8754:      2758 43 BB 40       		orl	P1_PU,#01000000B		; P1.6(SDA) pull
 8755:      275B 00             		nop						; dummy, to adjust the instru
 8756:                          
 8757:      275C EB             PUL000:	mov		a,r3			;If R3(high-byte) = 
 8758:      275D 60 0B          		jz		PUL010			; yes, skip high-byte loo
 8759:      275F 8B 07          		mov		ar7,r3			; high-byte loop(256 tim
 8760:                          
 8761:      2761 74 00          PUL002:	mov		a,#0			; 256 times loop
 8762:      2763 00             PUL003:	nop
 8763:      2764 00             		nop
 8764:      2765 14             		dec		a
 8765:      2766 70 FB          		jnz		PUL003			; 256 times end ?

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 160



 Line    I  Addr Code           Source

 8766:      2768 DF F7          		djnz	r7,PUL002		; R3 times end ?
 8767:                          
 8768:      276A E9             PUL010:	mov		a,r1			;If R1(low-byte) = 0
 8769:      276B 60 05          		jz		PUL020			; yes, skip low-byte loop
 8770:                          
 8771:      276D 00             PUL012:	nop						; R1 times loop
 8772:      276E 00             		nop
 8773:      276F 14             		dec		a
 8774:      2770 70 FB          		jnz		PUL012			; R1 times end ?
 8775:                          
 8776:                          ;----- Port SCK(P1.7) toggle -----------
 8777:      2772 B2 97          PUL020:	cpl		scl				; port SCL(P1.7) tog
 8778:      2774 20 96 E5       		jb		sda,PUL000		; loop continue ? (por
 8779:                          
 8780:      2777 22             		ret						; Return to BASIC.
 8781:                          
 8782:                          ; === Pulse generator command processer 
 8783:                          
 8784:                          ; === SFR command processer ============
 8785:                          
 8786:      2778 74 07          sfrerror:	mov	A,#7			;Send CR/LF
 8787:      277A 12 00 30       		lcall	30H
 8788:      277D 7B 27          		mov	R3,#high sfrerrmsg	;Set string add
 8789:      277F 79 8C          		mov	R1,#low sfrerrmsg
 8790:                          
 8791:      2781 D2 34          		setb	34H			;Read string from code memo
 8792:      2783 74 06          		mov		A,#6		;Send String to
 8793:      2785 12 00 30       		lcall	30H			;terminal.
 8794:      2788 E4             		clr		A
 8795:      2789 02 00 30       		ljmp	30H			;Back to command mode.
 8796:                          
 8797:      278C 45 52 52 4F    sfrerrmsg:      db 'ERROR: BAD SFR ARGUMENT'
            2790 52 3A 20 42
            2794 41 44 20 53
            2798 46 52 20 41
            279C 52 47 55 4D
            27A0 45 4E 54
 8798:      27A3 22             		db	22H			;End of text.
 8799:                          
 8800:                          ;===== rdsfr - read from special funtion
 8801:                          
 8802:      27A4 74 39          rdsfr:	mov     A,#39H		;Put address from
 8803:      27A6 12 00 30       		lcall	30H			;argument stack.
 8804:                          
 8805:      27A9 74 01          		mov	A,#1			;change value to 16 bit
 8806:      27AB 12 00 30       		lcall	30H			;integer and write to R3:R
 8807:                          
 8808:      27AE BB 00 C7       		cjne	R3,#0,sfrerror		;If R3 not zero	t
 8809:      27B1 E9             		mov	A,R1			;Address to Acc.
 8810:      27B2 30 E7 C3       		jnb	Acc.7,sfrerror		;If address less t
 8811:      27B5 FC             		mov	R4,A			;Address to R4.
 8812:                          
 8813:      27B6 75 82 13       		mov	DPL,#low sfrgettab	;Set DPTR to ju
 8814:      27B9 75 83 28       		mov	DPH,#high sfrgettab	;table.
 8815:      27BC 12 27 F4       		call	do_sfr			;Read SFR.
 8816:                          

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 161



 Line    I  Addr Code           Source

 8817:      27BF F8             		mov	R0,A			;Load R0 with SFR byte.
 8818:      27C0 7A 00          		mov	R2,#0			;Set high byte to zero.
 8819:      27C2 74 9A          		mov	A,#9AH			;Put byte on argument sta
 8820:      27C4 12 00 30       		lcall	30H
 8821:                          
 8822:                          ;----- Set variable to SFR byte --------
 8823:                          
 8824:      27C7 74 43          		mov	A,#43H			;Set next variable to val
 8825:      27C9 02 00 30       		ljmp	30H			;on argument stack and
 8826:                          						;return to BASIC.
 8827:                          
 8828:                          ;===== wrsfr - write to special funtion 
 8829:                          
 8830:      27CC 74 39          wrsfr:	mov		A,#39H		;Put address from te
 8831:      27CE 12 00 30       		lcall	30H			;argument stack.
 8832:                          
 8833:      27D1 74 01          		mov	A,#1			;change value to 16 bit
 8834:      27D3 12 00 30       		lcall	30H			;integer and write to R3:R
 8835:      27D6 BB 00 9F       		cjne	R3,#0,sfrerror		;If R3 not zero	t
 8836:      27D9 E9             		mov	A,R1			;or
 8837:      27DA 30 E7 9B       		jnb	Acc.7,sfrerror		;if address less t
 8838:      27DD 89 0B          		mov	temp1,R1		;Save address.
 8839:                          
 8840:      27DF 74 39          		mov	A,#39H			;Put value to write on
 8841:      27E1 12 00 30       		lcall	30H			;argument stack.
 8842:                          
 8843:      27E4 74 01          		mov	A,#1			;change value to 16 bit
 8844:      27E6 12 00 30       		lcall	30H			;integer and write to R3:R
 8845:      27E9 BB 00 8C       		cjne	R3,#0,sfrerror		;If R3 not zero	t
 8846:                          						;8 bit integer only error.
 8847:      27EC 75 82 11       		mov	DPL,#low sfrputtab	;Set DPTR to ju
 8848:      27EF 75 83 28       		mov	DPH,#high sfrputtab	;table.
 8849:      27F2 AC 0B          		mov	R4,temp1		;Address to write to R4.
 8850:                          
 8851:                          ;----- do_sfr - read from or wright to S
 8852:                          
 8853:                          ;----- Calculate the jump --------------
 8854:                          
 8855:      27F4 EC             do_sfr:		mov	A,R4			;Address to Acc
 8856:      27F5 24 80          		add	A,#80H
 8857:      27F7 FC             		mov	R4,A
 8858:      27F8 78 00          		mov	R0,#0
 8859:      27FA 25 E0          		add	A,ACC			;*2
 8860:      27FC C8             		xch	A,R0
 8861:      27FD 35 E0          		addc	A,ACC			;carry
 8862:      27FF C8             		xch	A,R0
 8863:      2800 25 E0          		add	A,ACC			;*4
 8864:      2802 C8             		xch	A,R0
 8865:      2803 35 E0          		addc	A,ACC			;carry
 8866:      2805 C8                             xch     A,R0
 8867:                          
 8868:                          ;----- Load DPTR with offset and jump --
 8869:                          
 8870:      2806 25 82                          add     A,DPL
 8871:      2808 F5 82          		mov	DPL,A
 8872:      280A E8             		mov	A,R0

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 162



 Line    I  Addr Code           Source

 8873:      280B 35 83          		addc	A,DPH
 8874:      280D F5 83          		mov	DPH,A
 8875:      280F EC             		mov	A,R4
 8876:      2810 73             		jmp	@A+DPTR			;Jump into table.
 8877:                          
 8878:                          ;----- The direct addressing table -----
 8879:                          
 8880:      2811 89 80          sfrputtab:	mov	128,R1
 8881:      2813 E5 80          sfrgettab:	mov	A,128
 8882:      2815 22             		ret
 8883:      2816 89 81          		mov	129,R1
 8884:      2818 E5 81          		mov	A,129
 8885:      281A 22             		ret
 8886:      281B 89 82          		mov	130,R1
 8887:      281D E5 82          		mov	A,130
 8888:      281F 22             		ret
 8889:      2820 89 83          		mov	131,R1
 8890:      2822 E5 83          		mov	A,131
 8891:      2824 22             		ret
 8892:      2825 89 84          		mov	132,R1
 8893:      2827 E5 84          		mov	A,132
 8894:      2829 22             		ret
 8895:      282A 89 85          		mov	133,R1
 8896:      282C E5 85          		mov	A,133
 8897:      282E 22             		ret
 8898:      282F 89 86          		mov	134,R1
 8899:      2831 E5 86          		mov	A,134
 8900:      2833 22             		ret
 8901:      2834 89 87          		mov	135,R1
 8902:      2836 E5 87          		mov	A,135
 8903:      2838 22             		ret
 8904:      2839 89 88          		mov	136,R1
 8905:      283B E5 88          		mov	A,136
 8906:      283D 22             		ret
 8907:      283E 89 89          		mov	137,R1
 8908:      2840 E5 89          		mov	A,137
 8909:      2842 22             		ret
 8910:      2843 89 8A          		mov	138,R1
 8911:      2845 E5 8A          		mov	A,138
 8912:      2847 22             		ret
 8913:      2848 89 8B          		mov	139,R1
 8914:      284A E5 8B          		mov	A,139
 8915:      284C 22             		ret
 8916:      284D 89 8C          		mov	140,R1
 8917:      284F E5 8C          		mov	A,140
 8918:      2851 22             		ret
 8919:      2852 89 8D          		mov	141,R1
 8920:      2854 E5 8D          		mov	A,141
 8921:      2856 22             		ret
 8922:      2857 89 8E          		mov	142,R1
 8923:      2859 E5 8E          		mov	A,142
 8924:      285B 22             		ret
 8925:      285C 89 8F          		mov	143,R1
 8926:      285E E5 8F          		mov	A,143
 8927:      2860 22             		ret
 8928:      2861 89 90          		mov	144,R1

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 163



 Line    I  Addr Code           Source

 8929:      2863 E5 90          		mov	A,144
 8930:      2865 22             		ret
 8931:      2866 89 91          		mov	145,R1
 8932:      2868 E5 91          		mov	A,145
 8933:      286A 22             		ret
 8934:      286B 89 92          		mov	146,R1
 8935:      286D E5 92          		mov	A,146
 8936:      286F 22             		ret
 8937:      2870 89 93          		mov	147,R1
 8938:      2872 E5 93          		mov	A,147
 8939:      2874 22             		ret
 8940:      2875 89 94          		mov	148,R1
 8941:      2877 E5 94          		mov	A,148
 8942:      2879 22             		ret
 8943:      287A 89 95          		mov	149,R1
 8944:      287C E5 95          		mov	A,149
 8945:      287E 22             		ret
 8946:      287F 89 96          		mov	150,R1
 8947:      2881 E5 96          		mov	A,150
 8948:      2883 22             		ret
 8949:      2884 89 97          		mov	151,R1
 8950:      2886 E5 97          		mov	A,151
 8951:      2888 22             		ret
 8952:      2889 89 98          		mov	152,R1
 8953:      288B E5 98          		mov	A,152
 8954:      288D 22             		ret
 8955:      288E 89 99          		mov	153,R1
 8956:      2890 E5 99          		mov	A,153
 8957:      2892 22             		ret
 8958:      2893 89 9A          		mov	154,R1
 8959:      2895 E5 9A          		mov	A,154
 8960:      2897 22             		ret
 8961:      2898 89 9B          		mov	155,R1
 8962:      289A E5 9B          		mov	A,155
 8963:      289C 22             		ret
 8964:      289D 89 9C          		mov	156,R1
 8965:      289F E5 9C          		mov	A,156
 8966:      28A1 22             		ret
 8967:      28A2 89 9D          		mov	157,R1
 8968:      28A4 E5 9D          		mov	A,157
 8969:      28A6 22             		ret
 8970:      28A7 89 9E          		mov	158,R1
 8971:      28A9 E5 9E          		mov	A,158
 8972:      28AB 22             		ret
 8973:      28AC 89 9F          		mov	159,R1
 8974:      28AE E5 9F          		mov	A,159
 8975:      28B0 22             		ret
 8976:      28B1 89 A0          		mov	160,R1
 8977:      28B3 E5 A0          		mov	A,160
 8978:      28B5 22             		ret
 8979:      28B6 89 A1          		mov	161,R1
 8980:      28B8 E5 A1          		mov	A,161
 8981:      28BA 22             		ret
 8982:      28BB 89 A2          		mov	162,R1
 8983:      28BD E5 A2          		mov	A,162
 8984:      28BF 22             		ret

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 164



 Line    I  Addr Code           Source

 8985:      28C0 89 A3          		mov	163,R1
 8986:      28C2 E5 A3          		mov	A,163
 8987:      28C4 22             		ret
 8988:      28C5 89 A4          		mov	164,R1
 8989:      28C7 E5 A4          		mov	A,164
 8990:      28C9 22             		ret
 8991:      28CA 89 A5          		mov	165,R1
 8992:      28CC E5 A5          		mov	A,165
 8993:      28CE 22             		ret
 8994:      28CF 89 A6          		mov	166,R1
 8995:      28D1 E5 A6          		mov	A,166
 8996:      28D3 22             		ret
 8997:      28D4 89 A7          		mov	167,R1
 8998:      28D6 E5 A7          		mov	A,167
 8999:      28D8 22             		ret
 9000:      28D9 89 A8          		mov	168,R1
 9001:      28DB E5 A8          		mov	A,168
 9002:      28DD 22             		ret
 9003:      28DE 89 A9          		mov	169,R1
 9004:      28E0 E5 A9          		mov	A,169
 9005:      28E2 22             		ret
 9006:      28E3 89 AA          		mov	170,R1
 9007:      28E5 E5 AA          		mov	A,170
 9008:      28E7 22             		ret
 9009:      28E8 89 AB          		mov	171,R1
 9010:      28EA E5 AB          		mov	A,171
 9011:      28EC 22             		ret
 9012:      28ED 89 AC          		mov	172,R1
 9013:      28EF E5 AC          		mov	A,172
 9014:      28F1 22             		ret
 9015:      28F2 89 AD          		mov	173,R1
 9016:      28F4 E5 AD          		mov	A,173
 9017:      28F6 22             		ret
 9018:      28F7 89 AE          		mov	174,R1
 9019:      28F9 E5 AE          		mov	A,174
 9020:      28FB 22             		ret
 9021:      28FC 89 AF          		mov	175,R1
 9022:      28FE E5 AF          		mov	A,175
 9023:      2900 22             		ret
 9024:      2901 89 B0          		mov	176,R1
 9025:      2903 E5 B0          		mov	A,176
 9026:      2905 22             		ret
 9027:      2906 89 B1          		mov	177,R1
 9028:      2908 E5 B1          		mov	A,177
 9029:      290A 22             		ret
 9030:      290B 89 B2          		mov	178,R1
 9031:      290D E5 B2          		mov	A,178
 9032:      290F 22             		ret
 9033:      2910 89 B3          		mov	179,R1
 9034:      2912 E5 B3          		mov	A,179
 9035:      2914 22             		ret
 9036:      2915 89 B4          		mov	180,R1
 9037:      2917 E5 B4          		mov	A,180
 9038:      2919 22             		ret
 9039:      291A 89 B5          		mov	181,R1
 9040:      291C E5 B5          		mov	A,181

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 165



 Line    I  Addr Code           Source

 9041:      291E 22             		ret
 9042:      291F 89 B6          		mov	182,R1
 9043:      2921 E5 B6          		mov	A,182
 9044:      2923 22             		ret
 9045:      2924 89 B7          		mov	183,R1
 9046:      2926 E5 B7          		mov	A,183
 9047:      2928 22             		ret
 9048:      2929 89 B8          		mov	184,R1
 9049:      292B E5 B8          		mov	A,184
 9050:      292D 22             		ret
 9051:      292E 89 B9          		mov	185,R1
 9052:      2930 E5 B9          		mov	A,185
 9053:      2932 22             		ret
 9054:      2933 89 BA          		mov	186,R1
 9055:      2935 E5 BA          		mov	A,186
 9056:      2937 22             		ret
 9057:      2938 89 BB          		mov	187,R1
 9058:      293A E5 BB          		mov	A,187
 9059:      293C 22             		ret
 9060:      293D 89 BC          		mov	188,R1
 9061:      293F E5 BC          		mov	A,188
 9062:      2941 22             		ret
 9063:      2942 89 BD          		mov	189,R1
 9064:      2944 E5 BD          		mov	A,189
 9065:      2946 22             		ret
 9066:      2947 89 BE          		mov	190,R1
 9067:      2949 E5 BE          		mov	A,190
 9068:      294B 22             		ret
 9069:      294C 89 BF          		mov	191,R1
 9070:      294E E5 BF          		mov	A,191
 9071:      2950 22             		ret
 9072:      2951 89 C0          		mov	192,R1
 9073:      2953 E5 C0          		mov	A,192
 9074:      2955 22             		ret
 9075:      2956 89 C1          		mov	193,R1
 9076:      2958 E5 C1          		mov	A,193
 9077:      295A 22             		ret
 9078:      295B 89 C2          		mov	194,R1
 9079:      295D E5 C2          		mov	A,194
 9080:      295F 22             		ret
 9081:      2960 89 C3          		mov	195,R1
 9082:      2962 E5 C3          		mov	A,195
 9083:      2964 22             		ret
 9084:      2965 89 C4          		mov	196,R1
 9085:      2967 E5 C4          		mov	A,196
 9086:      2969 22             		ret
 9087:      296A 89 C5          		mov	197,R1
 9088:      296C E5 C5          		mov	A,197
 9089:      296E 22             		ret
 9090:      296F 89 C6          		mov	198,R1
 9091:      2971 E5 C6          		mov	A,198
 9092:      2973 22             		ret
 9093:      2974 89 C7          		mov	199,R1
 9094:      2976 E5 C7          		mov	A,199
 9095:      2978 22             		ret
 9096:      2979 89 C8          		mov	200,R1

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 166



 Line    I  Addr Code           Source

 9097:      297B E5 C8          		mov	A,200
 9098:      297D 22             		ret
 9099:      297E 89 C9          		mov	201,R1
 9100:      2980 E5 C9          		mov	A,201
 9101:      2982 22             		ret
 9102:      2983 89 CA          		mov	202,R1
 9103:      2985 E5 CA          		mov	A,202
 9104:      2987 22             		ret
 9105:      2988 89 CB          		mov	203,R1
 9106:      298A E5 CB          		mov	A,203
 9107:      298C 22             		ret
 9108:      298D 89 CC          		mov	204,R1
 9109:      298F E5 CC          		mov	A,204
 9110:      2991 22             		ret
 9111:      2992 89 CD          		mov	205,R1
 9112:      2994 E5 CD          		mov	A,205
 9113:      2996 22             		ret
 9114:      2997 89 CE          		mov	206,R1
 9115:      2999 E5 CE          		mov	A,206
 9116:      299B 22             		ret
 9117:      299C 89 CF          		mov	207,R1
 9118:      299E E5 CF          		mov	A,207
 9119:      29A0 22             		ret
 9120:      29A1 89 D0          		mov	208,R1
 9121:      29A3 E5 D0          		mov	A,208
 9122:      29A5 22             		ret
 9123:      29A6 89 D1          		mov	209,R1
 9124:      29A8 E5 D1          		mov	A,209
 9125:      29AA 22             		ret
 9126:      29AB 89 D2          		mov	210,R1
 9127:      29AD E5 D2          		mov	A,210
 9128:      29AF 22             		ret
 9129:      29B0 89 D3          		mov	211,R1
 9130:      29B2 E5 D3          		mov	A,211
 9131:      29B4 22             		ret
 9132:      29B5 89 D4          		mov	212,R1
 9133:      29B7 E5 D4          		mov	A,212
 9134:      29B9 22             		ret
 9135:      29BA 89 D5          		mov	213,R1
 9136:      29BC E5 D5          		mov	A,213
 9137:      29BE 22             		ret
 9138:      29BF 89 D6          		mov	214,R1
 9139:      29C1 E5 D6          		mov	A,214
 9140:      29C3 22             		ret
 9141:      29C4 89 D7          		mov	215,R1
 9142:      29C6 E5 D7          		mov	A,215
 9143:      29C8 22             		ret
 9144:      29C9 89 D8          		mov	216,R1
 9145:      29CB E5 D8          		mov	A,216
 9146:      29CD 22             		ret
 9147:      29CE 89 D9          		mov	217,R1
 9148:      29D0 E5 D9          		mov	A,217
 9149:      29D2 22             		ret
 9150:      29D3 89 DA          		mov	218,R1
 9151:      29D5 E5 DA          		mov	A,218
 9152:      29D7 22             		ret

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 167



 Line    I  Addr Code           Source

 9153:      29D8 89 DB          		mov	219,R1
 9154:      29DA E5 DB          		mov	A,219
 9155:      29DC 22             		ret
 9156:      29DD 89 DC          		mov	220,R1
 9157:      29DF E5 DC          		mov	A,220
 9158:      29E1 22             		ret
 9159:      29E2 89 DD          		mov	221,R1
 9160:      29E4 E5 DD          		mov	A,221
 9161:      29E6 22             		ret
 9162:      29E7 89 DE          		mov	222,R1
 9163:      29E9 E5 DE          		mov	A,222
 9164:      29EB 22             		ret
 9165:      29EC 89 DF          		mov	223,R1
 9166:      29EE E5 DF          		mov	A,223
 9167:      29F0 22             		ret
 9168:      29F1 89 E0          		mov	224,R1
 9169:      29F3 E5 E0          		mov	A,224
 9170:      29F5 22             		ret
 9171:      29F6 89 E1          		mov	225,R1
 9172:      29F8 E5 E1          		mov	A,225
 9173:      29FA 22             		ret
 9174:      29FB 89 E2          		mov	226,R1
 9175:      29FD E5 E2          		mov	A,226
 9176:      29FF 22             		ret
 9177:      2A00 89 E3          		mov	227,R1
 9178:      2A02 E5 E3          		mov	A,227
 9179:      2A04 22             		ret
 9180:      2A05 89 E4          		mov	228,R1
 9181:      2A07 E5 E4          		mov	A,228
 9182:      2A09 22             		ret
 9183:      2A0A 89 E5          		mov	229,R1
 9184:      2A0C E5 E5          		mov	A,229
 9185:      2A0E 22             		ret
 9186:      2A0F 89 E6          		mov	230,R1
 9187:      2A11 E5 E6          		mov	A,230
 9188:      2A13 22             		ret
 9189:      2A14 89 E7          		mov	231,R1
 9190:      2A16 E5 E7          		mov	A,231
 9191:      2A18 22             		ret
 9192:      2A19 89 E8          		mov	232,R1
 9193:      2A1B E5 E8          		mov	A,232
 9194:      2A1D 22             		ret
 9195:      2A1E 89 E9          		mov	233,R1
 9196:      2A20 E5 E9          		mov	A,233
 9197:      2A22 22             		ret
 9198:      2A23 89 EA          		mov	234,R1
 9199:      2A25 E5 EA          		mov	A,234
 9200:      2A27 22             		ret
 9201:      2A28 89 EB          		mov	235,R1
 9202:      2A2A E5 EB          		mov	A,235
 9203:      2A2C 22             		ret
 9204:      2A2D 89 EC          		mov	236,R1
 9205:      2A2F E5 EC          		mov	A,236
 9206:      2A31 22             		ret
 9207:      2A32 89 ED          		mov	237,R1
 9208:      2A34 E5 ED          		mov	A,237

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 168



 Line    I  Addr Code           Source

 9209:      2A36 22             		ret
 9210:      2A37 89 EE          		mov	238,R1
 9211:      2A39 E5 EE          		mov	A,238
 9212:      2A3B 22             		ret
 9213:      2A3C 89 EF          		mov	239,R1
 9214:      2A3E E5 EF          		mov	A,239
 9215:      2A40 22             		ret
 9216:      2A41 89 F0          		mov	240,R1
 9217:      2A43 E5 F0          		mov	A,240
 9218:      2A45 22             		ret
 9219:      2A46 89 F1          		mov	241,R1
 9220:      2A48 E5 F1          		mov	A,241
 9221:      2A4A 22             		ret
 9222:      2A4B 89 F2          		mov	242,R1
 9223:      2A4D E5 F2          		mov	A,242
 9224:      2A4F 22             		ret
 9225:      2A50 89 F3          		mov	243,R1
 9226:      2A52 E5 F3          		mov	A,243
 9227:      2A54 22             		ret
 9228:      2A55 89 F4          		mov	244,R1
 9229:      2A57 E5 F4          		mov	A,244
 9230:      2A59 22             		ret
 9231:      2A5A 89 F5          		mov	245,R1
 9232:      2A5C E5 F5          		mov	A,245
 9233:      2A5E 22             		ret
 9234:      2A5F 89 F6          		mov	246,R1
 9235:      2A61 E5 F6          		mov	A,246
 9236:      2A63 22             		ret
 9237:      2A64 89 F7          		mov	247,R1
 9238:      2A66 E5 F7          		mov	A,247
 9239:      2A68 22             		ret
 9240:      2A69 89 F8          		mov	248,R1
 9241:      2A6B E5 F8          		mov	A,248
 9242:      2A6D 22             		ret
 9243:      2A6E 89 F9          		mov	249,R1
 9244:      2A70 E5 F9          		mov	A,249
 9245:      2A72 22             		ret
 9246:      2A73 89 FA          		mov	250,R1
 9247:      2A75 E5 FA          		mov	A,250
 9248:      2A77 22             		ret
 9249:      2A78 89 FB          		mov	251,R1
 9250:      2A7A E5 FB          		mov	A,251
 9251:      2A7C 22             		ret
 9252:      2A7D 89 FC          		mov	252,R1
 9253:      2A7F E5 FC          		mov	A,252
 9254:      2A81 22             		ret
 9255:      2A82 89 FD          		mov	253,R1
 9256:      2A84 E5 FD          		mov	A,253
 9257:      2A86 22             		ret
 9258:      2A87 89 FE          		mov	254,R1
 9259:      2A89 E5 FE          		mov	A,254
 9260:      2A8B 22             		ret
 9261:      2A8C 89 FF          		mov	255,R1
 9262:      2A8E E5 FF          		mov	A,255
 9263:      2A90 22             		ret
 9264:                          

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 169



 Line    I  Addr Code           Source

 9265:                          ;---------------------------------------
 9266:                          
 9267:                          		end
 9268:                          

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 170




Segment usage:
   Code      :   9831 bytes
   Data      :      0 bytes
   Idata     :      0 bytes
   Edata     :      0 bytes
   Fdata     :      0 bytes
   Xdata     :    140 bytes
   Bit       :      0 bits

   Register banks used: 0

   Warnings: 0
   Errors:   0


C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 171



              L I S T   O F   S Y M B O L S
              =============================


SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
??C51ASM                         NUMBER   8051
??CODE_SIZE                      NUMBER   0000
??DEVICE                         NUMBER   0000
??ERAM_SIZE                      NUMBER   0000
??FDATA_SIZE                     NUMBER   0000
??RAM_SIZE                       NUMBER   0100
??VERSION                        NUMBER   0120
??_AT89C2051_                    NUMBER   001B
??_AT89C4051_                    NUMBER   001C
??_AT89C51ED2_                   NUMBER   0026
??_AT89C51IC2_                   NUMBER   0024
??_AT89C51ID2_                   NUMBER   0025
??_AT89C51RB2_                   NUMBER   0021
??_AT89C51RC2_                   NUMBER   0022
??_AT89C51RC_                    NUMBER   0020
??_AT89C51RD2_                   NUMBER   0023
??_AT89C51_                      NUMBER   001D
??_AT89C52_                      NUMBER   001E
??_AT89C55WD_                    NUMBER   001F
??_AT89LP2052_                   NUMBER   0001
??_AT89LP213_                    NUMBER   0003
??_AT89LP214_                    NUMBER   0004
??_AT89LP216_                    NUMBER   0005
??_AT89LP3240_                   NUMBER   000A
??_AT89LP4052_                   NUMBER   0002
??_AT89LP428_                    NUMBER   0006
??_AT89LP51ED2_                  NUMBER   0011
??_AT89LP51IC2_                  NUMBER   000E
??_AT89LP51ID2_                  NUMBER   0010
??_AT89LP51RB2_                  NUMBER   000C
??_AT89LP51RC2_                  NUMBER   000D
??_AT89LP51RD2_                  NUMBER   000F
??_AT89LP51_                     NUMBER   0007
??_AT89LP52_                     NUMBER   0008
??_AT89LP6440_                   NUMBER   000B
??_AT89LP828_                    NUMBER   0009
??_AT89LS51_                     NUMBER   0019
??_AT89LS52_                     NUMBER   001A
??_AT89S2051_                    NUMBER   0012
??_AT89S4051_                    NUMBER   0013
??_AT89S51_                      NUMBER   0014
??_AT89S52_                      NUMBER   0015
??_AT89S53_                      NUMBER   0016
??_AT89S8252_                    NUMBER   0017
??_AT89S8253_                    NUMBER   0018
??_DEFAULT_                      NUMBER   0000
AABS                             CODE     138F      4899
AADD                             CODE     1741      5858
AANL                             CODE     1484      5185
AATAN                            CODE     11E0      4562
AATAN1                           CODE     11EE      4569
AC                               BIT        D6
AC1                              CODE     096C      2763
ACBYTE                           CODE     13AD      4944
ACC                              DATA       E0

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 172



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
ACKOK                            CODE     2617      8534
ACOS                             CODE     116D      4459
ADBYTE                           CODE     13B6      4956
ADCERRMSG                        CODE     272B      8737
ADCG00                           CODE     2701      8710
ADCGET                           CODE     26F7      8701
ADCON                            NUMBER   00D8       564
ADCS00                           CODE     26B4      8637
ADCS01                           CODE     26BA      8643
ADCS02                           CODE     26C3      8654
ADCSERR                          CODE     2717      8726
ADCSTART                         CODE     26A4      8630
ADCSTOP                          CODE     26EE      8690
ADC_CHANN                        NUMBER   00F3      8197
ADC_CK_SE                        NUMBER   00EF      8194
ADC_CTRL                         NUMBER   00F2      8196
ADC_EX_SW                        NUMBER   00F7      8201
ADC_FIFO_H                       NUMBER   00F5      8199
ADC_FIFO_L                       NUMBER   00F4      8198
ADC_SETUP                        NUMBER   00F6      8200
ADC_STAT                         NUMBER   00F1      8195
ADDLP                            CODE     19F2      6612
ADDPTR                           CODE     05DE      2017
ADDPTR1                          CODE     05E6      2021
ADD_IN                           BIT        23      6419
ADD_R                            CODE     19F0      6610
ADIV                             CODE     140A      5043
AEL1                             CODE     1282      4699
AELP                             CODE     1270      4687
AEQ                              CODE     13DB      5005
AEQ1                             CODE     13DD      5006
AETOX                            CODE     1327      4820
AEXL                             CODE     134E      4843
AEXP                             CODE     132B      4823
AEXP1                            CODE     133D      4834
AFREE                            CODE     1711      5831
AGE                              CODE     13E7      5013
AGET                             CODE     14A9      5218
AGT                              CODE     13C5      4987
AGT1                             CODE     13C9      4989
AI1                              CODE     137A      4878
AI11                             CODE     1381      4883
AI2                              CODE     1382      4885
AI21                             CODE     138A      4891
AI3                              CODE     138E      4895
AINT                             CODE     136D      4867
AL                               CODE     0D4F      3544
AL1                              CODE     0D52      3545
AL2                              CODE     0D57      3547
AL3                              CODE     0D58      3548
ALE                              CODE     13EB      5016
ALEN                             CODE     1721      5840
ALN                              CODE     12C0      4754
ALN1                             CODE     12CD      4761
ALN11                            CODE     12EF      4783
ALNE                             CODE     12E5      4777
ALNL                             CODE     12D3      4767
ALNO                             CODE     12F8      4788
ALPAR                            CODE     13AC      4940

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 173



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
ALT                              CODE     13D6      5001
ALT1                             CODE     13D8      5002
AMUL                             CODE     11B0      4514
ANE                              CODE     13E1      5009
ANEG                             CODE     13A1      4928
ANOT                             CODE     1496      5201
ANU                              CODE     0D44      3538
AORL                             CODE     148D      5193
AP1                              CODE     14E5      5283
APCON                            CODE     14E9      5286
ARCAP2                           CODE     14DF      5275
ARG1_EXP_IS_LARGER               CODE     1A56      6711
ARG1_EXP_IS_LARGER1              CODE     1A57      6714
ARG1_EXP_IS_LARGER2              CODE     1A5A      6717
ARGF                             BIT        24       484
ARG_STACK                        NUMBER   0009      6388
ARG_STACK_PAGE                   NUMBER   0001      6389
ARND                             CODE     13F1      5022
ASGN                             CODE     1395      4911
ASIN                             CODE     1171      4468
ASIN1                            CODE     1187      4479
ASQR                             CODE     128D      4712
ASTKA                            NUMBER   0009       424
ASTKAH                           NUMBER   0001       589
ASUB                             CODE     171C      5837
AT2CON                           CODE     14D3      5264
ATAN                             CODE     11D0      4546
ATCON                            CODE     14D7      5269
ATIM0                            CODE     14C1      5248
ATIM1                            CODE     14C7      5252
ATIM2                            CODE     14CD      5256
ATIME                            CODE     1729      5845
ATMOD                            CODE     14DB      5272
ATTAB                            CODE     112A      4361
AXBYTE                           CODE     13BE      4967
AXBYTE1                          CODE     13C0      4972
AXRL                             CODE     1498      5203
AXTAL                            CODE     0FD9      4075
AXTAL0                           CODE     1657      5638
AXTAL1                           CODE     165C      5641
AXTAL2                           CODE     1679      5675
AXTAL3                           CODE     121F      4613
A_D                              CODE     1260      4671
A_IE                             CODE     14B9      5242
A_IP                             CODE     14BD      5245
B                                DATA       F0
B4800                            NUMBER   00B2       581
B9600                            NUMBER   00D9       582
BABC                             NUMBER   0027       536
BADC_IF_ACT                      NUMBER   0010      8203
BADC_POWER_EN                    NUMBER   0004      8205
BADC_RESOLUTION                  NUMBER   0004      8206
BADC_SAMPLE                      NUMBER   0080      8204
BAUD19K                          NUMBER   FF64      1476
BCHR                             CODE     082F      2545
BCHR1                            CODE     0835      2547
BCK                              CODE     078D      2396
BD                               BIT        DF       531
BELL                             NUMBER   0007       573

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 174



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
BG1                              CODE     0428      1478
BG3                              CODE     0467      1519
BI                               BIT        32       508
BO                               BIT        2C       502
BOFAH                            NUMBER   0013       444
BOFAL                            NUMBER   0014       445
BOTH_PLUS                        CODE     1A5E      6726
BR0                              CODE     07F1      2498
BR2                              CODE     083E      2551
BS                               NUMBER   0008       574
B_C                              CODE     0AA4      3002
B_TXA                            CODE     0F23      3935
B_TXA1                           CODE     0F2D      3940
C0                               CODE     0CF6      3490
C0C                              CODE     1025      4161
C0ORX1                           BIT        34       517
C1                               CODE     0CFD      3494
C1C                              CODE     1030      4167
C2                               CODE     0D06      3499
C2C                              CODE     102F      4165
C2_T2                            CODE     146C      5154
C3C                              CODE     1035      4171
CASB                             CODE     1E9E      7764
CASB2                            CODE     1EAD      7773
CASB4                            CODE     1EC0      7784
CASB5                            CODE     1EC2      7786
CASB6                            CODE     1ECB      7790
CBIAS                            CODE     167B      5677
CC1                              CODE     1844      6045
CCAL                             CODE     051C      1777
CCAL1                            CODE     052C      1794
CCLR3                            CODE     068C      2197
CCONT                            CODE     183E      6042
CERASE                           CODE     0500      1756
CH559T                           NUMBER   0001         2
CILOOP                           CODE     080F      2525
CILOOP1                          CODE     0811      2526
CIUB                             BIT        1E       476
CI_RET                           CODE     07BE      2435
CI_RET1                          CODE     07BF      2436
CKS_B                            BIT        1A       468
CKS_I                            CODE     1F78      8014
CL1                              CODE     106F      4209
CL2                              CODE     1074      4212
CL3                              CODE     1092      4228
CL6                              CODE     1094      4230
CL7                              CODE     109D      4234
CLIST                            CODE     104E      4192
CLIST1                           CODE     106B      4206
CLN_UP                           CODE     0F17      3927
CLOCK_CFG                        NUMBER   00B3       247
CLOOP                            CODE     1A66      6738
CL_1                             CODE     067D      2185
CL_2                             CODE     068B      2195
CMND1                            CODE     1787      5913
CMND11                           CODE     17EB      5974
CMND3                            CODE     17C4      5952
CMND31                           CODE     17D1      5957
CMND5                            CODE     17DD      5963

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 175



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
CMNDD                            CODE     010F       760
CMNDLK                           CODE     0855      2564
CMNDR                            CODE     1794      5930
CMNDSP                           NUMBER   004D       558
CMNX                             CODE     179B      5934
CMNX1                            CODE     17A8      5940
CMPLK                            CODE     1208      4590
CN0                              CODE     0FFE      4130
CN0T                             CODE     101C      4154
CN0T1                            CODE     1005      4133
CN0T2                            CODE     1010      4142
CN0T3                            CODE     1012      4145
CN0T4                            CODE     101B      4153
CNEW                             CODE     065C      2150
CNEW1                            CODE     0662      2162
CNTRLC                           NUMBER   0003       575
CNTRLD                           NUMBER   0004       576
CNT_S                            BIT        35       518
CNULL                            CODE     0B08      3109
CNX                              CODE     0FF9      4122
COB                              BIT        1B       469
CONB                             BIT        17       465
CONST                            CODE     0FEF      4113
CONVERT                          NUMBER   0058      6391
CONVERT_ASCII_STRING_TO_BINARY   CODE     1E9E      7757
CONVERT_BINARY_TO_ASCII_STRING   CODE     1EF7      7832
CONVT                            XDATA    0050      8073
COUB                             BIT        1C       472
CPROG                            CODE     048A      1672
CPROG1                           CODE     048D      1674
CPROG2                           CODE     04B1      1692
CPS                              CODE     0EA9      3798
CR                               NUMBER   000D       571
CR0                              CODE     03EC      1332
CR1                              CODE     0400      1357
CR11                             CODE     0403      1358
CR2                              CODE     040C      1363
CR20                             CODE     0419      1369
CRAM                             CODE     177F      5901
CRLF                             CODE     06A5      2229
CRLF2                            CODE     06A3      2227
CROM                             CODE     053C      1813
CRP                              CODE     06AD      2238
CRS                              CODE     03E0      1326
CRS1                             CODE     03E5      1328
CRS2                             CODE     03E8      1329
CRST                             CODE     038B      1250
CRST1                            CODE     03A4      1285
CRST2                            CODE     03A7      1288
CRUN                             CODE     0802      2517
CS1                              CODE     0B47      3178
CSC                              CODE     0BBD      3262
CSETUP                           CODE     0B4B      3181
CSETUP1                          CODE     0B56      3187
CSTAKA                           CODE     142C      5084
CSTAKA2                          CODE     142A      5082
CSTKA                            NUMBER   0011       439
CSTKAH                           NUMBER   0000       590
CSTS                             CODE     07C8      2451

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 176



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
CSTS1                            CODE     07CE      2459
CSTS2                            CODE     07D4      2461
CSY                              CODE     0A1E      2900
CSY1                             CODE     0A2E      2912
CSY2                             CODE     0A3A      2920
CS_I                             CODE     1F7E      8017
CXFER                            CODE     1773      5887
CXTAL                            XDATA    0113      8086
CY                               BIT        D7
C_1                              CODE     0F12      3924
C_2                              CODE     0F0D      3921
C_BIT                            BIT        2E       504
C_EX                             CODE     07D7      2473
C_K                              CODE     0540      1820
C_TST                            CODE     0EC6      3825
D1                               CODE     05DC      2006
DACK                             BIT        96       522
DAPR                             NUMBER   00DA       565
DBTWO                            CODE     1194      4489
DC1                              CODE     1FF3      8055
DC10                             CODE     1FF0      8052
DC11                             CODE     1FF6      8056
DCMPX                            CODE     05CC      1994
DEC3210                          CODE     158B      5435
DEC3211                          CODE     158F      5437
DEC3212                          CODE     1590      5438
DEC76                            CODE     1647      5615
DEC77                            CODE     164C      5618
DECDP                            CODE     05C2      1976
DECDP1                           CODE     05C8      1979
DECDP2                           CODE     05C0      1974
DECX                             CODE     1D42      7464
DEC_ASTKA                        CODE     120B      4594
DEC_ASTKA1                       CODE     1212      4601
DEC_R                            CODE     1589      5432
DELAY                            CODE     2669      8602
DELAY1                           CODE     266B      8603
DELAY100                         CODE     26DF      8674
DELAY25                          CODE     26E9      8683
DELAY25A                         CODE     26EB      8684
DELTST                           CODE     0EE1      3860
DELTST1                          CODE     0EE3      3861
DIGIT                            NUMBER   0004       599
DIGIT_CHECK                      CODE     1FED      8049
DIRF                             BIT        2F       505
DIV0                             CODE     1ABD      6848
DIV3                             CODE     1ACA      6857
DIV4                             CODE     1AD7      6865
DIV5                             CODE     1ADA      6868
DIV6                             CODE     1AE2      6873
DIV7                             CODE     1AF9      6895
DIV8                             CODE     1B0E      6908
DLD                              CODE     062B      2098
DONE_LOAD                        BIT        53      6423
DO_SFR                           CODE     27F4      8855
DPH                              DATA       83
DPL                              DATA       82
DP_B                             CODE     0E9B      3790
DP_T                             CODE     0EA2      3794

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 177



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
DRQ                              BIT        31       507
DT1                              CODE     0EE8      3865
DTEMP                            CODE     184D      6051
DTYPE                            NUMBER   0003       593
DUBSUB                           CODE     0A02      2870
D_CHK                            CODE     0DCC      3625
D_L1                             CODE     0AF8      3087
D_UNDER                          CODE     1AC8      6855
E10X                             CODE     1FB5      8030
E11X                             CODE     1F89      8021
E14X                             CODE     1F81      8019
E15X                             CODE     1FA6      8026
E16X                             CODE     1F9A      8024
E1X                              CODE     1746      5868
E1XX                             CODE     1885      6093
E1XX1                            CODE     1887      6094
E1XX2                            CODE     188C      6097
E2X                              CODE     1751      5869
E3X                              CODE     1828      6031
E3XX                             CODE     09BD      2821
E4XX                             CODE     0BC1      3265
E4YY                             CODE     121A      4609
E5X                              CODE     1816      6029
E6X                              CODE     1761      5872
E7X                              CODE     1804      6026
EA                               BIT        AF
EATC                             CODE     0CE5      3474
EBIAS                            CODE     1261      4679
EIG                              CODE     036D      1242
EIGP                             CODE     0E4E      3704
EK                               CODE     0C0E      3328
ENDBIT                           BIT        29       499
EOF                              NUMBER   0001       588
EP1                              CODE     0F45      3977
EP2                              CODE     0F49      3980
EP21                             CODE     0F52      3984
EP22                             CODE     0F5B      3988
EP3                              CODE     0F6F      3999
EP4                              CODE     0F71      4001
EP41                             CODE     0F76      4004
EP42                             CODE     0F7B      4006
EP5                              CODE     0F82      4010
ER0                              CODE     1874      6083
ER1                              CODE     18B8      6130
ER2                              CODE     18C2      6139
ER3                              CODE     18D1      6147
ER31                             CODE     18EE      6160
ER4                              CODE     18FB      6167
ERA1                             CODE     050D      1763
ERAMEND                          NUMBER   0FFF       606
ERL4                             CODE     0844      2555
ERPAR                            CODE     0CE3      3472
ERRLK                            CODE     04D6      1717
ERRLOC                           XDATA    0101      8078
ERRNUM                           XDATA    0102      8079
ERROR                            CODE     188F      6109
ERROR0                           CODE     189B      6116
ERROR01                          CODE     18A2      6119
ERROR1                           CODE     1890      6110

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 178



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
ERRS                             CODE     18AD      6124
ERS                              CODE     1FF8      8061
ES                               BIT        AC
ET0                              BIT        A9
ET1                              BIT        AB
EX0                              BIT        A8
EX1                              BIT        AA
EXA                              CODE     037B      1244
EXC                              CODE     0383      1246
EXI                              CODE     1836      6034
EXP1                             CODE     17F8      5994
EXP11                            CODE     17F2      5987
EXPONENTS_EQUAL                  CODE     1A5B      6720
EXPOT4                           CODE     1E16      7643
EXPOT5                           CODE     1E41      7672
EXPOTX                           CODE     1E14      7641
EXPOUT                           CODE     1E01      7628
EXPRB                            CODE     0F43      3975
E_FIND                           CODE     0A93      2992
F0                               BIT        D5
FCMP                             CODE     1202      4586
FDT1                             CODE     1D53      7478
FDT2                             CODE     1D5B      7482
FDTEST                           CODE     1D4F      7475
FINDC                            CODE     0EEE      3878
FINDCR                           CODE     0EEC      3876
FINISH1                          CODE     1D14      7429
FINISH2                          CODE     1D27      7445
FINISH_UP                        CODE     1D28      7447
FINISH_UP1                       CODE     1D2F      7452
FIRST_RADIX                      BIT        52      6422
FL1                              CODE     0AD3      3052
FL11                             CODE     0AD7      3056
FL2                              CODE     0AEC      3070
FL3                              CODE     0ADC      3059
FLOATING_ADD                     CODE     1993      6489
FLOATING_COMP                    CODE     1A43      6686
FLOATING_DIV                     CODE     1AB0      6833
FLOATING_MUL                     CODE     1A73      6754
FLOATING_POINT_INPUT             CODE     1CC2      7373
FLOATING_POINT_OUTPUT            CODE     1D7A      7523
FLOATING_SUB                     CODE     1989      6478
FMUL0                            CODE     1A78      6763
FMUL1                            CODE     1A7A      6767
FMUL2                            CODE     1A8C      6791
FMUL21                           CODE     1A8E      6792
FMUL3                            CODE     1A9D      6814
FMUL_OVER                        CODE     1A88      6777
FNDCL2                           CODE     0EF6      3884
FNDCL3                           CODE     0EFA      3887
FORMAT                           NUMBER   0017       448
FOUND_RADIX                      BIT        51      6421
FOV                              CODE     1A8A      6781
FPC1                             CODE     1BB5      7097
FPO1                             CODE     1D8C      7542
FPO2                             CODE     1D93      7549
FPO3                             CODE     1DA6      7562
FPONE                            CODE     16F2      5810
FPSIZ                            NUMBER   0006       598

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 179



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
FPT1                             XDATA    0119      8088
FPT2                             XDATA    011F      8090
FPTS                             CODE     104B      4184
FPTST                            CODE     1038      4173
FPTST1                           CODE     1045      4181
FP_ACC1                          NUMBER   0035      6441
FP_ACC2                          NUMBER   0036      6442
FP_ACC3                          NUMBER   0037      6443
FP_ACC4                          NUMBER   0038      6444
FP_ACC5                          NUMBER   0039      6445
FP_ACC6                          NUMBER   003A      6446
FP_ACC7                          NUMBER   003B      6447
FP_ACC8                          NUMBER   003C      6448
FP_ACCC                          NUMBER   0034      6440
FP_ACCS                          NUMBER   003D      6449
FP_ACCX                          NUMBER   0033      6439
FP_BASE                          CODE     196F      6463
FP_BASE1                         CODE     1971      6464
FP_BASE10                        CODE     1983      6473
FP_BASE11                        CODE     1985      6474
FP_BASE12                        CODE     1987      6475
FP_BASE2                         CODE     1973      6465
FP_BASE3                         CODE     1975      6466
FP_BASE4                         CODE     1977      6467
FP_BASE5                         CODE     1979      6468
FP_BASE6                         CODE     197B      6469
FP_BASE7                         CODE     197D      6470
FP_BASE8                         CODE     197F      6471
FP_BASE9                         CODE     1981      6472
FP_CARRY                         NUMBER   002A      6418
FP_CLEAR                         CODE     1BB2      7088
FP_DIG12                         NUMBER   002B      6424
FP_DIG34                         NUMBER   002C      6425
FP_DIG56                         NUMBER   002D      6426
FP_DIG78                         NUMBER   002E      6427
FP_EXP                           NUMBER   0030      6430
FP_NIB1                          NUMBER   002B      6431
FP_NIB2                          NUMBER   002C      6432
FP_NIB3                          NUMBER   002D      6433
FP_NIB4                          NUMBER   002E      6434
FP_NIB5                          NUMBER   002F      6435
FP_NIB6                          NUMBER   0030      6436
FP_NIB7                          NUMBER   0031      6437
FP_NIB8                          NUMBER   0032      6438
FP_NUMBER_SIZE                   NUMBER   0006      6400
FP_SIGN                          NUMBER   002F      6428
FP_STATUS                        NUMBER   0028      6416
FP_TEMP                          NUMBER   0029      6417
FREE                             CODE     1DD2      7597
FREE1                            CODE     1DD9      7602
FREE2                            CODE     1DF5      7621
FREE4                            CODE     1DED      7616
FRTEST                           CODE     1D4C      7473
FS                               CODE     13D0      4994
FSIZE                            NUMBER   0011       603
FSTK                             CODE     13CB      4991
FSUB10                           CODE     1A41      6682
FSUB5                            CODE     1A10      6642
FSUB6                            CODE     1A1B      6653

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 180



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
FSUB7                            CODE     1A1F      6656
FSUB8                            CODE     1A2A      6664
FSUB81                           CODE     1A2D      6665
FSUB9                            CODE     1A30      6670
FTYPE                            NUMBER   0001       591
FUL1                             CODE     15B0      5489
FULL                             CODE     15A8      5482
F_VAR                            CODE     0619      2085
F_VAR0                           CODE     0620      2089
F_VAR1                           CODE     0636      2106
F_VAR2                           CODE     0643      2117
G1                               CODE     058F      1915
G2                               CODE     05A2      1925
G3                               CODE     05A6      1928
G4                               CODE     05A9      1931
G5                               CODE     05AC      1933
GC                               CODE     0ECD      3837
GCI                              CODE     0ED5      3843
GCI1                             CODE     0ED7      3847
GCI11                            CODE     0EDE      3851
GETEND                           CODE     058A      1911
GETLIN                           CODE     058C      1913
GET_DIGIT_CHECK                  CODE     1FEB      8045
GET_DPTR_CHARACTER               CODE     1D5F      7496
GET_NUM                          CODE     1957      6269
GLN                              CODE     0AD1      3050
GT1                              CODE     1CEA      7404
GT11                             CODE     1CF2      7407
GT12                             CODE     1CF5      7408
GT2                              CODE     1D02      7417
GTB                              XDATA    0100      8077
GTEST                            CODE     1CDB      7397
GTRD                             BIT        18       466
GTX                              CODE     1547      5361
GTX1                             CODE     155A      5372
GTYPE                            NUMBER   0002       592
HC1                              CODE     1CB1      7356
HC11                             CODE     1CB4      7357
HEX2X                            CODE     1F3C      7957
HEXDO1                           CODE     1CA1      7341
HEXDON                           CODE     1CA0      7339
HEXOUT                           CODE     1F30      7945
HEXSC1                           CODE     1C8F      7328
HEXSCAN                          CODE     1C89      7319
HEX_CHECK                        CODE     1CA9      7348
HEX_CHECK1                       CODE     1CAE      7352
HMODE                            BIT        37       520
HOUT1                            CODE     1F48      7966
HOUTHI                           CODE     1F53      7974
HOUTLO                           CODE     1F54      7976
HS1                              CODE     1CA6      7345
H_RET                            CODE     196B      6305
I2                               CODE     123B      4642
I21                              CODE     1247      4649
I2CERRMSG                        CODE     2682      8619
I2CERROR                         CODE     266E      8608
I2CG00                           CODE     2632      8556
I2CG01                           CODE     2635      8559
I2CGET                           CODE     2620      8545

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 181



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
I2CPUT                           CODE     25E9      8503
I2CSTART                         CODE     25C8      8471
I2CSTOP                          CODE     25E0      8491
IAN                              CODE     00F3       748
IAT                              CODE     090B      2708
IAT1                             CODE     090E      2709
IBCNT                            XDATA    0004      8070
IBLK                             CODE     193F      6251
IBLK1                            CODE     194E      6257
IBLN                             XDATA    0005      8071
IBUF                             XDATA    0007      8072
ICLR                             CODE     069A      2212
ICLR1                            CODE     069F      2218
IE                               DATA       A8
IE0                              BIT        89
IE1                              BIT        8B
IFIX                             CODE     1223      4620
IFIXL                            CODE     0E90      3772
IGC                              CODE     0ECB      3835
ILOOP                            CODE     0813      2530
ILOOP1                           CODE     081F      2534
IMOV                             CODE     1566      5386
IN2                              CODE     0DFD      3662
IN2A                             CODE     0E02      3665
IN3                              CODE     0E0F      3671
IN3A                             CODE     0E20      3681
IN5                              CODE     0E40      3696
IN6                              CODE     0E49      3700
INBIT                            BIT        1D       475
INC3210                          CODE     1576      5408
INC3211                          CODE     157B      5412
INC3212                          CODE     1580      5415
INCH1                            CODE     07AA      2416
INCH11                           CODE     07AF      2418
INCH12                           CODE     07B4      2420
INCH13                           CODE     07BB      2428
INCHAR                           CODE     0791      2405
INCHAR1                          CODE     0799      2408
INCHAR2                          CODE     07A1      2411
INC_AND_GET_DPTR_CHARACTER       CODE     1D5E      7492
INC_ASTKA                        CODE     124F      4656
INC_FP_EXP                       CODE     1B72      7011
INERR                            CODE     1D44      7466
INL0                             CODE     06D6      2272
INL1                             CODE     06DD      2277
INL11                            CODE     06E6      2281
INL2                             CODE     06D3      2270
INL2B                            CODE     06EC      2286
INL2B1                           CODE     06F2      2289
INL2B2                           CODE     06F5      2290
INL6                             CODE     06FE      2296
INLINE                           CODE     06D8      2274
INLOOP                           CODE     1CD0      7389
INLPIK                           CODE     1CD8      7394
INLX                             CODE     06E8      2283
INPROG                           BIT        11       459
INP_B                            BIT        22       482
INS                              CODE     0103       752
INSR                             CODE     1517      5329

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 182



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
INSR1                            CODE     1523      5336
INT0                             BIT        B2
INT1                             BIT        B3
INTBIT                           BIT        12       460
INTERR                           CODE     0F30      3952
INTERR1                          CODE     0F32      3953
INTERX                           CODE     0938      2734
INTERX1                          CODE     093B      2736
INTERX2                          CODE     0941      2738
INTERX3                          CODE     0948      2741
INTERX4                          CODE     094D      2743
INTGER                           CODE     0F35      3956
INTGRC                           BIT        19      6392
INTLOC                           XDATA    0120      8091
INTPEN                           BIT        16       464
INTXAH                           NUMBER   0042       548
INTXAL                           NUMBER   0043       549
IP                               DATA       B8
IPROGS                           XDATA    012A      8101
IRAMTOP                          NUMBER   00FF       566
ISAV                             BIT        2B       501
ISTA0                            CODE     0950      2745
ISTA01                           CODE     095A      2749
ISTA1                            CODE     095C      2751
ISTAT                            CODE     08F8      2699
ISTAT1                           CODE     0900      2702
ISTAX                            CODE     091C      2717
ISTAX1                           CODE     0921      2720
ISTAY                            CODE     0925      2724
ISTAY1                           CODE     0928      2725
ISTAY2                           CODE     092D      2727
IST_CAL                          CODE     09E7      2855
IT0                              BIT        88
IT1                              BIT        8A
ITRAP                            CODE     086A      2586
ITRAP1                           CODE     0872      2591
ITRAP2                           CODE     087A      2596
ITRAP21                          CODE     087D      2597
ITRAP3                           CODE     0882      2605
ITRET                            CODE     0F40      3962
I_DL                             CODE     185B      6061
I_DR                             CODE     1902      6177
I_L                              CODE     0849      2558
I_PI                             CODE     0E95      3779
I_RET                            CODE     1871      6078
I_S                              CODE     0933      2731
I_S1                             CODE     0936      2732
I_T0                             BIT        26       486
L20DPI                           CODE     0573      1861
L31DPI                           CODE     05BA      1961
LCLR                             CODE     05E7      2025
LDPTRI                           CODE     05B0      1945
LD_A                             CODE     0FE9      4103
LD_T                             CODE     0582      1888
LEFT                             CODE     1BF3      7157
LEFT1                            CODE     1BF5      7163
LEFT2                            CODE     1BF6      7164
LEFT3                            CODE     1BFD      7169
LEFT5                            CODE     1C1C      7196

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 183



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
LEFTL                            CODE     1C08      7178
LEFTL1                           CODE     1C1B      7194
LF                               NUMBER   000A       572
LIN1                             CODE     155C      5374
LINE                             CODE     14F0      5302
LINE0                            CODE     14ED      5300
LINE1                            CODE     150B      5319
LINEB                            BIT        15       463
LINLEN                           NUMBER   0049       587
LMOV                             CODE     156D      5402
LNTAB                            CODE     16A9      5715
LN_D                             CODE     131B      4806
LOAD1                            CODE     19AD      6525
LOAD2                            CODE     19BD      6537
LOAD21                           CODE     19C5      6544
LOAD22                           CODE     19CA      6550
LOAD23                           CODE     19CE      6553
LOAD25                           CODE     19E3      6601
LOAD7                            CODE     1B93      7043
LOADR1                           CODE     1C7F      7308
LOADR1_MANTISSA                  CODE     1C7B      7299
LOAD_POINTERS                    CODE     1C5E      7254
LP                               BIT        97       521
LPB                              BIT        19       467
LTOUT1                           CODE     074A      2359
LTX                              CODE     1528      5342
LTX1                             CODE     152F      5347
LTX2                             CODE     1543      5358
L_RET                            CODE     0EEB      3867
MDES1                            CODE     1C6A      7276
MEMTOP                           XDATA    010A      8083
MILLIV                           NUMBER   0047       552
MISO                             BIT        96      8188
MNL0                             CODE     1C3E      7228
MNL1                             CODE     1C50      7240
MNLOOP                           CODE     1C35      7220
MOSI                             BIT        95      8187
MOUT                             CODE     1E8E      7742
MSIGN                            BIT        78      6429
MT1                              NUMBER   0045       550
MT2                              NUMBER   0046       551
MT_ALL                           XDATA    0108      8082
MU1                              CODE     136B      4859
MUL11                            CODE     1EEF      7823
MULNUM                           CODE     1ED6      7801
MULNUM10                         CODE     1ED3      7797
MULX                             CODE     1EF6      7830
MUL_DIV_EXP_AND_SIGN             CODE     1C68      7267
MUL_NIBBLE                       CODE     1C2B      7206
MUL_UNDERFLOW                    BIT        28       495
N4                               CODE     0BC6      3268
NL1                              CODE     1E6E      7712
NLC                              CODE     077A      2386
NLC1                             CODE     077F      2388
NLC2                             CODE     0782      2389
NLC3                             CODE     0786      2391
NMARK_L                          CODE     1A96      6797
NMOV                             CODE     159D      5464
NMOV1                            CODE     15A7      5472

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 184



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
NOGO                             CODE     056E      1856
NOPASS                           CODE     0F21      3932
NOROM                            CODE     1FC9      8032
NO_C                             BIT        30       506
NR1                              CODE     1E77      7721
NTWO                             CODE     1161      4426
NULL                             NUMBER   0000       577
NULLCT                           NUMBER   0015       446
NUMC                             CODE     0C19      3335
NUMC1                            CODE     0C22      3340
NUM_LT                           CODE     1E67      7706
NUM_RT                           CODE     1E70      7715
ONE                              CODE     0E8E      3766
ON_ERR                           BIT        13       461
OOPS                             CODE     0D3A      3524
OPBOL                            CODE     00CF       706
OPTAB                            CODE     0057       630
OTI                              BIT        14       462
OTS                              BIT        10       458
OTST                             CODE     1938      6238
OTST1                            CODE     193E      6243
OUTPUT                           CODE     196C      6453
OUTR                             CODE     1E5C      7695
OUTR0                            CODE     1E4B      7681
OV                               BIT        D2
OVE1                             CODE     1B98      7054
OVERFLOW                         NUMBER   0001      6402
OVERFLOW_AND_EXIT                CODE     1B94      7047
P                                BIT        D0
P0                               DATA       80
P0_DIR                           NUMBER   00C4       251
P0_PU                            NUMBER   00C5       252
P1                               DATA       90
P1_DIR                           NUMBER   00BA      8176
P1_DIR_PU                        NUMBER   0093      8174
P1_IE                            NUMBER   00B9      8193
P1_MOD_OC                        NUMBER   0092      8173
P1_PU                            NUMBER   00BB      8177
P2                               DATA       A0
P3                               DATA       B0
PACK                             CODE     1B11      6912
PACK0                            CODE     1B1A      6925
PACK1                            CODE     1B1B      6927
PACK11                           CODE     1B23      6932
PACK2                            CODE     1B25      6934
PACK3                            CODE     1B37      6948
PACK31                           CODE     1B38      6949
PACK4                            CODE     1B4F      6972
PAREN_INT                        CODE     0E97      3785
PCL                              CODE     1439      5099
PCON                             DATA       87
PCON0                            NUMBER   0087       559
PG1                              CODE     04BD      1703
PG10                             CODE     04BC      1701
PG101                            CODE     04B5      1696
PG2                              CODE     04C3      1707
PG31                             CODE     04F7      1740
PG4                              CODE     04C0      1705
PG5                              CODE     04CB      1712

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 185



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
PG6                              CODE     04D0      1715
PG7                              CODE     04D9      1720
PG8                              CODE     046F      1529
PGR                              CODE     04B3      1694
PGU                              CODE     04F8      1744
PHEAD                            NUMBER   0016       447
PIE                              CODE     17FE      6013
PIN_FUNC                         NUMBER   00CE       250
PIPI                             CODE     147F      5176
PLL_CFG                          NUMBER   00B2       246
PLNEXP                           CODE     1430      5087
PLOOP                            CODE     1B51      6976
PLUS_MINUS_TEST                  CODE     1D65      7505
PMT1                             CODE     1D79      7519
PMT11                            CODE     1D6A      7509
PMT12                            CODE     1D6F      7511
PMT13                            CODE     1D74      7513
PMT2                             CODE     1D77      7515
PMT3                             CODE     1D78      7517
PMTOP                            CODE     164F      5628
PMTOP1                           CODE     1652      5629
PN0                              CODE     06C3      2256
PN01                             CODE     06CC      2260
PN02                             CODE     06CD      2261
PN1                              CODE     06B9      2247
POLY1                            CODE     11A3      4506
POLYC                            CODE     119B      4497
POPAS                            CODE     0FD3      4072
POP_AND_EXIT                     CODE     19A5      6516
POP_T1                           CODE     1448      5114
PORT_CFG                         NUMBER   00C6      8175
POSNM1                           CODE     1D24      7442
POSNUM                           CODE     1D21      7439
POTWO                            CODE     1192      4487
PP                               CODE     15BA      5505
PPL                              CODE     15CD      5516
PPL1                             CODE     15D2      5519
PPL2                             CODE     15D7      5524
PPL21                            CODE     15DC      5527
PPL22                            CODE     15E1      5529
PPL3                             CODE     15F0      5541
PPL4                             CODE     15F5      5547
PPL41                            CODE     15FE      5556
PPL6                             CODE     1622      5580
PPL61                            CODE     162B      5585
PPL7                             CODE     162F      5588
PPL71                            CODE     1630      5589
PPL9                             CODE     1643      5601
PPL91                            CODE     1644      5602
PPLX                             CODE     1609      5565
PPLY                             CODE     1616      5571
PPLY1                            CODE     161B      5576
PPX                              CODE     15E5      5532
PRET                             CODE     1B71      7009
PRNTCR                           CODE     06C1      2254
PROGS                            XDATA    0128      8095
PS                               BIT        BC
PSTART                           NUMBER   0200       602
PSW                              DATA       D0

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 186



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
PT0                              BIT        B9
PT1                              BIT        BB
PTIME                            CODE     0709      2314
PUL000                           CODE     275C      8757
PUL002                           CODE     2761      8761
PUL003                           CODE     2763      8762
PUL010                           CODE     276A      8768
PUL012                           CODE     276D      8771
PUL020                           CODE     2772      8777
PULSE                            CODE     2748      8746
PUSHAS                           CODE     0FDD      4082
PUSHC                            CODE     1433      5095
PUSHCS                           CODE     0BB1      3253
PUSHCS1                          CODE     0BB6      3255
PUSHCS2                          CODE     0BBC      3260
PUSHR2R0                         CODE     1CB6      7360
PUSH_ONE                         CODE     1443      5109
PUSH_T1                          CODE     144F      5120
PUSH_T11                         CODE     1451      5123
PUSH_T12                         CODE     1453      5125
PX0                              BIT        B8
PX1                              BIT        BA
P_E                              CODE     0CDF      3469
P_T2                             CODE     1456      5128
P_Z                              CODE     1375      4875
R0B0                             NUMBER   0000       411
R1B0                             NUMBER   0001       412
R2B0                             NUMBER   0002       413
R3B0                             NUMBER   0003       414
R3CK                             CODE     09D5      2837
R4B0                             NUMBER   0004       415
R5B0                             NUMBER   0005       416
R6B0                             NUMBER   0006       417
R76S                             CODE     0DEF      3643
R7B0                             NUMBER   0007       418
RB8                              BIT        9A
RC1                              CODE     066F      2170
RC2                              CODE     0673      2173
RCAPH2                           NUMBER   00CB       562
RCAPL2                           NUMBER   00CA       563
RCASB                            CODE     1ECF      7793
RCELL                            XDATA    010C      8084
RCL                              CODE     0885      2606
RCL1                             CODE     088A      2614
RCL2                             CODE     0892      2621
RCL3                             CODE     0898      2625
RCL4                             CODE     089E      2629
RCL5                             CODE     08A4      2633
RCL6                             CODE     08AA      2637
RCLEAR                           CODE     0664      2164
RD                               BIT        B7
RDSFR                            CODE     27A4      8802
RDYS                             CODE     00FD       750
READ                             CODE     263A      8563
RECIP                            CODE     127C      4695
REN                              BIT        9C
RETBIT                           BIT        25       485
RET_X                            CODE     1D46      7468
RF1                              CODE     055E      1843

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 187



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
RF2                              CODE     0565      1849
RF3                              CODE     056B      1854
RFX                              CODE     0564      1847
RI                               BIT        98
RIGHT                            CODE     1BBB      7104
RIGHT1                           CODE     1BBD      7111
RIGHT2                           CODE     1BBE      7112
RIGHT3                           CODE     1BC5      7119
RIGHT5                           CODE     1BE4      7145
RIGHTL                           CODE     1BD1      7129
RIGHTL1                          CODE     1BE3      7143
RL1                              CODE     0AF4      3083
RLINE                            CODE     0AF2      3081
RMOV                             CODE     1581      5427
RO1                              CODE     0543      1828
RO11                             CODE     054E      1834
ROMADR                           NUMBER   8000       594
ROMFD                            CODE     055B      1841
ROM_P                            CODE     06AF      2240
ROM_P1                           CODE     06B7      2245
ROUT                             CODE     1E92      7745
RROM                             CODE     07C0      2444
RS0                              BIT        D3
RS1                              BIT        D4
RSUB1                            CODE     1EF9      7902
RSUB2                            CODE     1F23      7931
RSUB3                            CODE     1F2D      7938
RTST                             CODE     0AC7      3033
RTST1                            CODE     0AD0      3041
RTXAH                            NUMBER   0012       440
RTXAL                            NUMBER   0010       438
RV                               CODE     11B5      4519
RXD                              BIT        B0
S0RELH                           NUMBER   00BA       561
S0RELL                           NUMBER   00AA       560
S0_FREE                          NUMBER   00FB      8184
S13                              CODE     0D3D      3526
S20DP                            CODE     1424      5069
S31DP                            CODE     0605      2054
S31DP2                           CODE     0603      2052
S31L                             CODE     170E      5829
SA                               CODE     0D1B      3511
SA1                              CODE     0D22      3514
SA2                              CODE     0D26      3516
SAFE_MOD                         NUMBER   00A1       248
SAVE_T                           NUMBER   004A       555
SBAUD                            CODE     16F9      5819
SBUF                             DATA       99
SCALL                            CODE     0E63      3724
SCK                              BIT        97      8189
SCL                              BIT        97      8156
SCLOCK                           CODE     1918      6196
SCLR                             CODE     068F      2201
SCON                             DATA       98
SCS                              BIT        94      8186
SC_R                             CODE     192D      6216
SD0                              CODE     0D5C      3552
SD01                             CODE     0D59      3550
SDA                              BIT        96      8155

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 188



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
SDI                              CODE     0DBC      3616
SDIMX                            CODE     0D61      3555
SE0                              CODE     0CBE      3435
SE1                              CODE     199F      6510
SEND                             CODE     25F9      8516
SERR1                            CODE     18B3      6127
SETFSYS                          CODE     0440      1499
SETREG                           CODE     1253      4663
SETREG1                          CODE     1254      4664
SF2                              CODE     0A53      2940
SF21                             CODE     0A56      2942
SF3                              CODE     0A72      2957
SFOR                             CODE     0A3C      2928
SFRERRMSG                        CODE     278C      8797
SFRERROR                         CODE     2778      8786
SFRGETTAB                        CODE     2813      8881
SFRPUTTAB                        CODE     2811      8880
SGOSUB                           CODE     0B2D      3157
SGOTO                            CODE     0AAA      3013
SGS0                             CODE     0B2F      3159
SGS1                             CODE     0B35      3163
SGT1                             CODE     0AAC      3015
SGT11                            CODE     0AB7      3021
SGT2                             CODE     0AB9      3023
SGT21                            CODE     0AC1      3026
SIF                              CODE     0A86      2985
SIF1                             CODE     0A90      2990
SIGNS_DIFFERENT                  CODE     1A53      6706
SIN0                             CODE     11FC      4576
SINOUT                           CODE     1E8B      7739
SINPUT                           CODE     0DF5      3656
SINTAB                           CODE     16CE      5765
SLET                             CODE     096E      2772
SLET0                            CODE     09C2      2824
SLET1                            CODE     09C6      2827
SLET2                            CODE     09C8      2829
SM                               CODE     0C5F      3386
SM0                              BIT        9F
SM01                             CODE     0C6D      3392
SM02                             CODE     0C71      3394
SM1                              BIT        9E
SM2                              BIT        9D
SNEXT                            CODE     0B5F      3198
SONERR                           CODE     140F      5048
SONEXT                           CODE     1419      5060
SOT                              CODE     0E56      3710
SOUT                             CODE     1E9A      7751
SOUT1                            CODE     1E9C      7753
SOUT_1                           CODE     1F46      7964
SP                               DATA       81
SP0                              CODE     0C3C      3364
SP1                              CODE     0C43      3369
SP2                              CODE     0C3F      3366
SP4                              CODE     0C47      3372
SP6                              CODE     0C52      3378
SP7                              CODE     0C57      3381
SP8                              CODE     0C75      3397
SP9                              CODE     0CD7      3456
SP9A                             CODE     0CDE      3461

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 189



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
SPACE7                           CODE     1E78      7723
SPEOP                            CODE     09D9      2840
SPEOP1                           CODE     09DD      2842
SPH0                             CODE     0C29      3350
SPH1                             CODE     0C2B      3352
SPI0_CK_SE                       NUMBER   00FB      8181
SPI0_CTRL                        NUMBER   00FA      8180
SPI0_DATA                        NUMBER   00F9      8179
SPI0_SETUP                       NUMBER   00FC      8182
SPI0_STAT                        NUMBER   00F8      8178
SPIC00                           CODE     2541      8433
SPICERR                          CODE     2547      8438
SPICS                            CODE     2530      8422
SPIEMSG1                         CODE     255B      8450
SPIEMSG2                         CODE     2578      8453
SPIEMSG3                         CODE     2593      8456
SPIEMSG4                         CODE     25AE      8459
SPIERROR                         CODE     2550      8444
SPIG00                           CODE     24F1      8381
SPIGET                           CODE     24EE      8380
SPINT                            BIT        1F       479
SPIP00                           CODE     24DC      8367
SPIPERR                          CODE     24E3      8372
SPIPUT                           CODE     24CC      8358
SPIRO0                           CODE     2513      8403
SPIROERR                         CODE     2525      8414
SPIROT                           CODE     2503      8394
SPIS00                           CODE     24AD      8336
SPISERR                          CODE     24C1      8350
SPISTART                         CODE     249D      8330
SPOP                             CODE     0A7D      2972
SPOP1                            CODE     0A85      2977
SPRINT                           CODE     0C2D      3354
SPRINT1                          CODE     0C31      3356
SPRINT2                          CODE     0C38      3361
SPSAV                            NUMBER   003E       544
SPUSH                            CODE     0A76      2966
SPV                              XDATA    0124      8093
SP_H                             NUMBER   004B       556
SP_L                             NUMBER   004C       557
SQ                               CODE     0C7C      3401
SQR1                             CODE     12A3      4725
SQR2                             CODE     12AA      4732
SQR4                             CODE     12AD      4737
SQR41                            CODE     12BE      4746
SQ_ERR                           CODE     128A      4704
SR0                              CODE     0B14      3134
SR01                             CODE     0B24      3144
SRD                              CODE     0BE9      3306
SRD0                             CODE     0BE5      3303
SRD1                             CODE     0BF2      3311
SRD2                             CODE     0BF4      3313
SRD21                            CODE     0BFE      3318
SRD4                             CODE     0BFF      3320
SRD5                             CODE     0C06      3324
SRD51                            CODE     0C09      3325
SRD6                             CODE     0C11      3330
SREAD                            CODE     0BE3      3301
SRESTR                           CODE     0BCE      3278

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 190



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
SRESTR1                          CODE     0BD0      3279
SRETI                            CODE     0B0E      3123
SRETRN                           CODE     0B10      3131
SRT                              CODE     1219      4607
SS                               CODE     0D12      3506
SS7                              CODE     1E89      7737
SSOOP                            CODE     099D      2800
SSTOP                            CODE     0858      2571
SSTOP0                           CODE     0860      2575
STACKTP                          NUMBER   00FE       567
STATD                            CODE     0123       785
STATUS                           NUMBER   0018      8159
STDIG                            CODE     1D38      7459
STDIG1                           CODE     1D47      7470
STEROT                           CODE     070F      2330
STESIZ                           NUMBER   0009       600
STJ                              CODE     0020       354
STK                              CODE     0041       397
STONE                            CODE     1686      5691
STONE1                           CODE     168B      5698
STOPBIT                          BIT        20       480
STORE2                           CODE     1B69      7001
STORE_ALIGN_TEST_AND_EXIT        CODE     1B63      6991
STP                              CODE     00EE       746
STQ                              CODE     0033       389
STRING                           CODE     060C      2065
STRIP                            CODE     11DA      4552
STR_AL                           XDATA    0122      8092
STS                              CODE     003E       395
STU                              CODE     0044       400
ST_A                             CODE     0FE5      4093
ST_ALL                           XDATA    0106      8081
SUBLP                            CODE     19FB      6621
SUI                              CODE     192E      6220
SUNTIL                           CODE     0B01      3100
SUO                              CODE     1933      6230
SWAP_AND_EXIT                    CODE     199B      6503
SWAP_ASTKA                       CODE     145A      5133
SWHILE                           CODE     0AFC      3096
SX                               CODE     0C81      3404
SX1                              CODE     0C97      3413
S_0                              CODE     0982      2783
S_1                              CODE     09B2      2814
S_11                             CODE     09BA      2818
S_3                              CODE     0991      2793
S_4                              CODE     099F      2802
S_41                             CODE     09A6      2805
S_5                              CODE     09AD      2811
S_C                              CODE     0EBF      3813
S_C_1                            CODE     0E72      3736
S_DO                             CODE     0F05      3909
S_E                              CODE     098C      2789
S_L                              CODE     1461      5143
S_LEN                            NUMBER   003F       545
S_N                              CODE     1FD3      8039
S_ON                             CODE     0CEB      3480
S_WU                             CODE     0B03      3102
T0                               BIT        B4
T1                               BIT        B5

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 191



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
T2CON                            NUMBER   00C8       240
T2MOD                            NUMBER   00C9       245
TB                               CODE     15B5      5492
TB8                              BIT        9B
TBR                              CODE     1599      5452
TBYTE                            CODE     1596      5449
TCON                             DATA       88
TEMP1                            NUMBER   000B       429
TEMP2                            NUMBER   000C       430
TEMP3                            NUMBER   000D       431
TEMP4                            NUMBER   000E       432
TEMP5                            NUMBER   000F       433
TEMPD                            CODE     1854      6055
TEMP_COMP                        CODE     131C      4810
TEROT                            CODE     0711      2332
TEROT01                          CODE     0717      2335
TEROT02                          CODE     071E      2338
TEROT03                          CODE     0727      2342
TEROT04                          CODE     072F      2345
TEROT1                           CODE     0766      2374
TEROT11                          CODE     076C      2377
TEROT2                           CODE     0773      2381
TEST_USER                        CODE     17E0      5968
TF0                              BIT        8D
TF1                              BIT        8F
TH0                              DATA       8C
TH1                              DATA       8D
TH2                              NUMBER   00CD       242
THREE                            CODE     0E78      3742
TI                               BIT        99
TIMER_LOAD                       CODE     052D      1798
TIMER_LOAD1                      CODE     052F      1803
TIV                              XDATA    0126      8094
TL0                              DATA       8A
TL1                              DATA       8B
TL2                              NUMBER   00CC       241
TMOD                             DATA       89
TMR0                             NUMBER   00C8      1135
TMR1                             NUMBER   00C9      1139
TMR2                             NUMBER   00CA      1143
TM_TOP                           XDATA    012C      8105
TOKENTABLE                       CODE     241E      8260
TOKTAB                           CODE     0175       833
TR                               CODE     1913      6186
TR0                              BIT        8C
TR1                              BIT        8E
TRC2                             NUMBER   00CE      1163
TT2C                             NUMBER   00CB      1151
TTC                              NUMBER   00CC      1155
TTIME                            CODE     1167      4444
TTM                              NUMBER   00CD      1159
TVH                              NUMBER   0048       553
TVL                              NUMBER   0049       554
TWO                              CODE     0E85      3755
TWOL                             CODE     14A1      5211
TWO_EX                           CODE     14B3      5230
TWO_EY                           CODE     14B4      5233
TWO_R2                           CODE     14B1      5227
TXAH                             NUMBER   000A       425

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 192



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
TXAL                             NUMBER   0008       423
TXD                              BIT        B1
TXX                              CODE     075F      2370
T_1                              CODE     073A      2350
T_ADD                            NUMBER   00E3      1016
T_ASC                            NUMBER   00D1      1175
T_BIT                            BIT        92       530
T_BUF                            CODE     176C      5876
T_CHR                            NUMBER   00D3      1185
T_CMND                           NUMBER   00F0      1189
T_CMP                            CODE     07E3      2487
T_CR                             NUMBER   00AA       985
T_DATA                           NUMBER   009C       933
T_DIR                            NUMBER   0090       897
T_DP                             CODE     0EB8      3807
T_ELSE                           NUMBER   00A8       977
T_EQU                            NUMBER   00EA      1038
T_F1                             CODE     0A9E      2998
T_GOSB                           NUMBER   009F       943
T_GOTO                           NUMBER   0083       848
T_HH                             NUMBER   0040       546
T_IE                             NUMBER   00C6      1127
T_IP                             NUMBER   00C7      1131
T_L                              CODE     196C      6454
T_LAST                           NUMBER   00A4       959
T_LL                             NUMBER   0041       547
T_LPAR                           NUMBER   00E0      1006
T_MTOP                           NUMBER   00C4      1123
T_NEG                            NUMBER   00E9      1036
T_P1                             NUMBER   00CF      1167
T_PC                             NUMBER   00D0      1171
T_REM                            NUMBER   0096       914
T_SPC                            NUMBER   00A9       981
T_STEP                           NUMBER   00A7       973
T_STOP                           NUMBER   0090       893
T_SUB                            NUMBER   00E5      1023
T_T                              CODE     08B0      2647
T_T01                            CODE     08BE      2654
T_T1                             CODE     08CE      2661
T_T2                             CODE     08DF      2678
T_TAB                            NUMBER   00A4       961
T_THEN                           NUMBER   00A5       965
T_TIME                           NUMBER   00C5      1147
T_TO                             NUMBER   00A6       969
T_TRAP                           CODE     08E5      2684
T_ULAST                          NUMBER   00BE      1102
T_UOP                            NUMBER   00B0      1058
T_USE                            NUMBER   00D2      1179
T_XTAL                           NUMBER   00C3      1119
T_X_S                            CODE     0B39      3166
U3                               CODE     0C9B      3416
U4                               CODE     0C9F      3419
U5                               CODE     0CA9      3424
U5A                              CODE     0CC0      3437
U6                               CODE     0CCD      3449
U7                               CODE     0CCF      3451
U8                               CODE     0CC9      3446
U8A                              CODE     0CC4      3441
U8B                              CODE     0CC6      3443

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 193



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
UBIT                             BIT        2A       500
UE                               CODE     1513      5324
ULOOP                            CODE     1B82      7029
UNDERFLOW                        NUMBER   0000      6401
UNDERFLOW_AND_EXIT               CODE     1BA5      7066
UNDER_MD                         CODE     1B4D      6967
UNPACK_R0                        CODE     1B7E      7022
UOPBOL                           CODE     00E0       725
UPB                              BIT        27       487
UPP0                             CODE     10AE      4265
UPP01                            CODE     10B1      4266
UPP02                            CODE     10BC      4272
UPP03                            CODE     10C1      4274
UPP04                            CODE     10C6      4276
UPP1                             CODE     10DD      4290
UPP11                            CODE     10E3      4293
UPP1A                            CODE     10D9      4287
UPP2                             CODE     10EC      4297
UPP3                             CODE     1101      4310
UPP4                             CODE     110D      4318
UPP41                            CODE     1115      4322
UPP42                            CODE     1119      4324
UPP7                             CODE     1121      4330
UPP7A                            CODE     111F      4328
UPP8                             CODE     1123      4332
UPP81                            CODE     1125      4334
UPP9                             CODE     10CD      4280
UPP91                            CODE     10D5      4284
UPPL                             CODE     10A3      4245
UPPL0                            CODE     10A0      4236
UPRNT                            CODE     06BF      2252
UP_2                             CODE     10F7      4304
UP_3                             CODE     10FA      4306
UP_4                             CODE     10FD      4307
USENT                            CODE     0047       611
USING0                           CODE     1DB0      7568
USING1                           CODE     1DB6      7573
USING2                           CODE     1DC8      7586
USINGX                           CODE     1DC6      7584
USINGY                           CODE     1DC3      7581
U_ID1                            CODE     1860      6068
U_IDL                            BIT        21       481
U_RET                            CODE     1E4A      7679
V4                               CODE     0DB4      3611
VAR                              CODE     0D65      3558
VAR1                             CODE     0D67      3560
VAR11                            CODE     0D71      3565
VAR2                             CODE     0D9A      3592
VARB                             CODE     0A0D      2886
VARCOP                           CODE     1472      5166
VARD                             CODE     0A10      2888
VARTOP                           XDATA    0104      8080
VAR_ER                           CODE     0F01      3899
VECTORTABLE                      CODE     2400      8233
VX                               CODE     0D80      3579
VY                               CODE     0D74      3569
V_C                              CODE     1474      5168
WCR                              CODE     0EFC      3889
WE                               CODE     0F41      3965

C51ASM V1.2            Copyright (c) 2009 Atmel Corp.           PAGE 194



SYMBOL                           TYPE     VALUE     LINE
--------------------------------------------------------
WR                               BIT        B6
WRSFR                            CODE     27CC      8830
X3120                            CODE     0DAD      3603
X31DP                            CODE     0579      1874
XBILT                            CODE     0FB8      4050
XBILT1                           CODE     0FC2      4054
XBIT                             BIT        2D       503
XLPAR                            CODE     0FC4      4056
XOP                              CODE     0F86      4015
XOP1                             CODE     0F90      4020
XOP11                            CODE     0FA3      4031
XOP12                            CODE     0FAD      4039
XOP2                             CODE     0FAF      4043
XOP3                             CODE     0FCA      4060
XOUT0                            CODE     1E23      7651
XOUT2                            CODE     1E28      7655
XOUT3                            CODE     1E30      7660
XOUT4                            CODE     1E34      7664
XPOP                             CODE     0FD1      4064
XSIGN                            BIT        50      6420
XTALV                            CODE     17EC      5980
XXI                              CODE     0B67      3203
XXI1                             CODE     0B76      3213
XXI2                             CODE     0BAB      3240
XXI3                             CODE     0BAF      3242
X_TR                             CODE     0BD6      3285
Z7R7                             CODE     1E80      7729
ZERO                             NUMBER   0002      6403
ZERO7                            CODE     1E81      7731
ZERO_AND_EXIT                    CODE     1BAB      7077
ZERO_DIVIDE                      NUMBER   0003      6404
ZOUT                             CODE     1E96      7748
ZRO                              CODE     04E0      1726
ZSURP                            BIT        36       519
ZT0                              CODE     1E5F      7699
ZT1                              CODE     1E66      7704
ZTEST                            CODE     1E5D      7697
